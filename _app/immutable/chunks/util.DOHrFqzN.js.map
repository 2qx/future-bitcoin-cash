{"version":3,"file":"util.DOHrFqzN.js","sources":["../../../../../../../lib/dist/main/util.js"],"sourcesContent":["import { cashAddressToLockingBytecode, CashAddressType, decodeCashAddress } from \"@bitauth/libauth\";\nexport function deriveLockingBytecode(address) {\n    const lock = cashAddressToLockingBytecode(address);\n    if (typeof lock === \"string\")\n        throw lock;\n    return lock.bytecode;\n}\nexport function getFutureBlockDate(currentBlock, futureBlock) {\n    const blocks = futureBlock - currentBlock;\n    var futureDate = new Date();\n    //@ts-ignore\n    futureDate.setTime(futureDate.getTime() + 6E5 * blocks);\n    return futureDate;\n}\nexport function delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n}\nexport function isTokenAddress(rawAddress) {\n    const addressInfo = decodeCashAddress(rawAddress);\n    if (typeof addressInfo == \"string\")\n        return false;\n    return addressInfo.type == CashAddressType.p2pkhWithTokens || addressInfo.type == CashAddressType.p2shWithTokens;\n}\n//# sourceMappingURL=util.js.map"],"names":["getFutureBlockDate","currentBlock","futureBlock","blocks","futureDate","delay","time","resolve","isTokenAddress","rawAddress","addressInfo","decodeCashAddress","CashAddressType"],"mappings":"8CAOO,SAASA,EAAmBC,EAAcC,EAAa,CAC1D,MAAMC,EAASD,EAAcD,EAC7B,IAAIG,EAAa,IAAI,KAErB,OAAAA,EAAW,QAAQA,EAAW,QAAO,EAAK,IAAMD,CAAM,EAC/CC,CACX,CACO,SAASC,EAAMC,EAAM,CACxB,OAAO,IAAI,QAAQC,GAAW,WAAWA,EAASD,CAAI,CAAC,CAC3D,CACO,SAASE,EAAeC,EAAY,CACvC,MAAMC,EAAcC,EAAkBF,CAAU,EAChD,OAAI,OAAOC,GAAe,SACf,GACJA,EAAY,MAAQE,EAAgB,iBAAmBF,EAAY,MAAQE,EAAgB,cACtG"}