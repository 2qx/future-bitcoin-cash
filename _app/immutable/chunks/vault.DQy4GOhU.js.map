{"version":3,"file":"vault.DQy4GOhU.js","sources":["../../../../../../../lib/dist/main/coupon.js","../../../../../../../lib/dist/main/vault.js"],"sourcesContent":["import { encodeDataPush, hash256, bigIntToVmNumber, CashAddressNetworkPrefix, hexToBin, lockingBytecodeToCashAddress } from \"@bitauth/libauth\";\nexport class Coupon {\n    amount;\n    lock;\n    static lockingScript = \"00cc00c694a16900c788c08bc39c\";\n    /**\n     * Return the address for a Coupon\n     *\n     *\n     * @param amount - the threshold amount (sats) to redeem coupon\n     * @param lock - the vault locking bytecode\n     * @param network - the network prefix\n     */\n    static getAddress(amount, lock, network = CashAddressNetworkPrefix.mainnet) {\n        let lockingBytecode = this.getLockingBytecode(amount, lock);\n        let addr = lockingBytecodeToCashAddress(lockingBytecode, network, { tokenSupport: true });\n        if (typeof addr !== 'string')\n            throw (addr);\n        return addr;\n    }\n    /**\n     * Return the unlockingBytecode for a Coupon\n     *\n     *\n     * @param amount - the threshold amount (sats) to redeem coupon\n     * @param lock - the vault locking bytecode\n     */\n    static getUnlockingBytecode(amount, lock) {\n        const amountVm = encodeDataPush(bigIntToVmNumber(BigInt(amount)));\n        const lockVm = encodeDataPush(lock);\n        const lockingScript = hexToBin(this.lockingScript);\n        return new Uint8Array([\n            ...lockVm,\n            ...amountVm,\n            ...lockingScript\n        ]);\n    }\n    /**\n     * Return the lockingBytecode for a Coupon\n     *\n     *\n     * @param amount - the threshold amount (sats) to redeem coupon\n     * @param lock - the Vault locking bytecode\n     */\n    static getLockingBytecode(amount, lock) {\n        return new Uint8Array([\n            ...hexToBin(\"aa20\"),\n            ...hash256(this.getUnlockingBytecode(amount, lock)),\n            ...hexToBin(\"87\")\n        ]);\n    }\n    static asInput(amount, lock, utxo) {\n        return {\n            outpointIndex: utxo.vout,\n            outpointTransactionHash: hexToBin(utxo.txid),\n            sequenceNumber: 0,\n            unlockingBytecode: this.getUnlockingBytecode(amount, lock),\n        };\n    }\n}\n//# sourceMappingURL=coupon.js.map","import { encodeDataPush, hash256, bigIntToVmNumber, CashAddressNetworkPrefix, hexToBin, lockingBytecodeToCashAddress } from \"@bitauth/libauth\";\nimport { Coupon } from \"./coupon\";\nexport class Vault {\n    locktime;\n    static lockingScript = \"c0d3c0d0a06376b17568c0cec0d188c0cdc0c788c0d0c0c693c0d3c0cc939c77\";\n    /**\n     * Return the token address for a Vault\n     *\n     *\n     * @param time - block time of the vault lock\n     * @param network - cashaddress network prefix\n     */\n    static getAddress(time, network = CashAddressNetworkPrefix.mainnet) {\n        let lockingBytecode = this.getLockingBytecode(time);\n        let addr = lockingBytecodeToCashAddress(lockingBytecode, network, { tokenSupport: true });\n        if (typeof addr !== 'string')\n            throw (addr);\n        return addr;\n    }\n    /**\n     * Return the coupon for a Vault at specified amount\n     *\n     *\n     * @param amount - the threshold amount (sats) to redeem coupon\n     * @param time - block time of the vault lock\n     */\n    static getCoupon(amount, time, network = CashAddressNetworkPrefix.mainnet) {\n        return Coupon.getAddress(amount, this.getLockingBytecode(time), network);\n    }\n    /**\n     * Return the unlockingBytecode for a Vault\n     *\n     *\n     * @param time - block time of the vault lock\n     */\n    static getUnlockingBytecode(time) {\n        const locktimeVm = encodeDataPush(bigIntToVmNumber(BigInt(time)));\n        const lockingScript = hexToBin(this.lockingScript);\n        return new Uint8Array([\n            ...locktimeVm,\n            ...lockingScript\n        ]);\n    }\n    /**\n     * Return the lockingBytecode for a Vault\n     *\n     *\n     * @param time - block time of the vault lock\n     */\n    static getLockingBytecode(time) {\n        return new Uint8Array([\n            ...hexToBin(\"aa20\"),\n            ...hash256(this.getUnlockingBytecode(time)),\n            ...hexToBin(\"87\")\n        ]);\n    }\n    /**\n     * Return an array of staggered block times\n     *\n     *\n     * @param startTime - block time of the vault lock\n     * @param series - power of 10 to stagger the times\n     * @param limit - length of the array to return\n     */\n    static getSeriesTimes(startTime, series = 3, limit = 10) {\n        const step = Math.pow(10, series);\n        const next = startTime - (startTime % step) + step;\n        return Array.from({ length: limit }, (e, i) => next + (step * i));\n    }\n    /**\n     * Return an array of vaults in a series\n     *\n     *\n     * @param startTime - block time of the vault lock\n     * @param series - power of 10 to stagger the times\n     * @param limit - length of the array to return\n     * @param network - cashaddress network prefix\n     */\n    static getSeries(startTime, series, limit, network = CashAddressNetworkPrefix.mainnet) {\n        let seriesTimes = this.getSeriesTimes(startTime, series, limit);\n        return seriesTimes.map(time => { return this.getAddress(time, network); });\n    }\n    /**\n     * Return an array coupons for vaults in a series\n     *\n     *\n     * @param startTime - block time of the vault lock\n     * @param amount - coupon threshold amount\n     * @param series - power of 10 to stagger the times\n     * @param limit - length of the array to return\n     * @param network - cashaddress network prefix\n     */\n    static getCouponSeries(startTime, amount = 1e8, series, limit, network = CashAddressNetworkPrefix.mainnet) {\n        let seriesTimes = this.getSeriesTimes(startTime, series, limit);\n        return seriesTimes.map(time => {\n            return Coupon.getAddress(amount, this.getLockingBytecode(time), network);\n        });\n    }\n    /**\n    * Return an Unspent Transaction Output as an Input\n    *\n    *\n    * @param time - block time of the vault lock\n    * @param utxo - the unspent transaction output being spent.\n    */\n    static asInput(time, utxo) {\n        return {\n            outpointIndex: utxo.vout,\n            outpointTransactionHash: hexToBin(utxo.txid),\n            sequenceNumber: 0,\n            unlockingBytecode: this.getUnlockingBytecode(time),\n        };\n    }\n    /**\n    * Return an Unspent Transaction Output as an Output\n    *\n    *\n    * @param time - block time of the vault lock\n    * @param utxo - the unspent transaction output being spent.\n    * @param placement - the number of sats being placed *into* the vault.\n    */\n    static asOutput(time, utxo, placement) {\n        return {\n            lockingBytecode: this.getLockingBytecode(time),\n            valueSatoshis: BigInt(utxo.satoshis + placement),\n            token: {\n                amount: utxo.token?.amount - BigInt(placement),\n                category: hexToBin(utxo.token?.tokenId),\n                nft: undefined,\n            },\n        };\n    }\n}\n//# sourceMappingURL=vault.js.map"],"names":["Coupon","amount","lock","network","CashAddressNetworkPrefix","lockingBytecode","addr","lockingBytecodeToCashAddress","amountVm","encodeDataPush","bigIntToVmNumber","lockVm","lockingScript","hexToBin","hash256","utxo","Vault","time","locktimeVm","startTime","series","limit","step","next","e","i","placement"],"mappings":"0EACO,MAAMA,CAAO,CAChB,OACA,KACA,OAAO,cAAgB,+BASvB,OAAO,WAAWC,EAAQC,EAAMC,EAAUC,EAAyB,QAAS,CACxE,IAAIC,EAAkB,KAAK,mBAAmBJ,EAAQC,CAAI,EACtDI,EAAOC,EAA6BF,EAAiBF,EAAS,CAAE,aAAc,EAAI,CAAE,EACxF,GAAI,OAAOG,GAAS,SAChB,MAAOA,EACX,OAAOA,CACV,CAQD,OAAO,qBAAqBL,EAAQC,EAAM,CACtC,MAAMM,EAAWC,EAAeC,EAAiB,OAAOT,CAAM,CAAC,CAAC,EAC1DU,EAASF,EAAeP,CAAI,EAC5BU,EAAgBC,EAAS,KAAK,aAAa,EACjD,OAAO,IAAI,WAAW,CAClB,GAAGF,EACH,GAAGH,EACH,GAAGI,CACf,CAAS,CACJ,CAQD,OAAO,mBAAmBX,EAAQC,EAAM,CACpC,OAAO,IAAI,WAAW,CAClB,GAAGW,EAAS,MAAM,EAClB,GAAGC,EAAQ,KAAK,qBAAqBb,EAAQC,CAAI,CAAC,EAClD,GAAGW,EAAS,IAAI,CAC5B,CAAS,CACJ,CACD,OAAO,QAAQZ,EAAQC,EAAMa,EAAM,CAC/B,MAAO,CACH,cAAeA,EAAK,KACpB,wBAAyBF,EAASE,EAAK,IAAI,EAC3C,eAAgB,EAChB,kBAAmB,KAAK,qBAAqBd,EAAQC,CAAI,CACrE,CACK,CACL,CCzDO,MAAMc,CAAM,CACf,SACA,OAAO,cAAgB,mEAQvB,OAAO,WAAWC,EAAMd,EAAUC,EAAyB,QAAS,CAChE,IAAIC,EAAkB,KAAK,mBAAmBY,CAAI,EAC9CX,EAAOC,EAA6BF,EAAiBF,EAAS,CAAE,aAAc,EAAI,CAAE,EACxF,GAAI,OAAOG,GAAS,SAChB,MAAOA,EACX,OAAOA,CACV,CAQD,OAAO,UAAUL,EAAQgB,EAAMd,EAAUC,EAAyB,QAAS,CACvE,OAAOJ,EAAO,WAAWC,EAAQ,KAAK,mBAAmBgB,CAAI,EAAGd,CAAO,CAC1E,CAOD,OAAO,qBAAqBc,EAAM,CAC9B,MAAMC,EAAaT,EAAeC,EAAiB,OAAOO,CAAI,CAAC,CAAC,EAC1DL,EAAgBC,EAAS,KAAK,aAAa,EACjD,OAAO,IAAI,WAAW,CAClB,GAAGK,EACH,GAAGN,CACf,CAAS,CACJ,CAOD,OAAO,mBAAmBK,EAAM,CAC5B,OAAO,IAAI,WAAW,CAClB,GAAGJ,EAAS,MAAM,EAClB,GAAGC,EAAQ,KAAK,qBAAqBG,CAAI,CAAC,EAC1C,GAAGJ,EAAS,IAAI,CAC5B,CAAS,CACJ,CASD,OAAO,eAAeM,EAAWC,EAAS,EAAGC,EAAQ,GAAI,CACrD,MAAMC,EAAO,KAAK,IAAI,GAAIF,CAAM,EAC1BG,EAAOJ,EAAaA,EAAYG,EAAQA,EAC9C,OAAO,MAAM,KAAK,CAAE,OAAQD,CAAO,EAAE,CAACG,EAAGC,IAAMF,EAAQD,EAAOG,CAAE,CACnE,CAUD,OAAO,UAAUN,EAAWC,EAAQC,EAAOlB,EAAUC,EAAyB,QAAS,CAEnF,OADkB,KAAK,eAAee,EAAWC,EAAQC,CAAK,EAC3C,IAAIJ,GAAiB,KAAK,WAAWA,EAAMd,CAAO,CAAI,CAC5E,CAWD,OAAO,gBAAgBgB,EAAWlB,EAAS,IAAKmB,EAAQC,EAAOlB,EAAUC,EAAyB,QAAS,CAEvG,OADkB,KAAK,eAAee,EAAWC,EAAQC,CAAK,EAC3C,IAAIJ,GACZjB,EAAO,WAAWC,EAAQ,KAAK,mBAAmBgB,CAAI,EAAGd,CAAO,CAC1E,CACJ,CAQD,OAAO,QAAQc,EAAMF,EAAM,CACvB,MAAO,CACH,cAAeA,EAAK,KACpB,wBAAyBF,EAASE,EAAK,IAAI,EAC3C,eAAgB,EAChB,kBAAmB,KAAK,qBAAqBE,CAAI,CAC7D,CACK,CASD,OAAO,SAASA,EAAMF,EAAMW,EAAW,CACnC,MAAO,CACH,gBAAiB,KAAK,mBAAmBT,CAAI,EAC7C,cAAe,OAAOF,EAAK,SAAWW,CAAS,EAC/C,MAAO,CACH,OAAQX,EAAK,OAAO,OAAS,OAAOW,CAAS,EAC7C,SAAUb,EAASE,EAAK,OAAO,OAAO,EACtC,IAAK,MACR,CACb,CACK,CACL"}