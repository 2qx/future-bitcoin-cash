{"version":3,"file":"vault.3LlmDtan.js","sources":["../../../../../../../../node_modules/.pnpm/svelte@4.2.18/node_modules/svelte/src/runtime/internal/each.js","../../../../../../../../node_modules/.pnpm/@macfja+svelte-persistent-store@2.4.1_svelte@4.2.18/node_modules/@macfja/svelte-persistent-store/dist/index.mjs","../../../../../../src/lib/store.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/format/base64.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/format/hex.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/format/error.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/format/number.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/format/read.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/bin/hashes.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/bin/ripemd160/ripemd160.base64.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/bin/secp256k1/secp256k1-wasm-types.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/bin/secp256k1/secp256k1.base64.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/bin/secp256k1/secp256k1-wasm.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/bin/sha1/sha1.base64.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/bin/sha256/sha256.base64.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/bin/sha512/sha512.base64.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/crypto/ripemd160.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/crypto/secp256k1.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/crypto/sha1.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/crypto/sha256.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/crypto/sha512.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/crypto/default-crypto-instances.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/crypto/combinations.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/address/bech32.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/address/cash-address.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/address/locking-bytecode.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/message/read-components.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/message/transaction-types.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/message/transaction-encoding.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/vm/instruction-sets/common/signing-serialization.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/vm/instruction-sets/common/consensus.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/vm/instruction-sets/common/errors.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/vm/instruction-sets/bch/2023/bch-2023-opcodes.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/vm/instruction-sets/common/instruction-sets-utils.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/vm/instruction-sets/common/combinators.js","../../../../../../../../node_modules/.pnpm/@bitauth+libauth@2.1.0/node_modules/@bitauth/libauth/build/lib/vm/instruction-sets/common/push.js","../../../../../../../lib/dist/main/util.js","../../../../../../../lib/dist/main/coupon.js","../../../../../../../lib/dist/main/vault.js"],"sourcesContent":["import { transition_in, transition_out } from './transitions.js';\nimport { run_all } from './utils.js';\n\n// general each functions:\n\nexport function ensure_array_like(array_like_or_iterator) {\n\treturn array_like_or_iterator?.length !== undefined\n\t\t? array_like_or_iterator\n\t\t: Array.from(array_like_or_iterator);\n}\n\n// keyed each functions:\n\n/** @returns {void} */\nexport function destroy_block(block, lookup) {\n\tblock.d(1);\n\tlookup.delete(block.key);\n}\n\n/** @returns {void} */\nexport function outro_and_destroy_block(block, lookup) {\n\ttransition_out(block, 1, 1, () => {\n\t\tlookup.delete(block.key);\n\t});\n}\n\n/** @returns {void} */\nexport function fix_and_destroy_block(block, lookup) {\n\tblock.f();\n\tdestroy_block(block, lookup);\n}\n\n/** @returns {void} */\nexport function fix_and_outro_and_destroy_block(block, lookup) {\n\tblock.f();\n\toutro_and_destroy_block(block, lookup);\n}\n\n/** @returns {any[]} */\nexport function update_keyed_each(\n\told_blocks,\n\tdirty,\n\tget_key,\n\tdynamic,\n\tctx,\n\tlist,\n\tlookup,\n\tnode,\n\tdestroy,\n\tcreate_each_block,\n\tnext,\n\tget_context\n) {\n\tlet o = old_blocks.length;\n\tlet n = list.length;\n\tlet i = o;\n\tconst old_indexes = {};\n\twhile (i--) old_indexes[old_blocks[i].key] = i;\n\tconst new_blocks = [];\n\tconst new_lookup = new Map();\n\tconst deltas = new Map();\n\tconst updates = [];\n\ti = n;\n\twhile (i--) {\n\t\tconst child_ctx = get_context(ctx, list, i);\n\t\tconst key = get_key(child_ctx);\n\t\tlet block = lookup.get(key);\n\t\tif (!block) {\n\t\t\tblock = create_each_block(key, child_ctx);\n\t\t\tblock.c();\n\t\t} else if (dynamic) {\n\t\t\t// defer updates until all the DOM shuffling is done\n\t\t\tupdates.push(() => block.p(child_ctx, dirty));\n\t\t}\n\t\tnew_lookup.set(key, (new_blocks[i] = block));\n\t\tif (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));\n\t}\n\tconst will_move = new Set();\n\tconst did_move = new Set();\n\t/** @returns {void} */\n\tfunction insert(block) {\n\t\ttransition_in(block, 1);\n\t\tblock.m(node, next);\n\t\tlookup.set(block.key, block);\n\t\tnext = block.first;\n\t\tn--;\n\t}\n\twhile (o && n) {\n\t\tconst new_block = new_blocks[n - 1];\n\t\tconst old_block = old_blocks[o - 1];\n\t\tconst new_key = new_block.key;\n\t\tconst old_key = old_block.key;\n\t\tif (new_block === old_block) {\n\t\t\t// do nothing\n\t\t\tnext = new_block.first;\n\t\t\to--;\n\t\t\tn--;\n\t\t} else if (!new_lookup.has(old_key)) {\n\t\t\t// remove old block\n\t\t\tdestroy(old_block, lookup);\n\t\t\to--;\n\t\t} else if (!lookup.has(new_key) || will_move.has(new_key)) {\n\t\t\tinsert(new_block);\n\t\t} else if (did_move.has(old_key)) {\n\t\t\to--;\n\t\t} else if (deltas.get(new_key) > deltas.get(old_key)) {\n\t\t\tdid_move.add(new_key);\n\t\t\tinsert(new_block);\n\t\t} else {\n\t\t\twill_move.add(old_key);\n\t\t\to--;\n\t\t}\n\t}\n\twhile (o--) {\n\t\tconst old_block = old_blocks[o];\n\t\tif (!new_lookup.has(old_block.key)) destroy(old_block, lookup);\n\t}\n\twhile (n) insert(new_blocks[n - 1]);\n\trun_all(updates);\n\treturn new_blocks;\n}\n\n/** @returns {void} */\nexport function validate_each_keys(ctx, list, get_context, get_key) {\n\tconst keys = new Map();\n\tfor (let i = 0; i < list.length; i++) {\n\t\tconst key = get_key(get_context(ctx, list, i));\n\t\tif (keys.has(key)) {\n\t\t\tlet value = '';\n\t\t\ttry {\n\t\t\t\tvalue = `with value '${String(key)}' `;\n\t\t\t} catch (e) {\n\t\t\t\t// can't stringify\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(\n\t\t\t\t\tkey\n\t\t\t\t)} and ${i} ${value}are duplicates`\n\t\t\t);\n\t\t}\n\t\tkeys.set(key, i);\n\t}\n}\n","var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)},t=function(){return t=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},t.apply(this,arguments)};function n(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}var r=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return function(t,n){if(\"function\"!=typeof n&&null!==n)throw new TypeError(\"Class extends value \"+String(n)+\" is not a constructor or null\");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}(n,t),n}(Error),o={},i=new Set,c={};function a(e,n){if(\"string\"==typeof e||\"number\"==typeof e&&!isNaN(e)&&Math.abs(e)!==1/0||null==e||\"boolean\"==typeof e)return e;var r=n.indexOf(e);if(-1!==r)return\"#$@__instance__\"+r;n.push(e);var o=n.length-1;if(e.constructor===Array){var s=e.map((function(e){return a(e,n)}));return s.unshift(\"#$@__reference__\"+o),s}if(e.constructor===Object){var u=Object.fromEntries(Object.entries(e).map((function(e){return[e[0],a(e[1],n)]})));return u[\"#$@__reference__\"]=o,u}i.add(e.constructor);var l={};l=Object.defineProperty(l,\"#$@__constructor__\",{value:e.constructor.name,enumerable:!0}),l=Object.defineProperty(l,\"#$@__reference__\",{value:o,enumerable:!0});var f=function(e,t){if(Object.keys(c).includes(e.constructor.name))return c[e.constructor.name].toPlain(e,(function(e){return a(e,t)}))}(e,n);return void 0!==f?t(t({},f),l):(Object.getOwnPropertyNames(e).forEach((function(t){Object.defineProperty(l,t,{value:a(e[t],n),enumerable:!0})})),l)}function s(e,t,n){var o;if(\"string\"==typeof e&&0===e.indexOf(\"#$@__instance__\"))return n[l=parseInt(e.slice(15))];if(\"string\"==typeof e||\"number\"==typeof e||null==e||\"boolean\"==typeof e)return e;if(e.constructor===Array){if(0===e.length)return[];var i=e.shift();if(\"string\"!=typeof i||\"#$@__reference__\"!==i.substring(0,16)){if(0===Object.keys(n).length)return e.unshift(i),e;throw new r}var a=[];n[l=i.slice(16)]=a;for(var u=0;u<e.length;u++)a[u]=s(e[u],t,n);return a}if(e.constructor===Object){var l;if(null===(l=null!==(o=e[\"#$@__reference__\"])&&void 0!==o?o:null)){if(0===Object.keys(n).length)return e;throw new r}if(delete e[\"#$@__reference__\"],!Object.keys(e).includes(\"#$@__constructor__\")){for(var f in a={},n[l]=a,e)a[f]=s(e[f],t,n);return a}var h=e[\"#$@__constructor__\"];delete e[\"#$@__constructor__\"];var d=function(e,t,n,r){if(Object.keys(c).includes(t))return c[t].fromPlain(e,(function(e){return s(e,n,r)}))}(e,h,t,n);if(void 0!==d)return d;if(!Object.keys(t).includes(h))throw new Error(\"The class \"+h+\" is not allowed\");var p={};for(var f in n[l]=p,e)p[f]=s(e[f],t,n);return Object.setPrototypeOf(p,t[h].prototype),p}}function u(e){o[e.name]=e}function l(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}!function(e,t){e(\"Date\",(e=>({time:e.getTime()})),(function(e){let t=new Date;return t.setTime(e.time),t})),e(\"BigInt\",(e=>({number:e.toString()})),(e=>BigInt(e.number))),e(\"String\",(e=>({text:e.toString()})),(e=>new String(e.text))),e(\"RegExp\",(e=>({source:e.source,flags:e.flags})),(e=>new RegExp(e.source,e.flags))),e(\"Number\",(function(e){let t={nan:!1,infinity:!1,positive:!0,number:null};return Math.abs(e)===1/0?(t.infinity=!0,t.positive=Math.abs(e)===e,t):isNaN(e)?(t.nan=!0,t):(t.number=e.valueOf(),t)}),(function(e){return e.nan?NaN:e.infinity?1/0*(e.positive?1:-1):new Number(e.number)})),e(\"Map\",((e,t)=>({data:Array.from(e.entries()).map((e=>t(e)))})),(function(e,t){const n=new Map;return e.data.map((e=>t(e))).forEach((([e,t])=>n.set(e,t))),n})),e(\"Set\",((e,t)=>({data:Array.from(e.values()).map((e=>t(e)))})),(function(e,t){const n=new Set;return e.data.map((e=>t(e))).forEach((e=>n.add(e))),n})),e(\"ArrayBuffer\",((e,t)=>({data:t(new Uint8Array(e))})),((e,t)=>t(e.data).buffer)),e(\"DataView\",((e,t)=>({buffer:t(e.buffer),offset:e.byteOffset,length:e.byteLength})),((e,t)=>new DataView(t(e.buffer),e.offset,e.length))),[Error,EvalError,RangeError,AggregateError,ReferenceError,SyntaxError,TypeError,URIError,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array].forEach((e=>t(e)))}((function(e,t,n){c[e]={toPlain:t,fromPlain:n}}),u);var f,h={};function d(e){return new Promise(((t,n)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>n(e.error)}))}function p(e,t){const n=indexedDB.open(e);n.onupgradeneeded=()=>n.result.createObjectStore(t);const r=d(n);return(e,n)=>r.then((r=>n(r.transaction(t,e).objectStore(t))))}let g;function y(){return g||(g=p(\"keyval-store\",\"keyval\")),g}function m(e){let t,n=e[0],r=1;for(;r<e.length;){const o=e[r],i=e[r+1];if(r+=2,(\"optionalAccess\"===o||\"optionalCall\"===o)&&null==n)return;\"access\"===o||\"optionalAccess\"===o?(t=n,n=i(n)):\"call\"!==o&&\"optionalCall\"!==o||(n=i(((...e)=>n.call(t,...e))),t=void 0)}return n}function b(){v=!0}(f=h).defaults={},f.set=function(e,t,n){var r=n||{},o=f.defaults,i=r.expires||o.expires,c=r.domain||o.domain,a=void 0!==r.path?r.path:void 0!==o.path?o.path:\"/\",s=void 0!==r.secure?r.secure:o.secure,u=void 0!==r.httponly?r.httponly:o.httponly,l=void 0!==r.samesite?r.samesite:o.samesite,h=i?new Date(\"number\"==typeof i?(new Date).getTime()+864e5*i:i):0;document.cookie=e.replace(/[^+#$&^`|]/g,encodeURIComponent).replace(\"(\",\"%28\").replace(\")\",\"%29\")+\"=\"+t.replace(/[^+#$&/:<-\\[\\]-}]/g,encodeURIComponent)+(h&&h.getTime()>=0?\";expires=\"+h.toUTCString():\"\")+(c?\";domain=\"+c:\"\")+(a?\";path=\"+a:\"\")+(s?\";secure\":\"\")+(u?\";httponly\":\"\")+(l?\";samesite=\"+l:\"\")},f.get=function(e){for(var t=document.cookie.split(\";\");t.length;){var n=t.pop(),r=n.indexOf(\"=\");if(r=r<0?n.length:r,decodeURIComponent(n.slice(0,r).replace(/^\\s+/,\"\"))===e)return decodeURIComponent(n.slice(r+1))}return null},f.erase=function(e,t){f.set(e,\"\",{expires:-1,domain:t&&t.domain,path:t&&t.path,secure:0,httponly:0})},f.all=function(){for(var e={},t=document.cookie.split(\";\");t.length;){var n=t.pop(),r=n.indexOf(\"=\");r=r<0?n.length:r,e[decodeURIComponent(n.slice(0,r).replace(/^\\s+/,\"\"))]=decodeURIComponent(n.slice(r+1))}return e};let v=!1;const _=[],w=e=>{(e=>{const t=\"undefined\"!=typeof process&&\"production\"===m([process,\"access\",e=>e.env,\"optionalAccess\",e=>e.NODE_ENV]);v||_.includes(e)||t||(\"undefined\"==typeof window&&(e+=\"\\nAre you running on a server? Most of storages are not available while running on a server.\"),console.warn(e),_.push(e))})(`Unable to find the ${e}. No data will be persisted.`)};function O(e){L(e)}let A=function(e){return void 0===e?\"undefined\":JSON.stringify(a(e,[]))},S=function(e,t){if(void 0===t&&(t=void 0),\"string\"!=typeof e)return e;if(void 0===t&&(t={}),\"undefined\"!==e){t=Object.fromEntries(n(n([],Object.entries(t),!0),Object.entries(o),!0));try{return s(JSON.parse(e),t,{})}catch(t){return e}}},L=u;function E(e,t,n){var r,o;A=e,S=t,o=()=>()=>{},L=null!=(r=n)?r:o()}function j(e,t,n){const r=t.getValue(n);return null!==r&&e.set(r),t.addListener&&t.addListener(n,(t=>{e.set(t)})),e.subscribe((e=>{t.setValue(n,e)})),{...e,delete(){t.deleteValue(n)}}}function x(){}function N(e=x,t=x){const n=[];return{callListeners(e,t){void 0!==t&&n.filter((({key:t})=>t===e)).forEach((({listener:e})=>e(t)))},addListener(t,r){n.push({key:t,listener:r}),1===n.length&&e()},removeListener(e,r){const o=n.indexOf({key:e,listener:r});-1!==o&&n.splice(o,1),0===n.length&&t()}}}function C(e,t=!1){const n=t=>{const n=t.key;t.storageArea===e&&o(n,S(t.newValue))},{removeListener:r,callListeners:o,addListener:i}=N((()=>{t&&\"undefined\"!=typeof window&&m([window,\"optionalAccess\",e=>e.addEventListener])&&window.addEventListener(\"storage\",n)}),(()=>{t&&\"undefined\"!=typeof window&&m([window,\"optionalAccess\",e=>e.removeEventListener])&&window.removeEventListener(\"storage\",n)}));return{addListener:i,removeListener:r,getValue(t){const n=e.getItem(t);return S(n)},deleteValue(t){e.removeItem(t)},setValue(t,n){e.setItem(t,A(n))}}}function k(e){try{return\"object\"==typeof window[e]}catch(e){return!1}}function I(e=!1){return k(\"localStorage\")?C(window.localStorage,e):(w(\"window.localStorage\"),U())}function V(e=!1){return k(\"sessionStorage\")?C(window.sessionStorage,e):(w(\"window.sessionStorage\"),U())}function R(e){return\"undefined\"==typeof document||\"string\"!=typeof m([document,\"optionalAccess\",e=>e.cookie])?(w(\"document.cookies\"),U()):{getValue(e){const t=h.get(e);return S(t)},deleteValue(t){h.erase(t,{samesite:\"Strict\",...e})},setValue(t,n){h.set(t,A(n),{samesite:\"Strict\",...e})}}}function P(){if(\"object\"!=typeof indexedDB||!k(\"indexedDB\"))return w(\"IndexedDB\"),T();const{removeListener:e,callListeners:t,addListener:n}=N(),r=p(\"svelte-persist\",\"persist\");return{addListener:n,removeListener:e,getValue:e=>(function(e,t=y()){return t(\"readonly\",(t=>d(t.get(e))))}(e,r).then((n=>t(e,S(n)))),null),setValue(e,t){!function(e,t,n=y()){n(\"readwrite\",(n=>(n.put(t,e),d(n.transaction))))}(e,A(t),r)},deleteValue(e){!function(e,t=y()){t(\"readwrite\",(t=>(t.delete(e),d(t.transaction))))}(e,r)}}}var M;function B(e=M.LOCAL,t=!1){if(\"object\"!=typeof chrome||\"object\"!=typeof chrome.storage)return w(\"ChromeStorage\"),T();let n=\"local\";switch(e){case M.LOCAL:n=\"local\";break;case M.SYNC:n=\"sync\";break;case M.SESSION:n=\"session\"}function r(e,t){if(t===n)for(const[t,{newValue:n}]of Object.entries(e))i(t,n)}const{removeListener:o,callListeners:i,addListener:c}=N((()=>{t&&chrome.storage.onChanged.addListener(r)}),(()=>{t&&chrome.storage.onChanged.removeListener(r)}));return{addListener:c,removeListener:o,getValue:e=>(chrome.storage[n].get([e],(t=>i(e,t.key))),null),setValue(e,t){chrome.storage[n].set({[e]:t})},deleteValue(e){chrome.storage[n].remove(e)}}}function U(){return{getValue:()=>null,deleteValue(){},setValue(){}}}function T(){return{...U(),addListener(){},removeListener(){}}}function $(){}!function(e){e[e.LOCAL=0]=\"LOCAL\";e[e.SESSION=1]=\"SESSION\";e[e.SYNC=2]=\"SYNC\"}(M||(M={}));const D=[];function Y(e,t=$){let n;const r=new Set;function o(t){if(function(e,t){return e!=e?t==t:e!==t||e&&\"object\"==typeof e||\"function\"==typeof e}(e,t)&&(e=t,n)){const t=!D.length;for(const t of r)t[1](),D.push(t,e);if(t){for(let e=0;e<D.length;e+=2)D[e][0](D[e+1]);D.length=0}}}function i(t){o(t(e))}return{set:o,update:i,subscribe:function(c,a=$){const s=[c,a];return r.add(s),1===r.size&&(n=t(o,i)||$),c(e),()=>{r.delete(s),0===r.size&&n&&(n(),n=null)}}}}const z={};function G(e){if(!Object.keys(z).includes(e))switch(e){case\"cookie\":z[e]=R();break;case\"local\":z[e]=I();break;case\"session\":z[e]=V()}return z[e]}function q(e,t){return j(e,G(\"cookie\"),t)}function F(e,t){return j(e,G(\"session\"),t)}function J(e,t){return j(e,G(\"local\"),t)}function X(e,t,n){return J(Y(t,n),e)}function H(e,t,n){return X(e,t,n)}function K(e,t,n){return F(Y(t,n),e)}function Q(e,t,n){return q(Y(t,n),e)}var W,Z=function(e){return Math.round(e/1099511627776)||32},ee=function(e){var t,n=e.length;return 0===n?0:(t=e[n-1],32*(n-1)+Z(t))},te=function(e){var t,n=\"\",r=e.length;for(t=0;t<r;t++)n+=(0xf00000000000+(0|e[t])).toString(16).substr(4);return n.substr(0,ee(e)/4)},ne=l(te),re=function(e,t,n){return 32===e?t:(n?0|t:t<<32-e)+1099511627776*e},oe=function(e,t){if(32*e.length<t)return e;var n=(e=e.slice(0,Math.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=re(t,e[n-1]&2147483648>>t-1,1)),e},ie=function(e){var t,n,r,o=[];for(r=(e=e.replace(/\\s|0x/g,\"\")).length,n=(e+=\"00000000\").length,t=0;t<n;t+=8)o.push(0^parseInt(e.substr(t,8),16));return oe(o,4*r)},ce=l(ie),ae={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(e){this.toString=function(){return\"CORRUPT: \"+this.message},this.message=e},invalid:function(e){this.toString=function(){return\"INVALID: \"+this.message},this.message=e},bug:function(e){this.toString=function(){return\"BUG: \"+this.message},this.message=e},notReady:function(e){this.toString=function(){return\"NOT READY: \"+this.message},this.message=e}}};function se(e){}ae.cipher.aes=function(e){this._tables[0][0][0]||this._precompute();var t,n,r,o,i,c=this._tables[0][4],a=this._tables[1],s=e.length,u=1;if(4!==s&&6!==s&&8!==s)throw new ae.exception.invalid(\"invalid aes key size\");for(this._key=[o=e.slice(0),i=[]],t=s;t<4*s+28;t++)r=o[t-1],(t%s==0||8===s&&t%s==4)&&(r=c[r>>>24]<<24^c[r>>16&255]<<16^c[r>>8&255]<<8^c[255&r],t%s==0&&(r=r<<8^r>>>24^u<<24,u=u<<1^283*(u>>7))),o[t]=o[t-s]^r;for(n=0;t;n++,t--)r=o[3&n?t:t-4],i[n]=t<=4||n<4?r:a[0][c[r>>>24]]^a[1][c[r>>16&255]]^a[2][c[r>>8&255]]^a[3][c[255&r]]},ae.cipher.aes.prototype={encrypt:function(e){return this._crypt(e,0)},decrypt:function(e){return this._crypt(e,1)},_tables:[[[],[],[],[],[]],[[],[],[],[],[]]],_precompute:function(){var e,t,n,r,o,i,c,a,s=this._tables[0],u=this._tables[1],l=s[4],f=u[4],h=[],d=[];for(e=0;e<256;e++)d[(h[e]=e<<1^283*(e>>7))^e]=e;for(t=n=0;!l[t];t^=r||1,n=d[n]||1)for(i=(i=n^n<<1^n<<2^n<<3^n<<4)>>8^255&i^99,l[t]=i,f[i]=t,a=16843009*h[o=h[r=h[t]]]^65537*o^257*r^16843008*t,c=257*h[i]^16843008*i,e=0;e<4;e++)s[e][t]=c=c<<24^c>>>8,u[e][i]=a=a<<24^a>>>8;for(e=0;e<5;e++)s[e]=s[e].slice(0),u[e]=u[e].slice(0)},_crypt:function(e,t){if(4!==e.length)throw new ae.exception.invalid(\"invalid aes block size\");var n,r,o,i,c=this._key[t],a=e[0]^c[0],s=e[t?3:1]^c[1],u=e[2]^c[2],l=e[t?1:3]^c[3],f=c.length/4-2,h=4,d=[0,0,0,0],p=this._tables[t],g=p[0],y=p[1],m=p[2],b=p[3],v=p[4];for(i=0;i<f;i++)n=g[a>>>24]^y[s>>16&255]^m[u>>8&255]^b[255&l]^c[h],r=g[s>>>24]^y[u>>16&255]^m[l>>8&255]^b[255&a]^c[h+1],o=g[u>>>24]^y[l>>16&255]^m[a>>8&255]^b[255&s]^c[h+2],l=g[l>>>24]^y[a>>16&255]^m[s>>8&255]^b[255&u]^c[h+3],h+=4,a=n,s=r,u=o;for(i=0;i<4;i++)d[t?3&-i:i]=v[a>>>24]<<24^v[s>>16&255]<<16^v[u>>8&255]<<8^v[255&l]^c[h++],n=a,a=s,s=u,u=l,l=n;return d}},ae.bitArray={bitSlice:function(e,t,n){return e=ae.bitArray._shiftRight(e.slice(t/32),32-(31&t)).slice(1),void 0===n?e:ae.bitArray.clamp(e,n-t)},extract:function(e,t,n){var r=Math.floor(-t-n&31);return(-32&(t+n-1^t)?e[t/32|0]<<32-r^e[t/32+1|0]>>>r:e[t/32|0]>>>r)&(1<<n)-1},concat:function(e,t){if(0===e.length||0===t.length)return e.concat(t);var n=e[e.length-1],r=ae.bitArray.getPartial(n);return 32===r?e.concat(t):ae.bitArray._shiftRight(t,r,0|n,e.slice(0,e.length-1))},bitLength:function(e){var t,n=e.length;return 0===n?0:(t=e[n-1],32*(n-1)+ae.bitArray.getPartial(t))},clamp:function(e,t){if(32*e.length<t)return e;var n=(e=e.slice(0,Math.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=ae.bitArray.partial(t,e[n-1]&2147483648>>t-1,1)),e},partial:function(e,t,n){return 32===e?t:(n?0|t:t<<32-e)+1099511627776*e},getPartial:function(e){return Math.round(e/1099511627776)||32},equal:function(e,t){if(ae.bitArray.bitLength(e)!==ae.bitArray.bitLength(t))return!1;var n,r=0;for(n=0;n<e.length;n++)r|=e[n]^t[n];return 0===r},_shiftRight:function(e,t,n,r){var o,i,c;for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(o=0;o<e.length;o++)r.push(n|e[o]>>>t),n=e[o]<<32-t;return i=e.length?e[e.length-1]:0,c=ae.bitArray.getPartial(i),r.push(ae.bitArray.partial(t+c&31,t+c>32?n:r.pop(),1)),r},_xor4:function(e,t){return[e[0]^t[0],e[1]^t[1],e[2]^t[2],e[3]^t[3]]},byteswapM:function(e){var t,n;for(t=0;t<e.length;++t)n=e[t],e[t]=n>>>24|n>>>8&65280|(65280&n)<<8|n<<24;return e}},ae.codec.utf8String={fromBits:function(e){var t,n,r=\"\",o=ae.bitArray.bitLength(e);for(t=0;t<o/8;t++)0==(3&t)&&(n=e[t/4]),r+=String.fromCharCode(n>>>8>>>8>>>8),n<<=8;return decodeURIComponent(escape(r))},toBits:function(e){e=unescape(encodeURIComponent(e));var t,n=[],r=0;for(t=0;t<e.length;t++)r=r<<8|e.charCodeAt(t),3==(3&t)&&(n.push(r),r=0);return 3&t&&n.push(ae.bitArray.partial(8*(3&t),r)),n}},ae.codec.base64={_chars:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",fromBits:function(e,t,n){var r,o=\"\",i=0,c=ae.codec.base64._chars,a=0,s=ae.bitArray.bitLength(e);for(n&&(c=c.substr(0,62)+\"-_\"),r=0;6*o.length<s;)o+=c.charAt((a^e[r]>>>i)>>>26),i<6?(a=e[r]<<6-i,i+=26,r++):(a<<=6,i-=6);for(;3&o.length&&!t;)o+=\"=\";return o},toBits:function(e,t){e=e.replace(/\\s|=/g,\"\");var n,r,o=[],i=0,c=ae.codec.base64._chars,a=0;for(t&&(c=c.substr(0,62)+\"-_\"),n=0;n<e.length;n++){if((r=c.indexOf(e.charAt(n)))<0)throw new ae.exception.invalid(\"this isn't base64!\");i>26?(i-=26,o.push(a^r>>>i),a=r<<32-i):a^=r<<32-(i+=6)}return 56&i&&o.push(ae.bitArray.partial(56&i,a,1)),o}},ae.codec.base64url={fromBits:function(e){return ae.codec.base64.fromBits(e,1,1)},toBits:function(e){return ae.codec.base64.toBits(e,1)}},ae.mode.gcm={name:\"gcm\",encrypt:function(e,t,n,r,o){var i,c=t.slice(0),a=ae.bitArray;return o=o||128,r=r||[],i=ae.mode.gcm._ctrMode(!0,e,c,r,n,o),a.concat(i.data,i.tag)},decrypt:function(e,t,n,r,o){var i,c,a=t.slice(0),s=ae.bitArray,u=s.bitLength(a);if(r=r||[],(o=o||128)<=u?(c=s.bitSlice(a,u-o),a=s.bitSlice(a,0,u-o)):(c=a,a=[]),i=ae.mode.gcm._ctrMode(!1,e,a,r,n,o),!s.equal(i.tag,c))throw new ae.exception.corrupt(\"gcm: tag doesn't match\");return i.data},_galoisMultiply:function(e,t){var n,r,o,i,c,a=ae.bitArray._xor4;for(o=[0,0,0,0],i=t.slice(0),n=0;n<128;n++){for(0!=(e[Math.floor(n/32)]&1<<31-n%32)&&(o=a(o,i)),c=0!=(1&i[3]),r=3;r>0;r--)i[r]=i[r]>>>1|(1&i[r-1])<<31;i[0]=i[0]>>>1,c&&(i[0]=i[0]^225<<24)}return o},_ghash:function(e,t,n){var r,o,i=n.length;for(r=t.slice(0),o=0;o<i;o+=4)r[0]^=4294967295&n[o],r[1]^=4294967295&n[o+1],r[2]^=4294967295&n[o+2],r[3]^=4294967295&n[o+3],r=ae.mode.gcm._galoisMultiply(r,e);return r},_ctrMode:function(e,t,n,r,o,i){var c,a,s,u,l,f,h,d,p,g,y,m,b=ae.bitArray;for(p=n.length,g=b.bitLength(n),y=b.bitLength(r),m=b.bitLength(o),c=t.encrypt([0,0,0,0]),96===m?(a=o.slice(0),a=b.concat(a,[1])):(a=ae.mode.gcm._ghash(c,[0,0,0,0],o),a=ae.mode.gcm._ghash(c,a,[0,0,Math.floor(m/4294967296),4294967295&m])),s=ae.mode.gcm._ghash(c,[0,0,0,0],r),f=a.slice(0),h=s.slice(0),e||(h=ae.mode.gcm._ghash(c,s,n)),l=0;l<p;l+=4)f[3]++,u=t.encrypt(f),n[l]^=u[0],n[l+1]^=u[1],n[l+2]^=u[2],n[l+3]^=u[3];return n=b.clamp(n,g),e&&(h=ae.mode.gcm._ghash(c,s,n)),d=[Math.floor(y/4294967296),4294967295&y,Math.floor(g/4294967296),4294967295&g],h=ae.mode.gcm._ghash(c,h,d),u=t.encrypt(a),h[0]^=u[0],h[1]^=u[1],h[2]^=u[2],h[3]^=u[3],{tag:b.bitSlice(h,0,i),data:n}}},function(e){e[e.EXCEPTION=0]=\"EXCEPTION\";e[e.NO_ENCRYPTION=1]=\"NO_ENCRYPTION\";e[e.NO_STORAGE=2]=\"NO_STORAGE\"}(W||(W={}));class ue{constructor(e){this.cipher=new ae.cipher.aes(ce(e))}encrypt(e,t){t||(t=\"sps\");const n=ae.codec.utf8String.toBits(t);return ne(ae.mode.gcm.encrypt(this.cipher,ae.codec.utf8String.toBits(e),n,[],256))+\":\"+ne(n)}decrypt(e){return ae.codec.utf8String.fromBits(ae.mode.gcm.decrypt(this.cipher,ce(e.split(\":\")[0]),ce(e.split(\":\")[1])))}hash(e){return this.encrypt(e,\"sps\")}}function le(e,t){return fe(e,new ue(t))}function fe(e,t){return{getValue(n){const r=t.hash(n),o=e.getValue(r);return null===o?null:S(t.decrypt(o))},setValue(n,r){const o=t.hash(n),i=t.encrypt(A(r));e.setValue(o,i)},deleteValue(n){const r=t.hash(n);e.deleteValue(r)}}}export{ue as GCMEncryption,O as addSerializableClass,Q as cookieWritable,B as createChromeStorage,R as createCookieStorage,le as createEncryptedStorage,fe as createEncryptionStorage,P as createIndexedDBStorage,I as createLocalStorage,U as createNoopStorage,V as createSessionStorage,b as disableWarnings,X as localWritable,se as noEncryptionBehavior,j as persist,J as persistBrowserLocal,F as persistBrowserSession,q as persistCookie,K as sessionWritable,E as setSerialization,H as writable};\n","import { persist, createLocalStorage } from '@macfja/svelte-persistent-store';\nimport { writable } from 'svelte/store';\n\nexport let height = persist(writable(''), createLocalStorage(true), 'height');\nexport let receiptAddress = persist(writable(''), createLocalStorage(true), 'receiptAddress');\nexport let walletDbString = persist(writable(''), createLocalStorage(true), 'walletDbString');\n","// base64 encode/decode derived from: https://github.com/niklasvh/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst base64GroupLength = 4;\nconst nonBase64Chars = new RegExp(`[^${chars}=]`, 'u');\n/**\n * For use before {@link base64ToBin}. Returns true if the provided string is\n * valid base64 (length is divisible by 4, only uses base64 characters).\n * @param maybeBase64 - a string to test\n */\nexport const isBase64 = (maybeBase64) => maybeBase64.length % base64GroupLength === 0 &&\n    !nonBase64Chars.test(maybeBase64);\n/* eslint-disable functional/no-expression-statements, functional/immutable-data, @typescript-eslint/no-magic-numbers, no-bitwise, no-plusplus, @typescript-eslint/no-non-null-assertion */\n/**\n * Convert a base64-encoded string to a Uint8Array.\n *\n * Note, this method always completes. If `validBase64` is not valid base64, an\n * incorrect result will be returned. If `validBase64` is potentially malformed,\n * check it with {@link isBase64} before calling this method.\n *\n * @param validBase64 - a valid base64-encoded string to decode\n */\nexport const base64ToBin = (validBase64) => {\n    const lookup = new Uint8Array(123);\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements\n    for (let i = 0; i < chars.length; i++) {\n        lookup[chars.charCodeAt(i)] = i;\n    }\n    const bufferLengthEstimate = validBase64.length * 0.75;\n    const stringLength = validBase64.length;\n    const bufferLength = validBase64[validBase64.length - 1] === '=' // eslint-disable-line @typescript-eslint/prefer-string-starts-ends-with\n        ? validBase64[validBase64.length - 2] === '='\n            ? bufferLengthEstimate - 2\n            : bufferLengthEstimate - 1\n        : bufferLengthEstimate;\n    const buffer = new ArrayBuffer(bufferLength);\n    const bytes = new Uint8Array(buffer);\n    // eslint-disable-next-line functional/no-let\n    let p = 0;\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements\n    for (let i = 0; i < stringLength; i += 4) {\n        const encoded1 = lookup[validBase64.charCodeAt(i)];\n        const encoded2 = lookup[validBase64.charCodeAt(i + 1)];\n        const encoded3 = lookup[validBase64.charCodeAt(i + 2)];\n        const encoded4 = lookup[validBase64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return bytes;\n};\n/**\n * Convert a Uint8Array to a base64-encoded string.\n * @param bytes - the Uint8Array to base64 encode\n */\nexport const binToBase64 = (bytes) => {\n    // eslint-disable-next-line functional/no-let\n    let result = '';\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements\n    for (let i = 0; i < bytes.length; i += 3) {\n        result += chars[bytes[i] >> 2];\n        result += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        result += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        result += chars[bytes[i + 2] & 63];\n    }\n    const padded = bytes.length % 3 === 2\n        ? `${result.substring(0, result.length - 1)}=`\n        : bytes.length % 3 === 1\n            ? `${result.substring(0, result.length - 2)}==`\n            : result;\n    return padded;\n};\n/* eslint-enable functional/no-expression-statements, functional/immutable-data, @typescript-eslint/no-magic-numbers, no-bitwise, no-plusplus, @typescript-eslint/no-non-null-assertion */\n//# sourceMappingURL=base64.js.map","/**\n * Returns an array of incrementing values starting at `begin` and incrementing\n * by one for `length`.\n *\n * E.g.: `range(3)` → `[0, 1, 2]` and `range(3, 1)` → `[1, 2, 3]`\n *\n * @param length - the number of elements in the array\n * @param begin - the index at which the range starts (default: `0`)\n */\nexport const range = (length, begin = 0) => Array.from({ length }, (_, index) => begin + index);\n/**\n * Split a string into an array of `chunkLength` strings. The final string may\n * have a length between 1 and `chunkLength`.\n *\n * E.g.: `splitEvery('abcde', 2)` → `['ab', 'cd', 'e']`\n */\nexport const splitEvery = (input, chunkLength) => range(Math.ceil(input.length / chunkLength))\n    .map((index) => index * chunkLength)\n    .map((begin) => input.slice(begin, begin + chunkLength));\nconst hexByteWidth = 2;\nconst hexadecimal = 16;\n/**\n * Decode a hexadecimal-encoded string into a Uint8Array.\n *\n * E.g.: `hexToBin('2a64ff')` → `new Uint8Array([42, 100, 255])`\n *\n * Note, this method always completes. If `validHex` is not divisible by 2,\n * the final byte will be parsed as if it were prepended with a `0` (e.g. `aaa`\n * is interpreted as `aa0a`). If `validHex` is potentially malformed, check\n * it with {@link isHex} before calling this method.\n *\n * @param validHex - a string of valid, hexadecimal-encoded data\n */\nexport const hexToBin = (validHex) => Uint8Array.from(splitEvery(validHex, hexByteWidth).map((byte) => parseInt(byte, hexadecimal)));\n/**\n * For use before {@link hexToBin}. Returns true if the provided string is valid\n * hexadecimal (length is divisible by 2, only uses hexadecimal characters).\n * @param maybeHex - a string to test\n */\nexport const isHex = (maybeHex) => maybeHex.length % hexByteWidth === 0 && !/[^a-fA-F0-9]/u.test(maybeHex);\n/**\n * Encode a Uint8Array into a hexadecimal-encoded string.\n *\n * E.g.: `binToHex(new Uint8Array([42, 100, 255]))` → `'2a64ff'`\n *\n * @param bytes - a Uint8Array to encode\n */\nexport const binToHex = (bytes) => bytes.reduce((str, byte) => str + byte.toString(hexadecimal).padStart(hexByteWidth, '0'), '');\n/**\n * Decode a hexadecimal-encoded string into bytes, reverse it, then re-encode.\n *\n * @param validHex - a string of valid, hexadecimal-encoded data. See\n * {@link hexToBin} for more information.\n */\nexport const swapEndianness = (validHex) => binToHex(hexToBin(validHex).reverse());\n/**\n * Reduce an array of `Uint8Array`s into a single `Uint8Array`.\n * @param array - the array of `Uint8Array`s to flatten\n */\nexport const flattenBinArray = (array) => {\n    const totalLength = array.reduce((total, bin) => total + bin.length, 0);\n    const flattened = new Uint8Array(totalLength);\n    // eslint-disable-next-line functional/no-expression-statements\n    array.reduce((index, bin) => {\n        // eslint-disable-next-line functional/no-expression-statements\n        flattened.set(bin, index);\n        return index + bin.length;\n    }, 0);\n    return flattened;\n};\n/**\n * Compare to `Uint8Array`s, return true if their contents are exactly the same,\n * otherwise return false.\n * @param a - the first Uint8Array\n * @param b - the second Uint8Array\n */\nexport const binsAreEqual = (a, b) => {\n    if (a.length !== b.length) {\n        return false;\n    }\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements, no-plusplus\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=hex.js.map","/**\n * A simple method used throughout Libauth to format error messages. By\n * formatting errors this way, downstream consumers can detect specific error\n * types by matching the `errorType`. For example, the error:\n *\n * ```ts\n * formatError(SomeTypeOfError.exceedsMaximum, `Provided value: ${value}`);\n * ```\n *\n * Can be detected with `String.includes()`, even if the\n * `SomeTypeOfError.exceedsMaximum` error message changes:\n * ```ts\n * error.includes(SomeTypeOfError.exceedsMaximum);\n * // => true\n * ```\n *\n * Using this method ensures consistency across the library.\n *\n * @remarks\n * In Libauth, expected errors use the type `string` rather than `Error` (or\n * other objects that inherit from `Error`) to simplify the resulting types and\n * typechecking requirements. This ensures consistency of returned errors in all\n * environments, avoids exposing internal details like stack traces and line\n * numbers, and allows error messages to be recorded or used as text without an\n * intermediate `toString()` method.\n *\n * @param errorType - the error enum member representing this error type\n * @param errorDetails - optional, additional details to include in the error\n * message\n */\nexport const formatError = (errorType, errorDetails) => `${errorType}${errorDetails === undefined ? '' : ` ${errorDetails}`}`;\nexport const unknownValue = (value, message = `Received an unknown value: ${String(value)}. This should have been caught by TypeScript - are your types correct?`) => {\n    // eslint-disable-next-line functional/no-throw-statements\n    throw new Error(message);\n};\n//# sourceMappingURL=error.js.map","import { formatError } from './error.js';\n/**\n * Encode a positive integer as a little-endian Uint8Array. For values exceeding\n * `Number.MAX_SAFE_INTEGER` (`9007199254740991`), use `bigIntToBinUintLE`.\n * Negative values will return the same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUintLE = (value) => {\n    const baseUint8Array = 256;\n    const result = [];\n    // eslint-disable-next-line functional/no-let\n    let remaining = value;\n    // eslint-disable-next-line functional/no-loop-statements\n    while (remaining >= baseUint8Array) {\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n        result.push(remaining % baseUint8Array);\n        // eslint-disable-next-line functional/no-expression-statements\n        remaining = Math.floor(remaining / baseUint8Array);\n    }\n    // eslint-disable-next-line functional/no-conditional-statements, functional/no-expression-statements, functional/immutable-data\n    if (remaining > 0)\n        result.push(remaining);\n    return Uint8Array.from(result);\n};\n/**\n * Fill a new Uint8Array of a specific byte-length with the contents of a given\n * Uint8Array, truncating or padding the Uint8Array with zeros.\n *\n * @param bin - the Uint8Array to resize\n * @param bytes - the desired byte-length\n */\nexport const binToFixedLength = (bin, bytes) => {\n    const fixedBytes = new Uint8Array(bytes);\n    const maxValue = 255;\n    // eslint-disable-next-line functional/no-expression-statements, @typescript-eslint/no-unused-expressions\n    bin.length > bytes ? fixedBytes.fill(maxValue) : fixedBytes.set(bin);\n    return fixedBytes;\n};\n/**\n * Encode a positive integer as a 2-byte Uint16LE Uint8Array, clamping the\n * results – values exceeding `0xffff` (`65535`) return the same result as\n * `0xffff`, negative values will return the same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint16LEClamped = (value) => {\n    const uint16 = 2;\n    return binToFixedLength(numberToBinUintLE(value), uint16);\n};\n/**\n * Encode a positive integer as a 4-byte Uint32LE Uint8Array, clamping the\n * results – values exceeding `0xffffffff` (`4294967295`) return the same result\n * as `0xffffffff`, negative values will return the same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint32LEClamped = (value) => {\n    const uint32 = 4;\n    return binToFixedLength(numberToBinUintLE(value), uint32);\n};\n/**\n * Encode a positive integer as a 2-byte Uint16LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffff` (`65535`). If applicable, applications should handle such\n * cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint16LE = (value) => {\n    const uint16Length = 2;\n    const bin = new Uint8Array(uint16Length);\n    const writeAsLittleEndian = true;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statements\n    view.setUint16(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode an integer as a 2-byte Int16LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0x0000` to `0xffff` (`65535`). If applicable, applications should handle\n * such cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinInt16LE = (value) => {\n    const int16Length = 2;\n    const bin = new Uint8Array(int16Length);\n    const writeAsLittleEndian = true;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statements\n    view.setInt16(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode an integer as a 4-byte Uint32LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0x00000000` to `0xffffffff` (`4294967295`). If applicable, applications\n * should handle such cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinInt32LE = (value) => {\n    const int32Length = 4;\n    const bin = new Uint8Array(int32Length);\n    const writeAsLittleEndian = true;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statements\n    view.setInt32(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Decode a 2-byte Int16LE Uint8Array into a number.\n *\n * Throws if `bin` is shorter than 2 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToNumberInt16LE = (bin) => {\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    const readAsLittleEndian = true;\n    return view.getInt16(0, readAsLittleEndian);\n};\n/**\n * Decode a 4-byte Int32LE Uint8Array into a number.\n *\n * Throws if `bin` is shorter than 4 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToNumberInt32LE = (bin) => {\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    const readAsLittleEndian = true;\n    return view.getInt32(0, readAsLittleEndian);\n};\n/**\n * Encode a positive integer as a 2-byte Uint16LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffff` (`65535`). If applicable, applications should handle such\n * cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint16BE = (value) => {\n    const uint16Length = 2;\n    const bin = new Uint8Array(uint16Length);\n    const writeAsLittleEndian = false;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statements\n    view.setUint16(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode a positive number as a 4-byte Uint32LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffffffff` (`4294967295`). If applicable, applications should handle\n * such cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint32LE = (value) => {\n    const uint32Length = 4;\n    const bin = new Uint8Array(uint32Length);\n    const writeAsLittleEndian = true;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statements\n    view.setUint32(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode a positive number as a 4-byte Uint32BE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffffffff` (`4294967295`). If applicable, applications should handle\n * such cases prior to calling this method.\n *\n * @param value - the number to encode\n */\nexport const numberToBinUint32BE = (value) => {\n    const uint32Length = 4;\n    const bin = new Uint8Array(uint32Length);\n    const writeAsLittleEndian = false;\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    // eslint-disable-next-line functional/no-expression-statements\n    view.setUint32(0, value, writeAsLittleEndian);\n    return bin;\n};\n/**\n * Encode a positive BigInt as little-endian Uint8Array. Negative values will\n * return the same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const bigIntToBinUintLE = (value) => {\n    const baseUint8Array = 256;\n    const base = BigInt(baseUint8Array);\n    const result = [];\n    // eslint-disable-next-line functional/no-let\n    let remaining = value;\n    // eslint-disable-next-line functional/no-loop-statements\n    while (remaining >= base) {\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n        result.push(Number(remaining % base));\n        // eslint-disable-next-line functional/no-expression-statements\n        remaining /= base;\n    }\n    // eslint-disable-next-line functional/no-conditional-statements, functional/no-expression-statements, functional/immutable-data\n    if (remaining > 0n)\n        result.push(Number(remaining));\n    return Uint8Array.from(result.length > 0 ? result : [0]);\n};\n/**\n * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array, clamping the\n * results – values exceeding `0xffff_ffff_ffff_ffff` (`18446744073709551615`)\n * return the same result as `0xffff_ffff_ffff_ffff`, negative values return the\n * same result as `0`.\n *\n * @param value - the number to encode\n */\nexport const bigIntToBinUint64LEClamped = (value) => {\n    const uint64 = 8;\n    return binToFixedLength(bigIntToBinUintLE(value), uint64);\n};\n/**\n * Encode a positive BigInt as an 8-byte Uint64LE Uint8Array.\n *\n * This method will return an incorrect result for values outside of the range\n * `0` to `0xffff_ffff_ffff_ffff` (`18446744073709551615`).\n *\n * @param value - the number to encode\n */\nexport const bigIntToBinUint64LE = (value) => {\n    const uint64LengthInBits = 64;\n    const valueAsUint64 = BigInt.asUintN(uint64LengthInBits, value);\n    const fixedLengthBin = bigIntToBinUint64LEClamped(valueAsUint64);\n    return fixedLengthBin;\n};\n/**\n * Encode an integer as a 4-byte, little-endian Uint8Array using the number's\n * two's compliment representation (the format used by JavaScript's bitwise\n * operators).\n *\n * @remarks\n * The C++ bitcoin implementations sometimes represent short vectors using\n * signed 32-bit integers (e.g. `sighashType`). This method can be used to test\n * compatibility with those implementations.\n *\n * @param value - the number to encode\n */\nexport const numberToBinInt32TwosCompliment = (value) => {\n    const bytes = 4;\n    const bitsInAByte = 8;\n    const bin = new Uint8Array(bytes);\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements, no-plusplus\n    for (let index = 0; index < bytes; index++) {\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n        bin[index] = value;\n        // eslint-disable-next-line functional/no-expression-statements, no-bitwise, no-param-reassign\n        value >>>= bitsInAByte;\n    }\n    return bin;\n};\n/**\n * Decode a little-endian Uint8Array of any length into a number. For numbers\n * larger than `Number.MAX_SAFE_INTEGER` (`9007199254740991`), use\n * `binToBigIntUintLE`.\n *\n * The `bytes` parameter can be set to constrain the expected length (default:\n * `bin.length`). This method throws if `bin.length` is not equal to `bytes`.\n *\n * @privateRemarks\n * We avoid a bitwise strategy here because JavaScript uses 32-bit signed\n * integers for bitwise math, so larger numbers are converted incorrectly. E.g.\n * `2147483648 << 8` is `0`, while `2147483648n << 8n` is `549755813888n`.\n *\n * @param bin - the Uint8Array to decode\n * @param bytes - the number of bytes to read (default: `bin.length`)\n */\nexport const binToNumberUintLE = (bin, bytes = bin.length) => {\n    const base = 2;\n    const bitsInAByte = 8;\n    if (bin.length !== bytes) {\n        // eslint-disable-next-line functional/no-throw-statements\n        throw new TypeError(`Bin length must be ${bytes}.`);\n    }\n    return new Uint8Array(bin.buffer, bin.byteOffset, bin.length).reduce((accumulated, byte, i) => accumulated + byte * base ** (bitsInAByte * i), 0);\n};\n/**\n * Decode a 2-byte Uint16LE Uint8Array into a number.\n *\n * Throws if `bin` is shorter than 2 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToNumberUint16LE = (bin) => {\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    const readAsLittleEndian = true;\n    return view.getUint16(0, readAsLittleEndian);\n};\n/**\n * Decode a 4-byte Uint32LE Uint8Array into a number.\n *\n * Throws if `bin` is shorter than 4 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToNumberUint32LE = (bin) => {\n    const view = new DataView(bin.buffer, bin.byteOffset, bin.byteLength);\n    const readAsLittleEndian = true;\n    return view.getUint32(0, readAsLittleEndian);\n};\n/**\n * Decode a big-endian Uint8Array of any length into a BigInt. If starting from\n * a hex value, consider using the BigInt constructor instead:\n * ```\n * BigInt(`0x${hex}`)\n * ```\n *\n * The `bytes` parameter can be set to constrain the expected length (default:\n * `bin.length`). This method throws if `bin.length` is not equal to `bytes`.\n *\n * @param bin - the Uint8Array to decode\n * @param bytes - the number of bytes to read (default: `bin.length`)\n */\nexport const binToBigIntUintBE = (bin, bytes = bin.length) => {\n    const bitsInAByte = 8;\n    const shift = BigInt(bitsInAByte);\n    if (bin.length !== bytes) {\n        // eslint-disable-next-line functional/no-throw-statements\n        throw new TypeError(`Bin length must be ${bytes}.`);\n    }\n    return new Uint8Array(bin.buffer, bin.byteOffset, bin.length).reduce(\n    // eslint-disable-next-line no-bitwise\n    (accumulated, byte) => (accumulated << shift) | BigInt(byte), 0n);\n};\n/**\n * Decode an unsigned, 32-byte big-endian Uint8Array into a BigInt. This can be\n * used to decode Uint8Array-encoded cryptographic primitives like private\n * keys, public keys, curve parameters, and signature points.\n *\n * If starting from a hex value, consider using the BigInt constructor instead:\n * ```\n * BigInt(`0x${hex}`)\n * ```\n * @param bin - the Uint8Array to decode\n */\nexport const binToBigIntUint256BE = (bin) => {\n    const uint256Bytes = 32;\n    return binToBigIntUintBE(bin, uint256Bytes);\n};\n/**\n * Encode a positive BigInt into an unsigned 32-byte big-endian Uint8Array. This\n * can be used to encoded numbers for cryptographic primitives like private\n * keys, public keys, curve parameters, and signature points.\n *\n * Negative values will return the same result as `0`, values higher than\n * 2^256-1 will return the maximum expressible unsigned 256-bit value\n * (`0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff`).\n *\n * @param value - the BigInt to encode\n */\nexport const bigIntToBinUint256BEClamped = (value) => {\n    const uint256Bytes = 32;\n    return binToFixedLength(bigIntToBinUintLE(value), uint256Bytes).reverse();\n};\n/**\n * Decode a little-endian Uint8Array of any length into a BigInt.\n *\n * The `bytes` parameter can be set to constrain the expected length (default:\n * `bin.length`). This method throws if `bin.length` is not equal to `bytes`.\n *\n * @param bin - the Uint8Array to decode\n * @param bytes - the number of bytes to read (default: `bin.length`)\n */\nexport const binToBigIntUintLE = (bin, bytes = bin.length) => {\n    const bitsInAByte = 8;\n    if (bin.length !== bytes) {\n        // eslint-disable-next-line functional/no-throw-statements\n        throw new TypeError(`Bin length must be ${bytes}.`);\n    }\n    return new Uint8Array(bin.buffer, bin.byteOffset, bin.length).reduceRight(\n    // eslint-disable-next-line no-bitwise\n    (accumulated, byte) => (accumulated << BigInt(bitsInAByte)) | BigInt(byte), 0n);\n};\n/**\n * Decode an 8-byte Uint64LE Uint8Array into a BigInt.\n *\n * Throws if `bin` is shorter than 8 bytes.\n *\n * @param bin - the Uint8Array to decode\n */\nexport const binToBigIntUint64LE = (bin) => {\n    const uint64LengthInBytes = 8;\n    const truncatedBin = bin.length > uint64LengthInBytes ? bin.slice(0, uint64LengthInBytes) : bin;\n    return binToBigIntUintLE(truncatedBin, uint64LengthInBytes);\n};\n/**\n * Decode an {@link Output.valueSatoshis} into a `BigInt`. This is an alias for\n * {@link binToBigIntUint64LE}.\n *\n * Throws if the provided value is shorter than 8 bytes.\n */\nexport const binToValueSatoshis = binToBigIntUint64LE;\n/**\n * Encode a `BigInt` into an {@link Output.valueSatoshis}. This is an alias for\n * {@link bigIntToBinUint64LE}.\n *\n * This method will return an incorrect result for values outside of the range 0\n * to 0xffff_ffff_ffff_ffff (`18446744073709551615`).\n */\nexport const valueSatoshisToBin = bigIntToBinUint64LE;\n/**\n * Get the expected byte length of a CompactUint given a first byte.\n *\n * @param firstByte - the first byte of the CompactUint\n */\nexport const compactUintPrefixToSize = (firstByte) => {\n    switch (firstByte) {\n        case 253 /* CompactUint.uint16Prefix */:\n            return 2 /* CompactUint.uint16 */ + 1;\n        case 254 /* CompactUint.uint32Prefix */:\n            return 4 /* CompactUint.uint32 */ + 1;\n        case 255 /* CompactUint.uint64Prefix */:\n            return 8 /* CompactUint.uint64 */ + 1;\n        default:\n            return 1 /* CompactUint.uint8 */;\n    }\n};\nexport var CompactUintError;\n(function (CompactUintError) {\n    CompactUintError[\"noPrefix\"] = \"Error reading CompactUint: requires at least one byte.\";\n    CompactUintError[\"insufficientBytes\"] = \"Error reading CompactUint: insufficient bytes.\";\n    CompactUintError[\"nonMinimal\"] = \"Error reading CompactUint: CompactUint is not minimally encoded.\";\n    CompactUintError[\"excessiveBytes\"] = \"Error decoding CompactUint: unexpected bytes after CompactUint.\";\n})(CompactUintError || (CompactUintError = {}));\n/**\n * Read a non-minimally-encoded `CompactUint` (see {@link bigIntToCompactUint})\n * from the provided {@link ReadPosition}, returning either an error message (as\n * a string) or an object containing the value and the\n * next {@link ReadPosition}.\n *\n * Rather than this function, most applications should\n * use {@link readCompactUintMinimal}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * `CompactUint`\n */\nexport const readCompactUint = (position) => {\n    const { bin, index } = position;\n    const prefix = bin[index];\n    if (prefix === undefined) {\n        return formatError(CompactUintError.noPrefix);\n    }\n    const bytes = compactUintPrefixToSize(prefix);\n    if (bin.length - index < bytes) {\n        return formatError(CompactUintError.insufficientBytes, `CompactUint prefix ${prefix} requires at least ${bytes} bytes. Remaining bytes: ${bin.length - index}`);\n    }\n    const hasPrefix = bytes !== 1;\n    const contents = hasPrefix\n        ? bin.subarray(index + 1, index + bytes)\n        : bin.subarray(index, index + bytes);\n    return {\n        position: { bin, index: index + bytes },\n        result: binToBigIntUintLE(contents),\n    };\n};\n/**\n * Encode a positive BigInt as a `CompactUint` (Satoshi's variable-length,\n * positive integer format).\n *\n * Note: the maximum value of a CompactUint is `0xffff_ffff_ffff_ffff`\n * (`18446744073709551615`). This method will return an incorrect result for\n * values outside of the range `0` to `0xffff_ffff_ffff_ffff`. If applicable,\n * applications should handle such cases prior to calling this method.\n *\n * @param value - the BigInt to encode (must be no larger than\n * `0xffff_ffff_ffff_ffff`)\n */\nexport const bigIntToCompactUint = (value) => value <= BigInt(252 /* CompactUint.uint8MaxValue */)\n    ? Uint8Array.of(Number(value))\n    : value <= BigInt(65535 /* CompactUint.uint16MaxValue */)\n        ? Uint8Array.from([\n            253 /* CompactUint.uint16Prefix */,\n            ...numberToBinUint16LE(Number(value)),\n        ])\n        : value <= BigInt(4294967295 /* CompactUint.uint32MaxValue */)\n            ? Uint8Array.from([\n                254 /* CompactUint.uint32Prefix */,\n                ...numberToBinUint32LE(Number(value)),\n            ])\n            : Uint8Array.from([\n                255 /* CompactUint.uint64Prefix */,\n                ...bigIntToBinUint64LE(value),\n            ]);\n/**\n * Read a minimally-encoded `CompactUint` from the provided\n * {@link ReadPosition}, returning either an error message (as a string) or an\n * object containing the value and the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * `CompactUint`\n */\nexport const readCompactUintMinimal = (position) => {\n    const read = readCompactUint(position);\n    if (typeof read === 'string') {\n        return read;\n    }\n    const readLength = read.position.index - position.index;\n    const canonicalEncoding = bigIntToCompactUint(read.result);\n    if (readLength !== canonicalEncoding.length) {\n        return formatError(CompactUintError.nonMinimal, `Value: ${read.result.toString()}, encoded length: ${readLength}, canonical length: ${canonicalEncoding.length}`);\n    }\n    return read;\n};\n/**\n * Decode a minimally-encoded `CompactUint` (Satoshi's variable-length, positive\n * integer format) from a Uint8Array, returning the value as a BigInt. This\n * function returns an error if the entire input is not consumed – to read a\n * `CompactUint` from a position within a larger `Uint8Array`,\n * use {@link readCompactUintMinimal} or {@link readCompactUint}.\n *\n * @param bin - the Uint8Array from which to read the CompactUint\n */\nexport const compactUintToBigInt = (bin) => {\n    const read = readCompactUintMinimal({ bin, index: 0 });\n    if (typeof read === 'string') {\n        return read;\n    }\n    if (read.position.index !== bin.length) {\n        return formatError(CompactUintError.excessiveBytes, `CompactUint ends at index ${read.position.index}, but input includes ${bin.length} bytes.`);\n    }\n    return read.result;\n};\n/**\n * Convert a signed integer into it's two's compliment unsigned equivalent, e.g.\n * `0b11111111111111111111111111111110` is `-2` as a signed integer or\n * `4294967294` as an unsigned integer.\n */\nexport const int32SignedToUnsigned = (int32) => \n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nUint32Array.from(Int32Array.of(int32))[0];\n/**\n * Convert an unsigned integer into it's two's compliment signed equivalent,\n * e.g. `0b11111111111111111111111111111110` is `4294967294` as an unsigned\n * integer or `-2` as a signed integer.\n */\nexport const int32UnsignedToSigned = (int32) => \n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nInt32Array.from(Uint32Array.of(int32))[0];\n//# sourceMappingURL=number.js.map","import { formatError } from './error.js';\nimport { readCompactUintMinimal } from './number.js';\n/**\n * Given an initial {@link ReadPosition} and a list of {@link ReadFunction}s,\n * apply each {@link ReadFunction} in order, aggregating each result and passing\n * the next {@link ReadPosition} into the next {@link ReadFunction}. If an error\n * occurs, immediately return the error message (`string`), otherwise, return\n * the array of results.\n *\n * @param position - the {@link ReadPosition} at which to start the first read\n * @param readFunctions - the ordered list of {@link ReadFunction}s to apply to\n * the {@link ReadPosition}\n */\nexport const readMultiple = (position, readFunctions) => {\n    // eslint-disable-next-line functional/no-let\n    let nextPosition = position;\n    const results = [];\n    // eslint-disable-next-line functional/no-loop-statements\n    for (const readFunction of readFunctions) {\n        const out = readFunction(nextPosition);\n        if (typeof out === 'string') {\n            return out;\n        }\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n        results.push(out.result);\n        // eslint-disable-next-line functional/no-expression-statements\n        nextPosition = out.position;\n    }\n    return {\n        position: nextPosition,\n        result: results,\n    };\n};\nexport var ReadItemCountError;\n(function (ReadItemCountError) {\n    ReadItemCountError[\"itemCount\"] = \"Error reading item count.\";\n    ReadItemCountError[\"item\"] = \"Error reading item.\";\n})(ReadItemCountError || (ReadItemCountError = {}));\n/**\n * Read a count of items indicated by the CompactUint at {@link ReadPosition}.\n * The CompactUint will be read to determine the number of items, and the read\n * function will be applied in series, aggregated each result and passing the\n * next {@link ReadPosition} into each iteration. If an error occurs,\n * immediately return the error message (`string`), otherwise, return the array\n * of results.\n */\nexport const readItemCount = (position, readFunction) => {\n    const countRead = readCompactUintMinimal(position);\n    if (typeof countRead === 'string') {\n        return formatError(ReadItemCountError.itemCount, countRead);\n    }\n    // eslint-disable-next-line functional/no-let\n    let nextPosition = countRead.position;\n    const result = [];\n    // eslint-disable-next-line functional/no-loop-statements, functional/no-let, no-plusplus\n    for (let remaining = Number(countRead.result); remaining > 0; remaining--) {\n        const read = readFunction(nextPosition);\n        if (typeof read === 'string') {\n            return formatError(ReadItemCountError.item, read);\n        }\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n        result.push(read.result);\n        // eslint-disable-next-line functional/no-expression-statements\n        nextPosition = read.position;\n    }\n    return { position: nextPosition, result };\n};\n//# sourceMappingURL=read.js.map","/* eslint-disable functional/no-conditional-statements, functional/no-let, functional/no-expression-statements, no-underscore-dangle, functional/no-try-statements, @typescript-eslint/no-magic-numbers, @typescript-eslint/max-params, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-non-null-assertion */\n/**\n * Note, most of this method is translated and boiled-down from the wasm-pack\n * workflow. Significant changes to wasm-bindgen or wasm-pack build will likely\n * require modifications to this method.\n */\nexport const instantiateRustWasm = async (webassemblyBytes, expectedImportModuleName, hashExportName, initExportName, updateExportName, finalExportName) => {\n    const wasm = (await WebAssembly.instantiate(webassemblyBytes, {\n        [expectedImportModuleName]: {\n            /**\n             * This would only be called in cases where a `__wbindgen_malloc` failed.\n             * Since `__wbindgen_malloc` isn't exposed to consumers, this error\n             * can only be encountered if the code below is broken.\n             */\n            /* c8 ignore next 10 */\n            // eslint-disable-next-line camelcase, @typescript-eslint/naming-convention\n            __wbindgen_throw: (ptr, len) => {\n                // eslint-disable-next-line functional/no-throw-statements\n                throw new Error(\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                Array.from(getUint8Memory().subarray(ptr, ptr + len))\n                    .map((num) => String.fromCharCode(num))\n                    .join(''));\n            },\n        },\n    })).instance.exports; // eslint-disable-line @typescript-eslint/no-explicit-any\n    let cachedUint8Memory; // eslint-disable-line @typescript-eslint/init-declarations\n    let cachedUint32Memory; // eslint-disable-line @typescript-eslint/init-declarations\n    let cachedGlobalArgumentPtr; // eslint-disable-line @typescript-eslint/init-declarations\n    const globalArgumentPtr = () => {\n        if (cachedGlobalArgumentPtr === undefined) {\n            cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n        }\n        return cachedGlobalArgumentPtr;\n    };\n    /**\n     * Must be hoisted for `__wbindgen_throw`.\n     */\n    // eslint-disable-next-line func-style\n    function getUint8Memory() {\n        if (cachedUint8Memory === undefined ||\n            cachedUint8Memory.buffer !== wasm.memory.buffer) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            cachedUint8Memory = new Uint8Array(wasm.memory.buffer);\n        }\n        return cachedUint8Memory;\n    }\n    const getUint32Memory = () => {\n        if (cachedUint32Memory === undefined ||\n            cachedUint32Memory.buffer !== wasm.memory.buffer) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            cachedUint32Memory = new Uint32Array(wasm.memory.buffer);\n        }\n        return cachedUint32Memory;\n    };\n    const passArray8ToWasm = (array) => {\n        const ptr = wasm.__wbindgen_malloc(array.length);\n        getUint8Memory().set(array, ptr);\n        return [ptr, array.length];\n    };\n    const getArrayU8FromWasm = (ptr, len) => getUint8Memory().subarray(ptr, ptr + len);\n    const hash = (input) => {\n        const [ptr0, len0] = passArray8ToWasm(input);\n        const retPtr = globalArgumentPtr();\n        try {\n            wasm[hashExportName](retPtr, ptr0, len0);\n            const mem = getUint32Memory();\n            const ptr = mem[retPtr / 4];\n            const len = mem[retPtr / 4 + 1];\n            const realRet = getArrayU8FromWasm(ptr, len).slice();\n            wasm.__wbindgen_free(ptr, len);\n            return realRet;\n        }\n        finally {\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    };\n    const init = () => {\n        const retPtr = globalArgumentPtr();\n        wasm[initExportName](retPtr);\n        const mem = getUint32Memory();\n        const ptr = mem[retPtr / 4];\n        const len = mem[retPtr / 4 + 1];\n        const realRet = getArrayU8FromWasm(ptr, len).slice();\n        wasm.__wbindgen_free(ptr, len);\n        return realRet;\n    };\n    const update = (rawState, input) => {\n        const [ptr0, len0] = passArray8ToWasm(rawState);\n        const [ptr1, len1] = passArray8ToWasm(input);\n        const retPtr = globalArgumentPtr();\n        try {\n            wasm[updateExportName](retPtr, ptr0, len0, ptr1, len1);\n            const mem = getUint32Memory();\n            const ptr = mem[retPtr / 4];\n            const len = mem[retPtr / 4 + 1];\n            const realRet = getArrayU8FromWasm(ptr, len).slice();\n            wasm.__wbindgen_free(ptr, len);\n            return realRet;\n        }\n        finally {\n            rawState.set(getUint8Memory().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    };\n    const final = (rawState) => {\n        const [ptr0, len0] = passArray8ToWasm(rawState);\n        const retPtr = globalArgumentPtr();\n        try {\n            wasm[finalExportName](retPtr, ptr0, len0);\n            const mem = getUint32Memory();\n            const ptr = mem[retPtr / 4];\n            const len = mem[retPtr / 4 + 1];\n            const realRet = getArrayU8FromWasm(ptr, len).slice();\n            wasm.__wbindgen_free(ptr, len);\n            return realRet;\n        }\n        finally {\n            rawState.set(getUint8Memory().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    };\n    return {\n        final,\n        hash,\n        init,\n        update,\n    };\n};\n/* eslint-enable functional/no-conditional-statements, functional/no-let, functional/no-expression-statements, no-underscore-dangle, functional/no-try-statements, @typescript-eslint/no-magic-numbers, @typescript-eslint/max-params, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-non-null-assertion */\n//# sourceMappingURL=hashes.js.map","/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const ripemd160Base64Bytes = '';\n//# sourceMappingURL=ripemd160.base64.js.map","// cSpell:ignore noncefp, ndata, outputlen\n/**\n * bitflags used in secp256k1's public API (translated from secp256k1.h)\n */\n/* eslint-disable no-bitwise, @typescript-eslint/no-magic-numbers, @typescript-eslint/prefer-literal-enum-member */\n/** All flags' lower 8 bits indicate what they're for. Do not use directly. */\n// const SECP256K1_FLAGS_TYPE_MASK = (1 << 8) - 1;\nconst SECP256K1_FLAGS_TYPE_CONTEXT = 1 << 0;\nconst SECP256K1_FLAGS_TYPE_COMPRESSION = 1 << 1;\n/** The higher bits contain the actual data. Do not use directly. */\nconst SECP256K1_FLAGS_BIT_CONTEXT_VERIFY = 1 << 8;\nconst SECP256K1_FLAGS_BIT_CONTEXT_SIGN = 1 << 9;\nconst SECP256K1_FLAGS_BIT_COMPRESSION = 1 << 8;\n/** Flags to pass to secp256k1_context_create. */\nconst SECP256K1_CONTEXT_VERIFY = SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_VERIFY;\nconst SECP256K1_CONTEXT_SIGN = SECP256K1_FLAGS_TYPE_CONTEXT | SECP256K1_FLAGS_BIT_CONTEXT_SIGN;\nconst SECP256K1_CONTEXT_NONE = SECP256K1_FLAGS_TYPE_CONTEXT;\n/** Flag to pass to secp256k1_ec_pubkey_serialize and secp256k1_ec_privkey_export. */\nconst SECP256K1_EC_COMPRESSED = SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION;\nconst SECP256K1_EC_UNCOMPRESSED = SECP256K1_FLAGS_TYPE_COMPRESSION;\n/**\n * Flag to pass to a Secp256k1.contextCreate method.\n *\n * The purpose of context structures is to cache large precomputed data tables\n * that are expensive to construct, and also to maintain the randomization data\n * for blinding.\n *\n * You can create a context with only VERIFY or only SIGN capabilities, or you\n * can use BOTH. (NONE can be used for conversion/serialization.)\n */\nexport var ContextFlag;\n(function (ContextFlag) {\n    ContextFlag[ContextFlag[\"NONE\"] = SECP256K1_CONTEXT_NONE] = \"NONE\";\n    ContextFlag[ContextFlag[\"VERIFY\"] = SECP256K1_CONTEXT_VERIFY] = \"VERIFY\";\n    ContextFlag[ContextFlag[\"SIGN\"] = SECP256K1_CONTEXT_SIGN] = \"SIGN\";\n    ContextFlag[ContextFlag[\"BOTH\"] = SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY] = \"BOTH\";\n})(ContextFlag || (ContextFlag = {}));\n/**\n * Flag to pass a Secp256k1 public key serialization method.\n *\n * You can indicate COMPRESSED (33 bytes, header byte 0x02 or 0x03) or\n * UNCOMPRESSED (65 bytes, header byte 0x04) format.\n */\nexport var CompressionFlag;\n(function (CompressionFlag) {\n    CompressionFlag[CompressionFlag[\"COMPRESSED\"] = SECP256K1_EC_COMPRESSED] = \"COMPRESSED\";\n    CompressionFlag[CompressionFlag[\"UNCOMPRESSED\"] = SECP256K1_EC_UNCOMPRESSED] = \"UNCOMPRESSED\";\n})(CompressionFlag || (CompressionFlag = {}));\n//# sourceMappingURL=secp256k1-wasm-types.js.map","/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const secp256k1Base64Bytes = '';\n//# sourceMappingURL=secp256k1.base64.js.map","/* eslint-disable no-underscore-dangle, @typescript-eslint/max-params, @typescript-eslint/naming-convention */\n// cSpell:ignore memcpy, anyfunc\nimport { base64ToBin } from '../../format/format.js';\nimport { CompressionFlag, ContextFlag } from './secp256k1-wasm-types.js';\nimport { secp256k1Base64Bytes } from './secp256k1.base64.js';\nexport { ContextFlag, CompressionFlag };\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment */\nconst wrapSecp256k1Wasm = (instance, heapU8, heapU32) => ({\n    contextCreate: (context) => instance.exports._secp256k1_context_create(context),\n    contextRandomize: (contextPtr, seedPtr) => instance.exports._secp256k1_context_randomize(contextPtr, seedPtr),\n    free: (pointer) => instance.exports._free(pointer),\n    heapU32,\n    heapU8,\n    instance,\n    malloc: (bytes) => instance.exports._malloc(bytes),\n    mallocSizeT: (num) => {\n        // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n        const pointer = instance.exports._malloc(4);\n        // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n        const pointerView32 = pointer >> 2;\n        // eslint-disable-next-line functional/no-expression-statements\n        heapU32.set([num], pointerView32);\n        return pointer;\n    },\n    mallocUint8Array: (array) => {\n        const pointer = instance.exports._malloc(array.length);\n        // eslint-disable-next-line functional/no-expression-statements\n        heapU8.set(array, pointer);\n        return pointer;\n    },\n    privkeyTweakAdd: (contextPtr, secretKeyPtr, tweakNum256Ptr) => instance.exports._secp256k1_ec_privkey_tweak_add(contextPtr, secretKeyPtr, tweakNum256Ptr),\n    privkeyTweakMul: (contextPtr, secretKeyPtr, tweakNum256Ptr) => instance.exports._secp256k1_ec_privkey_tweak_mul(contextPtr, secretKeyPtr, tweakNum256Ptr),\n    pubkeyCreate: (contextPtr, publicKeyPtr, secretKeyPtr) => instance.exports._secp256k1_ec_pubkey_create(contextPtr, publicKeyPtr, secretKeyPtr),\n    pubkeyParse: (contextPtr, publicKeyOutPtr, publicKeyInPtr, publicKeyInLength) => instance.exports._secp256k1_ec_pubkey_parse(contextPtr, publicKeyOutPtr, publicKeyInPtr, publicKeyInLength),\n    pubkeySerialize: (contextPtr, outputPtr, outputLengthPtr, publicKeyPtr, compression) => instance.exports._secp256k1_ec_pubkey_serialize(contextPtr, outputPtr, outputLengthPtr, publicKeyPtr, compression),\n    pubkeyTweakAdd: (contextPtr, publicKeyPtr, tweakNum256Ptr) => instance.exports._secp256k1_ec_pubkey_tweak_add(contextPtr, publicKeyPtr, tweakNum256Ptr),\n    pubkeyTweakMul: (contextPtr, publicKeyPtr, tweakNum256Ptr) => instance.exports._secp256k1_ec_pubkey_tweak_mul(contextPtr, publicKeyPtr, tweakNum256Ptr),\n    readHeapU8: (pointer, bytes) => new Uint8Array(heapU8.buffer, pointer, bytes),\n    readSizeT: (pointer) => {\n        // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n        const pointerView32 = pointer >> 2;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return heapU32[pointerView32];\n    },\n    recover: (contextPtr, outputPubkeyPointer, rSigPtr, msg32Ptr) => instance.exports._secp256k1_ecdsa_recover(contextPtr, outputPubkeyPointer, rSigPtr, msg32Ptr),\n    recoverableSignatureParse: (contextPtr, outputRSigPtr, inputSigPtr, rid) => instance.exports._secp256k1_ecdsa_recoverable_signature_parse_compact(contextPtr, outputRSigPtr, inputSigPtr, rid),\n    recoverableSignatureSerialize: (contextPtr, sigOutPtr, recIDOutPtr, rSigPtr) => instance.exports._secp256k1_ecdsa_recoverable_signature_serialize_compact(contextPtr, sigOutPtr, recIDOutPtr, rSigPtr),\n    schnorrSign: (contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr) => instance.exports._secp256k1_schnorr_sign(contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr),\n    schnorrVerify: (contextPtr, sigPtr, msg32Ptr, publicKeyPtr) => instance.exports._secp256k1_schnorr_verify(contextPtr, sigPtr, msg32Ptr, publicKeyPtr),\n    seckeyVerify: (contextPtr, secretKeyPtr) => instance.exports._secp256k1_ec_seckey_verify(contextPtr, secretKeyPtr),\n    sign: (contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr) => instance.exports._secp256k1_ecdsa_sign(contextPtr, outputSigPtr, msg32Ptr, secretKeyPtr),\n    signRecoverable: (contextPtr, outputRSigPtr, msg32Ptr, secretKeyPtr) => instance.exports._secp256k1_ecdsa_sign_recoverable(contextPtr, outputRSigPtr, msg32Ptr, secretKeyPtr),\n    signatureMalleate: (contextPtr, outputSigPtr, inputSigPtr) => instance.exports._secp256k1_ecdsa_signature_malleate(contextPtr, outputSigPtr, inputSigPtr),\n    signatureNormalize: (contextPtr, outputSigPtr, inputSigPtr) => instance.exports._secp256k1_ecdsa_signature_normalize(contextPtr, outputSigPtr, inputSigPtr),\n    signatureParseCompact: (contextPtr, sigOutPtr, compactSigInPtr) => instance.exports._secp256k1_ecdsa_signature_parse_compact(contextPtr, sigOutPtr, compactSigInPtr),\n    signatureParseDER: (contextPtr, sigOutPtr, sigDERInPtr, sigDERInLength) => instance.exports._secp256k1_ecdsa_signature_parse_der(contextPtr, sigOutPtr, sigDERInPtr, sigDERInLength),\n    signatureSerializeCompact: (contextPtr, outputCompactSigPtr, inputSigPtr) => instance.exports._secp256k1_ecdsa_signature_serialize_compact(contextPtr, outputCompactSigPtr, inputSigPtr),\n    signatureSerializeDER: (contextPtr, outputDERSigPtr, outputDERSigLengthPtr, inputSigPtr) => instance.exports._secp256k1_ecdsa_signature_serialize_der(contextPtr, outputDERSigPtr, outputDERSigLengthPtr, inputSigPtr),\n    verify: (contextPtr, sigPtr, msg32Ptr, pubkeyPtr) => instance.exports._secp256k1_ecdsa_verify(contextPtr, sigPtr, msg32Ptr, pubkeyPtr),\n});\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable functional/immutable-data, functional/no-expression-statements, @typescript-eslint/no-magic-numbers, functional/no-conditional-statements, no-bitwise, functional/no-throw-statements */\n/**\n * Method extracted from Emscripten's preamble.js\n */\nconst isLittleEndian = (buffer) => {\n    const littleEndian = true;\n    const notLittleEndian = false;\n    const heap16 = new Int16Array(buffer);\n    const heap32 = new Int32Array(buffer);\n    const heapU8 = new Uint8Array(buffer);\n    heap32[0] = 1668509029;\n    heap16[1] = 25459;\n    return heapU8[2] !== 115 || heapU8[3] !== 99\n        ? /* c8 ignore next */\n            notLittleEndian\n        : littleEndian;\n};\n/**\n * Method derived from Emscripten's preamble.js\n */\nconst alignMemory = (factor, size) => Math.ceil(size / factor) * factor;\n/**\n * The most performant way to instantiate secp256k1 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateSecp256k1}.\n *\n * Note, most of this method is translated and boiled-down from Emscripten's\n * preamble.js. Significant changes to the WASM build or breaking updates to\n * Emscripten will likely require modifications to this method.\n *\n * @param webassemblyBytes - A buffer containing the secp256k1 binary.\n */\nexport const instantiateSecp256k1WasmBytes = async (webassemblyBytes) => {\n    const STACK_ALIGN = 16;\n    const GLOBAL_BASE = 1024;\n    const WASM_PAGE_SIZE = 65536;\n    const TOTAL_STACK = 5242880;\n    const TOTAL_MEMORY = 16777216;\n    const wasmMemory = new WebAssembly.Memory({\n        initial: TOTAL_MEMORY / WASM_PAGE_SIZE,\n        maximum: TOTAL_MEMORY / WASM_PAGE_SIZE,\n    });\n    /* c8 ignore next 9 */\n    if (!isLittleEndian(wasmMemory.buffer)) {\n        /*\n         * note: this block is excluded from test coverage. It's A) hard to test\n         * (must be either tested on big-endian hardware or a big-endian buffer\n         * mock) and B) extracted from Emscripten's preamble.js, where it should\n         * be tested properly.\n         */\n        throw new Error('Runtime error: expected the system to be little-endian.');\n    }\n    const STATIC_BASE = GLOBAL_BASE;\n    const STATICTOP_INITIAL = STATIC_BASE + 67696 + 16;\n    const DYNAMICTOP_PTR = STATICTOP_INITIAL;\n    const DYNAMICTOP_PTR_SIZE = 4;\n    const STATICTOP = (STATICTOP_INITIAL + DYNAMICTOP_PTR_SIZE + 15) & -16;\n    const STACKTOP = alignMemory(STACK_ALIGN, STATICTOP);\n    const STACK_BASE = STACKTOP;\n    const STACK_MAX = STACK_BASE + TOTAL_STACK;\n    const DYNAMIC_BASE = alignMemory(STACK_ALIGN, STACK_MAX);\n    const heapU8 = new Uint8Array(wasmMemory.buffer);\n    const heap32 = new Int32Array(wasmMemory.buffer);\n    const heapU32 = new Uint32Array(wasmMemory.buffer);\n    heap32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;\n    const TABLE_SIZE = 6;\n    const MAX_TABLE_SIZE = 6;\n    // eslint-disable-next-line functional/no-let, @typescript-eslint/init-declarations\n    let getErrNoLocation;\n    /*\n     * note: A number of methods below are excluded from test coverage. They are\n     * a) not part of the regular usage of this library (should only be evaluated\n     * if the consumer mis-implements the library and exist only to make\n     * debugging easier) and B) already tested adequately in Emscripten, from\n     * which this section is extracted.\n     */\n    const env = {\n        DYNAMICTOP_PTR,\n        STACKTOP,\n        /* c8 ignore start */\n        ___setErrNo: (value) => {\n            if (getErrNoLocation !== undefined) {\n                heap32[getErrNoLocation() >> 2] = value;\n            }\n            return value;\n        },\n        _abort: (err = 'Secp256k1 Error') => {\n            throw new Error(err);\n        },\n        // eslint-disable-next-line camelcase\n        _emscripten_memcpy_big: (dest, src, num) => {\n            heapU8.set(heapU8.subarray(src, src + num), dest);\n            return dest;\n        },\n        abort: (err = 'Secp256k1 Error') => {\n            throw new Error(err);\n        },\n        abortOnCannotGrowMemory: () => {\n            throw new Error('Secp256k1 Error: abortOnCannotGrowMemory was called.');\n        },\n        enlargeMemory: () => {\n            throw new Error('Secp256k1 Error: enlargeMemory was called.');\n        },\n        getTotalMemory: () => TOTAL_MEMORY,\n        /* c8 ignore stop */\n    };\n    const info = {\n        env: {\n            ...env,\n            memory: wasmMemory,\n            memoryBase: STATIC_BASE,\n            table: new WebAssembly.Table({\n                element: 'anyfunc',\n                initial: TABLE_SIZE,\n                maximum: MAX_TABLE_SIZE,\n            }),\n            tableBase: 0,\n        },\n        global: { Infinity, NaN },\n    };\n    return WebAssembly.instantiate(webassemblyBytes, info).then((result) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment\n        getErrNoLocation = result.instance.exports['___errno_location'];\n        return wrapSecp256k1Wasm(result.instance, heapU8, heapU32);\n    });\n};\n/* eslint-enable functional/immutable-data, functional/no-expression-statements, @typescript-eslint/no-magic-numbers, functional/no-conditional-statements, no-bitwise, functional/no-throw-statements */\nexport const getEmbeddedSecp256k1Binary = () => base64ToBin(secp256k1Base64Bytes).buffer;\n/**\n * An ultimately-portable (but slower) version of\n * {@link instantiateSecp256k1Bytes} that does not require the consumer to\n * provide the secp256k1 binary buffer.\n */\nexport const instantiateSecp256k1Wasm = async () => instantiateSecp256k1WasmBytes(getEmbeddedSecp256k1Binary());\n//# sourceMappingURL=secp256k1-wasm.js.map","/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const sha1Base64Bytes = '';\n//# sourceMappingURL=sha1.base64.js.map","/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const sha256Base64Bytes = '';\n//# sourceMappingURL=sha256.base64.js.map","/* eslint-disable tsdoc/syntax */\n/**\n * @hidden\n */\n// prettier-ignore\nexport const sha512Base64Bytes = '';\n//# sourceMappingURL=sha512.base64.js.map","import { base64ToBin, instantiateRustWasm, ripemd160Base64Bytes, } from './dependencies.js';\n/**\n * The most performant way to instantiate ripemd160 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateRipemd160}.\n *\n * @param webassemblyBytes - A buffer containing the ripemd160 binary.\n */\nexport const instantiateRipemd160Bytes = async (webassemblyBytes) => {\n    const wasm = await instantiateRustWasm(webassemblyBytes, './ripemd160', 'ripemd160', 'ripemd160_init', 'ripemd160_update', 'ripemd160_final');\n    return {\n        final: wasm.final,\n        hash: wasm.hash,\n        init: wasm.init,\n        update: wasm.update,\n    };\n};\nexport const getEmbeddedRipemd160Binary = () => base64ToBin(ripemd160Base64Bytes).buffer;\n/**\n * An ultimately-portable (but slower) version of\n * {@link instantiateRipemd160Bytes} that does not require the consumer to\n * provide the ripemd160 binary buffer.\n */\nexport const instantiateRipemd160 = async () => instantiateRipemd160Bytes(getEmbeddedRipemd160Binary());\n//# sourceMappingURL=ripemd160.js.map","import { CompressionFlag, ContextFlag, instantiateSecp256k1Wasm, instantiateSecp256k1WasmBytes, } from './dependencies.js';\n/* eslint-enable @typescript-eslint/no-duplicate-enum-values */\nexport var Secp256k1Error;\n(function (Secp256k1Error) {\n    Secp256k1Error[\"unparsableSignature\"] = \"Failed to parse signature.\";\n    Secp256k1Error[\"unparsablePublicKey\"] = \"Failed to parse public key.\";\n    Secp256k1Error[\"derivePublicKeyFromInvalidPrivateKey\"] = \"Cannot derive public key from invalid private key.\";\n    Secp256k1Error[\"signWithInvalidPrivateKey\"] = \"Failed to sign message hash. The private key is not valid.\";\n    Secp256k1Error[\"recoverPublicKeyWithUnparsableSignature\"] = \"Failed to recover public key. Could not parse signature.\";\n    Secp256k1Error[\"recoverPublicKeyInvalidMaterial\"] = \"Failed to recover public key. The compact signature, recovery, or message hash is invalid.\";\n    Secp256k1Error[\"addTweakPrivateKey\"] = \"Private key is invalid or adding failed.\";\n    Secp256k1Error[\"mulTweakPrivateKey\"] = \"Private key is invalid or multiplying failed.\";\n    Secp256k1Error[\"addTweakPublicKey\"] = \"Failed to tweak public key (by addition).\";\n    Secp256k1Error[\"mulTweakPublicKey\"] = \"Failed to tweak public key (by multiplication).\";\n})(Secp256k1Error || (Secp256k1Error = {}));\n/**\n * @param secp256k1Wasm - a Secp256k1Wasm object\n * @param randomSeed - a 32-byte random seed used to randomize the context after\n * creation\n */\nconst wrapSecp256k1Wasm = (secp256k1Wasm, randomSeed) => {\n    /**\n     * Currently, this wrapper creates a context with both SIGN and VERIFY\n     * capabilities. For better initialization performance, consumers could\n     * re-implement a wrapper with only the capabilities they require.\n     */\n    const contextPtr = secp256k1Wasm.contextCreate(ContextFlag.BOTH);\n    /**\n     * Since all of these methods are single-threaded and synchronous, we can\n     * reuse allocated WebAssembly memory for each method without worrying about\n     * calls interfering with each other. Likewise, these spaces never need to be\n     * `free`d, since we will continue using them until this entire object (and\n     * with it, the entire WebAssembly instance) is garbage collected.\n     *\n     * If malicious javascript gained access to this object, it should be\n     * considered a critical vulnerability in the consumer. However, as a best\n     * practice, we zero out private keys below when we're finished with them.\n     */\n    const sigScratch = secp256k1Wasm.malloc(72 /* ByteLength.maxECDSASig */);\n    const publicKeyScratch = secp256k1Wasm.malloc(65 /* ByteLength.maxPublicKey */);\n    const messageHashScratch = secp256k1Wasm.malloc(32 /* ByteLength.messageHash */);\n    const internalPublicKeyPtr = secp256k1Wasm.malloc(64 /* ByteLength.internalPublicKey */);\n    const internalSigPtr = secp256k1Wasm.malloc(64 /* ByteLength.internalSig */);\n    const schnorrSigPtr = secp256k1Wasm.malloc(64 /* ByteLength.schnorrSig */);\n    const privateKeyPtr = secp256k1Wasm.malloc(32 /* ByteLength.privateKey */);\n    const internalRSigPtr = secp256k1Wasm.malloc(65 /* ByteLength.recoverableSig */);\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    const recoveryNumPtr = secp256k1Wasm.malloc(4);\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const recoveryNumPtrView32 = recoveryNumPtr >> 2;\n    const getRecoveryNumPtr = () => secp256k1Wasm.heapU32[recoveryNumPtrView32];\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    const lengthPtr = secp256k1Wasm.malloc(4);\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const lengthPtrView32 = lengthPtr >> 2;\n    const cloneAndPad = (value, expectedLength) => {\n        const zeroPaddedValue = new Uint8Array(expectedLength);\n        zeroPaddedValue.set(value);\n        return zeroPaddedValue;\n    };\n    const parsePublicKey = (publicKey) => {\n        const paddedPublicKey = cloneAndPad(publicKey, 65 /* ByteLength.maxPublicKey */);\n        secp256k1Wasm.heapU8.set(paddedPublicKey, publicKeyScratch);\n        return (secp256k1Wasm.pubkeyParse(contextPtr, internalPublicKeyPtr, publicKeyScratch, \n        // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n        publicKey.length) === 1);\n    };\n    const setLengthPtr = (value) => {\n        secp256k1Wasm.heapU32.set([value], lengthPtrView32);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const getLengthPtr = () => secp256k1Wasm.heapU32[lengthPtrView32];\n    const serializePublicKey = (length, flag) => {\n        setLengthPtr(length);\n        secp256k1Wasm.pubkeySerialize(contextPtr, publicKeyScratch, lengthPtr, internalPublicKeyPtr, flag);\n        return secp256k1Wasm.readHeapU8(publicKeyScratch, getLengthPtr()).slice();\n    };\n    const getSerializedPublicKey = (compressed) => compressed\n        ? serializePublicKey(33 /* ByteLength.compressedPublicKey */, CompressionFlag.COMPRESSED)\n        : serializePublicKey(65 /* ByteLength.uncompressedPublicKey */, CompressionFlag.UNCOMPRESSED);\n    const convertPublicKey = (compressed) => (publicKey) => {\n        if (!parsePublicKey(publicKey)) {\n            return Secp256k1Error.unparsablePublicKey;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    const parseSignature = (signature, isDer) => {\n        const paddedSignature = cloneAndPad(signature, 72 /* ByteLength.maxECDSASig */);\n        secp256k1Wasm.heapU8.set(paddedSignature, sigScratch);\n        return isDer\n            ? secp256k1Wasm.signatureParseDER(contextPtr, internalSigPtr, sigScratch, signature.length) === 1\n            : secp256k1Wasm.signatureParseCompact(contextPtr, internalSigPtr, sigScratch) === 1;\n    };\n    const getCompactSig = () => {\n        secp256k1Wasm.signatureSerializeCompact(contextPtr, sigScratch, internalSigPtr);\n        return secp256k1Wasm.readHeapU8(sigScratch, 64 /* ByteLength.compactSig */).slice();\n    };\n    const getDERSig = () => {\n        setLengthPtr(72 /* ByteLength.maxECDSASig */);\n        secp256k1Wasm.signatureSerializeDER(contextPtr, sigScratch, lengthPtr, internalSigPtr);\n        return secp256k1Wasm.readHeapU8(sigScratch, getLengthPtr()).slice();\n    };\n    const convertSignature = (wasDER) => (signature) => {\n        if (!parseSignature(signature, wasDER)) {\n            return Secp256k1Error.unparsableSignature;\n        }\n        return wasDER ? getCompactSig() : getDERSig();\n    };\n    const fillPrivateKeyPtr = (privateKey) => {\n        const paddedPrivateKey = cloneAndPad(privateKey, 32 /* ByteLength.privateKey */);\n        secp256k1Wasm.heapU8.set(paddedPrivateKey, privateKeyPtr);\n    };\n    const zeroOutPtr = (pointer, bytes) => {\n        secp256k1Wasm.heapU8.fill(0, pointer, pointer + bytes);\n    };\n    const zeroOutPrivateKeyPtr = () => {\n        zeroOutPtr(privateKeyPtr, 32 /* ByteLength.privateKey */);\n    };\n    const withPrivateKey = (privateKey, instructions) => {\n        fillPrivateKeyPtr(privateKey);\n        const ret = instructions();\n        zeroOutPrivateKeyPtr();\n        return ret;\n    };\n    const derivePublicKey = (compressed) => (privateKey) => {\n        const invalid = withPrivateKey(privateKey, () => secp256k1Wasm.pubkeyCreate(contextPtr, internalPublicKeyPtr, privateKeyPtr) !== 1);\n        if (invalid) {\n            return Secp256k1Error.derivePublicKeyFromInvalidPrivateKey;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    const fillMessageHashScratch = (messageHash) => {\n        const paddedMessageHash = cloneAndPad(messageHash, 32 /* ByteLength.messageHash */);\n        secp256k1Wasm.heapU8.set(paddedMessageHash, messageHashScratch);\n    };\n    const normalizeSignature = () => {\n        secp256k1Wasm.signatureNormalize(contextPtr, internalSigPtr, internalSigPtr);\n    };\n    const modifySignature = (isDer, normalize) => (signature) => {\n        if (!parseSignature(signature, isDer)) {\n            return Secp256k1Error.unparsableSignature;\n        }\n        if (normalize) {\n            normalizeSignature();\n        }\n        else {\n            secp256k1Wasm.signatureMalleate(contextPtr, internalSigPtr, internalSigPtr);\n        }\n        return isDer ? getDERSig() : getCompactSig();\n    };\n    const parseAndNormalizeSignature = (signature, isDer, normalize) => {\n        const ret = parseSignature(signature, isDer);\n        if (normalize) {\n            normalizeSignature();\n        }\n        return ret;\n    };\n    const signMessageHash = (isDer) => (privateKey, messageHash) => {\n        fillMessageHashScratch(messageHash);\n        return withPrivateKey(privateKey, () => {\n            const failed = secp256k1Wasm.sign(contextPtr, internalSigPtr, messageHashScratch, privateKeyPtr) !== 1;\n            if (failed) {\n                return Secp256k1Error.signWithInvalidPrivateKey;\n            }\n            if (isDer) {\n                setLengthPtr(72 /* ByteLength.maxECDSASig */);\n                secp256k1Wasm.signatureSerializeDER(contextPtr, sigScratch, lengthPtr, internalSigPtr);\n                return secp256k1Wasm.readHeapU8(sigScratch, getLengthPtr()).slice();\n            }\n            secp256k1Wasm.signatureSerializeCompact(contextPtr, sigScratch, internalSigPtr);\n            return secp256k1Wasm\n                .readHeapU8(sigScratch, 64 /* ByteLength.compactSig */)\n                .slice();\n        });\n    };\n    const signMessageHashSchnorr = () => (privateKey, messageHash) => {\n        fillMessageHashScratch(messageHash);\n        return withPrivateKey(privateKey, () => {\n            const failed = secp256k1Wasm.schnorrSign(contextPtr, schnorrSigPtr, messageHashScratch, privateKeyPtr) !== 1;\n            if (failed) {\n                return Secp256k1Error.signWithInvalidPrivateKey;\n            }\n            return secp256k1Wasm\n                .readHeapU8(schnorrSigPtr, 64 /* ByteLength.schnorrSig */)\n                .slice();\n        });\n    };\n    const verifyMessage = (messageHash) => {\n        fillMessageHashScratch(messageHash);\n        return (secp256k1Wasm.verify(contextPtr, internalSigPtr, messageHashScratch, internalPublicKeyPtr) === 1);\n    };\n    const verifySignature = (isDer, normalize) => (signature, publicKey, messageHash) => parsePublicKey(publicKey) &&\n        parseAndNormalizeSignature(signature, isDer, normalize) &&\n        verifyMessage(messageHash);\n    const verifyMessageSchnorr = (messageHash, signature) => {\n        fillMessageHashScratch(messageHash);\n        const paddedSignature = cloneAndPad(signature, 64 /* ByteLength.schnorrSig */);\n        secp256k1Wasm.heapU8.set(paddedSignature, schnorrSigPtr);\n        return (secp256k1Wasm.schnorrVerify(contextPtr, schnorrSigPtr, messageHashScratch, internalPublicKeyPtr) === 1);\n    };\n    const verifySignatureSchnorr = () => (signature, publicKey, messageHash) => parsePublicKey(publicKey)\n        ? verifyMessageSchnorr(messageHash, signature)\n        : false;\n    const signMessageHashRecoverable = (privateKey, messageHash) => {\n        fillMessageHashScratch(messageHash);\n        return withPrivateKey(privateKey, () => {\n            if (secp256k1Wasm.signRecoverable(contextPtr, internalRSigPtr, messageHashScratch, privateKeyPtr) !== 1) {\n                return Secp256k1Error.signWithInvalidPrivateKey;\n            }\n            secp256k1Wasm.recoverableSignatureSerialize(contextPtr, sigScratch, recoveryNumPtr, internalRSigPtr);\n            return {\n                recoveryId: getRecoveryNumPtr(),\n                signature: secp256k1Wasm\n                    .readHeapU8(sigScratch, 64 /* ByteLength.compactSig */)\n                    .slice(),\n            };\n        });\n    };\n    const recoverPublicKey = (compressed) => (signature, recoveryId, messageHash) => {\n        fillMessageHashScratch(messageHash);\n        const paddedSignature = cloneAndPad(signature, 72 /* ByteLength.maxECDSASig */);\n        secp256k1Wasm.heapU8.set(paddedSignature, sigScratch);\n        if (secp256k1Wasm.recoverableSignatureParse(contextPtr, internalRSigPtr, sigScratch, recoveryId) !== 1) {\n            return Secp256k1Error.recoverPublicKeyWithUnparsableSignature;\n        }\n        if (secp256k1Wasm.recover(contextPtr, internalPublicKeyPtr, internalRSigPtr, messageHashScratch) !== 1) {\n            return Secp256k1Error.recoverPublicKeyInvalidMaterial;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    const addTweakPrivateKey = (privateKey, tweakValue) => {\n        fillMessageHashScratch(tweakValue);\n        return withPrivateKey(privateKey, () => {\n            if (secp256k1Wasm.privkeyTweakAdd(contextPtr, privateKeyPtr, messageHashScratch) !== 1) {\n                return Secp256k1Error.addTweakPrivateKey;\n            }\n            return secp256k1Wasm\n                .readHeapU8(privateKeyPtr, 32 /* ByteLength.privateKey */)\n                .slice();\n        });\n    };\n    const mulTweakPrivateKey = (privateKey, tweakValue) => {\n        fillMessageHashScratch(tweakValue);\n        return withPrivateKey(privateKey, () => {\n            if (secp256k1Wasm.privkeyTweakMul(contextPtr, privateKeyPtr, messageHashScratch) !== 1) {\n                return Secp256k1Error.mulTweakPrivateKey;\n            }\n            return secp256k1Wasm\n                .readHeapU8(privateKeyPtr, 32 /* ByteLength.privateKey */)\n                .slice();\n        });\n    };\n    const addTweakPublicKey = (compressed) => (publicKey, tweakValue) => {\n        if (!parsePublicKey(publicKey)) {\n            return Secp256k1Error.unparsablePublicKey;\n        }\n        fillMessageHashScratch(tweakValue);\n        if (secp256k1Wasm.pubkeyTweakAdd(contextPtr, internalPublicKeyPtr, messageHashScratch) !== 1) {\n            return Secp256k1Error.addTweakPublicKey;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    const mulTweakPublicKey = (compressed) => (publicKey, tweakValue) => {\n        if (!parsePublicKey(publicKey)) {\n            return Secp256k1Error.unparsablePublicKey;\n        }\n        fillMessageHashScratch(tweakValue);\n        if (secp256k1Wasm.pubkeyTweakMul(contextPtr, internalPublicKeyPtr, messageHashScratch) !== 1) {\n            return Secp256k1Error.mulTweakPublicKey;\n        }\n        return getSerializedPublicKey(compressed);\n    };\n    if (randomSeed !== undefined) {\n        const randomSeedPtr = messageHashScratch;\n        const paddedRandomSeed = cloneAndPad(randomSeed, 32 /* ByteLength.randomSeed */);\n        secp256k1Wasm.heapU8.set(paddedRandomSeed, randomSeedPtr);\n        secp256k1Wasm.contextRandomize(contextPtr, randomSeedPtr);\n        zeroOutPtr(randomSeedPtr, 32 /* ByteLength.randomSeed */);\n    }\n    return {\n        addTweakPrivateKey,\n        addTweakPublicKeyCompressed: addTweakPublicKey(true),\n        addTweakPublicKeyUncompressed: addTweakPublicKey(false),\n        compressPublicKey: convertPublicKey(true),\n        derivePublicKeyCompressed: derivePublicKey(true),\n        derivePublicKeyUncompressed: derivePublicKey(false),\n        malleateSignatureCompact: modifySignature(false, false),\n        malleateSignatureDER: modifySignature(true, false),\n        mulTweakPrivateKey,\n        mulTweakPublicKeyCompressed: mulTweakPublicKey(true),\n        mulTweakPublicKeyUncompressed: mulTweakPublicKey(false),\n        normalizeSignatureCompact: modifySignature(false, true),\n        normalizeSignatureDER: modifySignature(true, true),\n        recoverPublicKeyCompressed: recoverPublicKey(true),\n        recoverPublicKeyUncompressed: recoverPublicKey(false),\n        signMessageHashCompact: signMessageHash(false),\n        signMessageHashDER: signMessageHash(true),\n        signMessageHashRecoverableCompact: signMessageHashRecoverable,\n        signMessageHashSchnorr: signMessageHashSchnorr(),\n        signatureCompactToDER: convertSignature(false),\n        signatureDERToCompact: convertSignature(true),\n        uncompressPublicKey: convertPublicKey(false),\n        validatePrivateKey: (privateKey) => withPrivateKey(privateKey, () => secp256k1Wasm.seckeyVerify(contextPtr, privateKeyPtr) === 1),\n        validatePublicKey: parsePublicKey,\n        verifySignatureCompact: verifySignature(false, true),\n        verifySignatureCompactLowS: verifySignature(false, false),\n        verifySignatureDER: verifySignature(true, true),\n        verifySignatureDERLowS: verifySignature(true, false),\n        verifySignatureSchnorr: verifySignatureSchnorr(),\n    };\n};\n/**\n * This method is like {@link instantiateSecp256k1}, but requires the consumer\n * to `Window.fetch` or `fs.readFile` the `secp256k1.wasm` binary and provide it\n * to this method as `webassemblyBytes`. This skips a base64 decoding of an\n * embedded binary.\n *\n * ### Randomizing the Context with `randomSeed`\n * This method also accepts an optional, 32-byte `randomSeed`, which is passed\n * to the `contextRandomize` method in the underlying WebAssembly.\n *\n * In the secp256k1 C library, context randomization is an additional layer of\n * security from side-channel attacks that attempt to extract private key\n * information by analyzing things like a CPU's emitted radio frequencies or\n * power usage.\n *\n * As most applications also benefit from deterministic, reproducible behavior,\n * context is not randomized by default in Libauth. To randomize the context,\n * provide a 32-byte Uint8Array of cryptographically strong random values\n * (e.g. `crypto.getRandomValues(new Uint8Array(32))`).\n *\n * @param webassemblyBytes - an ArrayBuffer containing the bytes from Libauth's\n * `secp256k1.wasm` binary. Providing this buffer manually may be faster than\n * the internal base64 decode that happens in {@link instantiateSecp256k1}.\n * @param randomSeed - a 32-byte random seed used to randomize the secp256k1\n * context after creation. See above for details.\n */\nexport const instantiateSecp256k1Bytes = async (webassemblyBytes, randomSeed) => wrapSecp256k1Wasm(await instantiateSecp256k1WasmBytes(webassemblyBytes), randomSeed);\n/**\n * Create and wrap a Secp256k1 WebAssembly instance to expose a set of\n * purely-functional Secp256k1 methods. For slightly faster initialization, use\n * {@link instantiateSecp256k1Bytes}.\n *\n * @param randomSeed - a 32-byte random seed used to randomize the secp256k1\n * context after creation. See the description in\n * {@link instantiateSecp256k1Bytes} for details.\n */\nexport const instantiateSecp256k1 = async (randomSeed) => wrapSecp256k1Wasm(await instantiateSecp256k1Wasm(), randomSeed);\n//# sourceMappingURL=secp256k1.js.map","import { base64ToBin, instantiateRustWasm, sha1Base64Bytes, } from './dependencies.js';\n/**\n * The most performant way to instantiate sha1 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateSha1}.\n *\n * @param webassemblyBytes - A buffer containing the sha1 binary.\n */\nexport const instantiateSha1Bytes = async (webassemblyBytes) => {\n    const wasm = await instantiateRustWasm(webassemblyBytes, './sha1', 'sha1', 'sha1_init', 'sha1_update', 'sha1_final');\n    return {\n        final: wasm.final,\n        hash: wasm.hash,\n        init: wasm.init,\n        update: wasm.update,\n    };\n};\nexport const getEmbeddedSha1Binary = () => base64ToBin(sha1Base64Bytes).buffer;\n/**\n * An ultimately-portable (but slower) version of {@link instantiateSha1Bytes}\n * that does not require the consumer to provide the sha1 binary buffer.\n */\nexport const instantiateSha1 = async () => instantiateSha1Bytes(getEmbeddedSha1Binary());\n//# sourceMappingURL=sha1.js.map","import { base64ToBin, instantiateRustWasm, sha256Base64Bytes, } from './dependencies.js';\n/**\n * The most performant way to instantiate sha256 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateSha256}.\n *\n * @param webassemblyBytes - A buffer containing the sha256 binary.\n */\nexport const instantiateSha256Bytes = async (webassemblyBytes) => {\n    const wasm = await instantiateRustWasm(webassemblyBytes, './sha256', 'sha256', 'sha256_init', 'sha256_update', 'sha256_final');\n    return {\n        final: wasm.final,\n        hash: wasm.hash,\n        init: wasm.init,\n        update: wasm.update,\n    };\n};\nexport const getEmbeddedSha256Binary = () => base64ToBin(sha256Base64Bytes).buffer;\n/**\n * An ultimately-portable (but possibly slower) version of\n * {@link instantiateSha256Bytes} which does not require the consumer to provide\n * the sha256 binary buffer.\n */\nexport const instantiateSha256 = async () => instantiateSha256Bytes(getEmbeddedSha256Binary());\n//# sourceMappingURL=sha256.js.map","import { base64ToBin, instantiateRustWasm, sha512Base64Bytes, } from './dependencies.js';\n/**\n * The most performant way to instantiate sha512 functionality. To avoid\n * using Node.js or DOM-specific APIs, you can use {@link instantiateSha512}.\n *\n * @param webassemblyBytes - A buffer containing the sha512 binary.\n */\nexport const instantiateSha512Bytes = async (webassemblyBytes) => {\n    const wasm = await instantiateRustWasm(webassemblyBytes, './sha512', 'sha512', 'sha512_init', 'sha512_update', 'sha512_final');\n    return {\n        final: wasm.final,\n        hash: wasm.hash,\n        init: wasm.init,\n        update: wasm.update,\n    };\n};\nexport const getEmbeddedSha512Binary = () => base64ToBin(sha512Base64Bytes).buffer;\n/**\n * An ultimately-portable (but slower) version of {@link instantiateSha512Bytes}\n * that does not require the consumer to provide the sha512 binary buffer.\n */\nexport const instantiateSha512 = async () => instantiateSha512Bytes(getEmbeddedSha512Binary());\n//# sourceMappingURL=sha512.js.map","import { instantiateRipemd160 } from './ripemd160.js';\nimport { instantiateSecp256k1 } from './secp256k1.js';\nimport { instantiateSha1 } from './sha1.js';\nimport { instantiateSha256 } from './sha256.js';\nimport { instantiateSha512 } from './sha512.js';\nconst [sha1, sha256, sha512, ripemd160, secp256k1] = await Promise.all([\n    instantiateSha1(),\n    instantiateSha256(),\n    instantiateSha512(),\n    instantiateRipemd160(),\n    instantiateSecp256k1(),\n]);\nexport { ripemd160, secp256k1, sha1, sha256, sha512 };\n//# sourceMappingURL=default-crypto-instances.js.map","import { ripemd160 as internalRipemd160, sha256 as internalSha256, } from './default-crypto-instances.js';\n/**\n * Hash the given payload with sha256, then hash the 32-byte result with\n * ripemd160, returning a 20-byte hash.\n *\n * This hash is used in both {@link AddressType.p2pkh} and\n * {@link AddressType.p2sh20} addresses.\n *\n * @param payload - the Uint8Array to hash\n */\nexport const hash160 = (payload, crypto = { ripemd160: internalRipemd160, sha256: internalSha256 }) => crypto.ripemd160.hash(crypto.sha256.hash(payload));\n/**\n * Hash the given payload with sha256, then hash the 32-byte result with\n * one final round of sha256, returning a 32-byte hash.\n *\n * This type of hash is used to generate identifiers for transactions and blocks\n * (and therefore in block mining).\n *\n * @param payload - the Uint8Array to hash\n */\nexport const hash256 = (payload, sha256 = internalSha256) => sha256.hash(sha256.hash(payload));\n//# sourceMappingURL=combinations.js.map","/**\n * The list of 32 symbols used in Bech32 encoding.\n */\n// cspell: disable-next-line\nexport const bech32CharacterSet = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n/**\n * An object mapping each of the 32 symbols used in Bech32 encoding to their respective index in the character set.\n */\n// prettier-ignore\nexport const bech32CharacterSetIndex = { q: 0, p: 1, z: 2, r: 3, y: 4, '9': 5, x: 6, '8': 7, g: 8, f: 9, '2': 10, t: 11, v: 12, d: 13, w: 14, '0': 15, s: 16, '3': 17, j: 18, n: 19, '5': 20, '4': 21, k: 22, h: 23, c: 24, e: 25, '6': 26, m: 27, u: 28, a: 29, '7': 30, l: 31 }; // eslint-disable-line sort-keys, @typescript-eslint/naming-convention\nexport var BitRegroupingError;\n(function (BitRegroupingError) {\n    BitRegroupingError[\"integerOutOfRange\"] = \"An integer provided in the source array is out of the range of the specified source word length.\";\n    BitRegroupingError[\"hasDisallowedPadding\"] = \"Encountered padding when padding was disallowed.\";\n    BitRegroupingError[\"requiresDisallowedPadding\"] = \"Encoding requires padding while padding is disallowed.\";\n})(BitRegroupingError || (BitRegroupingError = {}));\n/* eslint-disable functional/no-let, no-bitwise, functional/no-expression-statements, functional/no-conditional-statements, complexity */\n/**\n * Given an array of integers, regroup bits from `sourceWordLength` to\n * `resultWordLength`, returning a new array of integers between 0 and\n * toWordLength^2.\n *\n * Note, if `bin` is within the range of `sourceWordLength` and `padding` is\n * `true`, this method will never error.\n *\n * A.K.A. `convertbits`\n */\n// Derived from: https://github.com/sipa/bech32\nexport const regroupBits = ({ bin, sourceWordLength, resultWordLength, allowPadding = true, }) => {\n    let accumulator = 0;\n    let bits = 0;\n    const result = [];\n    const maxResultInt = (1 << resultWordLength) - 1;\n    // eslint-disable-next-line functional/no-loop-statements, @typescript-eslint/prefer-for-of, no-plusplus\n    for (let p = 0; p < bin.length; ++p) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = bin[p];\n        if (value < 0 || value >> sourceWordLength !== 0) {\n            return BitRegroupingError.integerOutOfRange;\n        }\n        accumulator = (accumulator << sourceWordLength) | value;\n        bits += sourceWordLength;\n        // eslint-disable-next-line functional/no-loop-statements\n        while (bits >= resultWordLength) {\n            bits -= resultWordLength;\n            // eslint-disable-next-line functional/immutable-data\n            result.push((accumulator >> bits) & maxResultInt);\n        }\n    }\n    if (allowPadding) {\n        if (bits > 0) {\n            // eslint-disable-next-line functional/immutable-data\n            result.push((accumulator << (resultWordLength - bits)) & maxResultInt);\n        }\n    }\n    else if (bits >= sourceWordLength) {\n        return BitRegroupingError.hasDisallowedPadding;\n    }\n    else if (((accumulator << (resultWordLength - bits)) & maxResultInt) > 0) {\n        return BitRegroupingError.requiresDisallowedPadding;\n    }\n    return result;\n};\n/* eslint-enable functional/no-let, no-bitwise, functional/no-expression-statements, functional/no-conditional-statements, complexity */\n/**\n * Encode an array of numbers as a base32 string using the Bech32 character set.\n *\n * Note, this method always completes. For a valid result, all items in\n * `base32IntegerArray` must be between `0` and `32`. To prepare another array\n * type for encoding, see {@link regroupBits}.\n *\n * @param base32IntegerArray - the array of 5-bit integers to encode\n */\nexport const encodeBech32 = (base32IntegerArray) => {\n    // eslint-disable-next-line functional/no-let\n    let result = '';\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of, functional/no-let, functional/no-loop-statements, no-plusplus\n    for (let i = 0; i < base32IntegerArray.length; i++) {\n        // eslint-disable-next-line functional/no-expression-statements, @typescript-eslint/no-non-null-assertion\n        result += bech32CharacterSet[base32IntegerArray[i]];\n    }\n    return result;\n};\n/**\n * Decode a Bech32-encoded string into an array of 5-bit integers.\n *\n * Note, this method always completes. If `validBech32` is not valid bech32,\n * an incorrect result will be returned. If `validBech32` is potentially\n * malformed, check it with {@link isBech32CharacterSet} before calling\n * this method.\n *\n * @param validBech32 - the bech32-encoded string to decode\n */\nexport const decodeBech32 = (validBech32) => {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of, functional/no-let, functional/no-loop-statements, no-plusplus\n    for (let i = 0; i < validBech32.length; i++) {\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n        result.push(bech32CharacterSetIndex[validBech32[i]]);\n    }\n    return result;\n};\nconst nonBech32Characters = new RegExp(`[^${bech32CharacterSet}]`, 'u');\nconst base32WordLength = 5;\nconst base256WordLength = 8;\n/**\n * Validate that a string uses only characters from the bech32 character set.\n *\n * @param maybeBech32 - a string to test for valid Bech32 encoding\n */\nexport const isBech32CharacterSet = (maybeBech32) => !nonBech32Characters.test(maybeBech32);\nexport var Bech32DecodingError;\n(function (Bech32DecodingError) {\n    Bech32DecodingError[\"notBech32CharacterSet\"] = \"Bech32 decoding error: input contains characters outside of the Bech32 character set.\";\n})(Bech32DecodingError || (Bech32DecodingError = {}));\n/**\n * Convert a padded bech32-encoded string (without checksum) to a Uint8Array,\n * removing the padding. If the string is not valid Bech32, or if the array of\n * 5-bit integers would require padding to be regrouped into 8-bit bytes, this\n * method returns an error message.\n *\n * This method is the reverse of {@link binToBech32Padded}.\n *\n * @param bech32Padded - the padded bech32-encoded string to decode\n */\nexport const bech32PaddedToBin = (bech32Padded) => {\n    const result = isBech32CharacterSet(bech32Padded)\n        ? regroupBits({\n            allowPadding: false,\n            bin: decodeBech32(bech32Padded),\n            resultWordLength: base256WordLength,\n            sourceWordLength: base32WordLength,\n        })\n        : Bech32DecodingError.notBech32CharacterSet;\n    return typeof result === 'string' ? result : Uint8Array.from(result);\n};\n/**\n * Convert a Uint8Array to a padded bech32-encoded string (without a checksum),\n * adding padding bits as necessary to convert all bytes to 5-bit integers.\n *\n * This method is the reverse of {@link bech32PaddedToBin}.\n *\n * @param bytes - the Uint8Array to bech32 encode\n */\nexport const binToBech32Padded = (bytes) => encodeBech32(regroupBits({\n    bin: bytes,\n    resultWordLength: base32WordLength,\n    sourceWordLength: base256WordLength,\n}));\n//# sourceMappingURL=bech32.js.map","import { formatError } from '../format/format.js';\nimport { decodeBech32, encodeBech32, isBech32CharacterSet, regroupBits, } from './bech32.js';\nexport var CashAddressNetworkPrefix;\n(function (CashAddressNetworkPrefix) {\n    CashAddressNetworkPrefix[\"mainnet\"] = \"bitcoincash\";\n    CashAddressNetworkPrefix[\"testnet\"] = \"bchtest\";\n    CashAddressNetworkPrefix[\"regtest\"] = \"bchreg\";\n})(CashAddressNetworkPrefix || (CashAddressNetworkPrefix = {}));\n/**\n * The CashAddress specification standardizes the format of the version byte:\n * - Most significant bit: reserved, must be `0`\n * - next 4 bits: Address Type\n * - 3 least significant bits: Payload Size\n *\n * Two Address Type values are currently standardized:\n * - 0 (`0b0000`): P2PKH\n * - 1 (`0b0001`): P2SH\n *\n * And two are proposed by `CHIP-2022-02-CashTokens`:\n * - 2 (`0b0010`): P2PKH + Token Support\n * - 3 (`0b0011`): P2SH + Token Support\n *\n * The CashAddress specification standardizes expected payload size using\n * {@link CashAddressSizeBits}. Currently, two size bit values are in use by\n * standard CashAddress types:\n * - `0` (`0b000`): 20 bytes (in use by `p2pkh` and `p2sh20`)\n * - `3` (`0b011`): 32 bytes (in use by `p2sh32`)\n */\nexport var CashAddressVersionByte;\n(function (CashAddressVersionByte) {\n    /**\n     * Pay to Public Key Hash (P2PKH): `0b00000000`\n     *\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0000` (P2PKH)\n     * - Size bits: `000` (20 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2pkh\"] = 0] = \"p2pkh\";\n    /**\n     * 20-byte Pay to Script Hash (P2SH20): `0b00001000`\n     *\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0001` (P2SH)\n     * - Size bits: `000` (20 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2sh20\"] = 8] = \"p2sh20\";\n    /**\n     * 32-byte Pay to Script Hash (P2SH20): `0b00001000`\n     *\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0001` (P2SH)\n     * - Size bits: `011` (32 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2sh32\"] = 11] = \"p2sh32\";\n    /**\n     * Pay to Public Key Hash (P2PKH) with token support: `0b00010000`\n     *\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0010` (P2PKH + Tokens)\n     * - Size bits: `000` (20 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2pkhWithTokens\"] = 16] = \"p2pkhWithTokens\";\n    /**\n     * 20-byte Pay to Script Hash (P2SH20) with token support: `0b00011000`\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0011` (P2SH + Tokens)\n     * - Size bits: `000` (20 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2sh20WithTokens\"] = 24] = \"p2sh20WithTokens\";\n    /**\n     * 32-byte Pay to Script Hash (P2SH32) with token support: `0b00011011`\n     * - Most significant bit: `0` (reserved)\n     * - Address Type bits: `0011` (P2SH + Tokens)\n     * - Size bits: `011` (32 bytes)\n     */\n    CashAddressVersionByte[CashAddressVersionByte[\"p2sh32WithTokens\"] = 27] = \"p2sh32WithTokens\";\n})(CashAddressVersionByte || (CashAddressVersionByte = {}));\n/**\n * The address types currently defined in the CashAddress specification. See\n * also: {@link CashAddressVersionByte}.\n */\nexport var CashAddressType;\n(function (CashAddressType) {\n    /**\n     * Pay to Public Key Hash (P2PKH): `0b0000`\n     */\n    CashAddressType[\"p2pkh\"] = \"p2pkh\";\n    /**\n     * Pay to Script Hash (P2SH): `0b0001`\n     */\n    CashAddressType[\"p2sh\"] = \"p2sh\";\n    /**\n     * Pay to Public Key Hash (P2PKH) with token support: `0b0010`\n     */\n    CashAddressType[\"p2pkhWithTokens\"] = \"p2pkhWithTokens\";\n    /**\n     * Pay to Script Hash (P2SH) with token support: `0b0011`\n     */\n    CashAddressType[\"p2shWithTokens\"] = \"p2shWithTokens\";\n})(CashAddressType || (CashAddressType = {}));\n/**\n * The address type bits currently defined in the CashAddress specification.\n * These map to: {@link CashAddressType}.\n */\nexport var CashAddressTypeBits;\n(function (CashAddressTypeBits) {\n    /**\n     * Pay to Public Key Hash (P2PKH)\n     */\n    CashAddressTypeBits[CashAddressTypeBits[\"p2pkh\"] = 0] = \"p2pkh\";\n    /**\n     * Pay to Script Hash (P2SH)\n     */\n    CashAddressTypeBits[CashAddressTypeBits[\"p2sh\"] = 1] = \"p2sh\";\n    /**\n     * Pay to Public Key Hash (P2PKH) with token support\n     */\n    CashAddressTypeBits[CashAddressTypeBits[\"p2pkhWithTokens\"] = 2] = \"p2pkhWithTokens\";\n    /**\n     * Pay to Script Hash (P2SH) with token support\n     */\n    CashAddressTypeBits[CashAddressTypeBits[\"p2shWithTokens\"] = 3] = \"p2shWithTokens\";\n})(CashAddressTypeBits || (CashAddressTypeBits = {}));\nexport const cashAddressTypeToTypeBits = {\n    [CashAddressType.p2pkh]: CashAddressTypeBits.p2pkh,\n    [CashAddressType.p2sh]: CashAddressTypeBits.p2sh,\n    [CashAddressType.p2pkhWithTokens]: CashAddressTypeBits.p2pkhWithTokens,\n    [CashAddressType.p2shWithTokens]: CashAddressTypeBits.p2shWithTokens,\n};\nexport const cashAddressTypeBitsToType = {\n    [CashAddressTypeBits.p2pkh]: CashAddressType.p2pkh,\n    [CashAddressTypeBits.p2sh]: CashAddressType.p2sh,\n    [CashAddressTypeBits.p2pkhWithTokens]: CashAddressType.p2pkhWithTokens,\n    [CashAddressTypeBits.p2shWithTokens]: CashAddressType.p2shWithTokens,\n};\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const cashAddressSizeBitsToLength = {\n    0: 20,\n    1: 24,\n    2: 28,\n    3: 32,\n    4: 40,\n    5: 48,\n    6: 56,\n    7: 64,\n};\nexport const cashAddressLengthToSizeBits = {\n    20: 0,\n    24: 1,\n    28: 2,\n    32: 3,\n    40: 4,\n    48: 5,\n    56: 6,\n    64: 7,\n};\n/**\n * Encode a CashAddress version byte for the given address type and payload\n * length. See {@link CashAddressVersionByte} for more information.\n *\n * The `type` parameter must be a number between `0` and `15`, and `bitLength`\n * must be one of the standardized lengths. To use the contents of a variable,\n * cast it to {@link CashAddressType} or {@link CashAddressSize} respectively,\n * e.g.:\n * ```ts\n * const type = 3 as CashAddressType;\n * const size = 160 as CashAddressSize;\n * getCashAddressVersionByte(type, size);\n * ```\n * @param typeBits - the address type bit of the payload being encoded\n * @param length - the length of the payload being encoded\n */\nexport const encodeCashAddressVersionByte = (typeBits, length) => \n// eslint-disable-next-line no-bitwise\n(typeBits << 3 /* Constants.cashAddressTypeBitsShift */) |\n    cashAddressLengthToSizeBits[length];\nexport var CashAddressVersionByteDecodingError;\n(function (CashAddressVersionByteDecodingError) {\n    CashAddressVersionByteDecodingError[\"reservedBitSet\"] = \"Reserved bit is set.\";\n})(CashAddressVersionByteDecodingError || (CashAddressVersionByteDecodingError = {}));\n/**\n * Decode a CashAddress version byte. For a list of known versions, see\n * {@link CashAddressVersionByte}.\n *\n * @param version - the version byte to decode\n */\nexport const decodeCashAddressVersionByte = (version) => \n// eslint-disable-next-line no-negated-condition, no-bitwise\n(version & 128 /* Constants.cashAddressReservedBitMask */) !== 0\n    ? CashAddressVersionByteDecodingError.reservedBitSet\n    : {\n        length: cashAddressSizeBitsToLength[\n        // eslint-disable-next-line no-bitwise\n        (version &\n            7 /* Constants.cashAddressSizeBits */)],\n        typeBits: \n        // eslint-disable-next-line no-bitwise\n        (version >>> 3 /* Constants.cashAddressTypeBitsShift */) &\n            15 /* Constants.cashAddressTypeBits */,\n    };\n/**\n * Convert a string into an array of 5-bit numbers, representing the characters\n * in a case-insensitive way.\n * @param prefix - the prefix to mask\n */\nexport const maskCashAddressPrefix = (prefix) => {\n    const result = [];\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements, no-plusplus\n    for (let i = 0; i < prefix.length; i++) {\n        // eslint-disable-next-line functional/no-expression-statements, no-bitwise, functional/immutable-data\n        result.push(prefix.charCodeAt(i) & 31 /* Constants.asciiCaseInsensitiveBits */);\n    }\n    return result;\n};\n// prettier-ignore\nconst bech32GeneratorMostSignificantByte = [0x98, 0x79, 0xf3, 0xae, 0x1e]; // eslint-disable-line @typescript-eslint/no-magic-numbers\n// prettier-ignore\nconst bech32GeneratorRemainingBytes = [0xf2bc8e61, 0xb76d99e2, 0x3e5fb3c4, 0x2eabe2a8, 0x4f43e470]; // eslint-disable-line @typescript-eslint/no-magic-numbers\n/**\n * Perform the CashAddress polynomial modulo operation, which is based on the\n * Bech32 polynomial modulo operation, but the returned checksum is 40 bits,\n * rather than 30.\n *\n * A.K.A. `PolyMod`\n *\n * @remarks\n * Notes from C++ implementation:\n * This function will compute what 8 5-bit values to XOR into the last 8 input\n * values, in order to make the checksum 0. These 8 values are packed together\n * in a single 40-bit integer. The higher bits correspond to earlier values.\n *\n * The input is interpreted as a list of coefficients of a polynomial over F\n * = GF(32), with an implicit 1 in front. If the input is [v0,v1,v2,v3,v4],\n * that polynomial is v(x) = 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4.\n * The implicit 1 guarantees that [v0,v1,v2,...] has a distinct checksum\n * from [0,v0,v1,v2,...].\n *\n * The output is a 40-bit integer whose 5-bit groups are the coefficients of\n * the remainder of v(x) mod g(x), where g(x) is the cashaddr generator, x^8\n * + [19]*x^7 + [3]*x^6 + [25]*x^5 + [11]*x^4 + [25]*x^3 + [3]*x^2 + [19]*x\n * + [1]. g(x) is chosen in such a way that the resulting code is a BCH\n * code, guaranteeing detection of up to 4 errors within a window of 1025\n * characters. Among the various possible BCH codes, one was selected to in\n * fact guarantee detection of up to 5 errors within a window of 160\n * characters and 6 errors within a window of 126 characters. In addition,\n * the code guarantee the detection of a burst of up to 8 errors.\n *\n * Note that the coefficients are elements of GF(32), here represented as\n * decimal numbers between []. In this finite field, addition is just XOR of\n * the corresponding numbers. For example, [27] + [13] = [27 ^ 13] = [22].\n * Multiplication is more complicated, and requires treating the bits of\n * values themselves as coefficients of a polynomial over a smaller field,\n * GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example,\n * [5] * [26] = (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 +\n * a^3 + a) = a^6 + a^5 + a^4 + a = a^3 + 1 (mod a^5 + a^3 + 1) = [9].\n *\n * During the course of the loop below, `c` contains the bit-packed\n * coefficients of the polynomial constructed from just the values of v that\n * were processed so far, mod g(x). In the above example, `c` initially\n * corresponds to 1 mod (x), and after processing 2 inputs of v, it\n * corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the\n * starting value for `c`.\n *\n * @param v - Array of 5-bit integers over which the checksum is to be computed\n */\n// Derived from the `bitcore-lib-cash` implementation (does not require BigInt): https://github.com/bitpay/bitcore\nexport const cashAddressPolynomialModulo = (v) => {\n    /* eslint-disable functional/no-let, functional/no-loop-statements, functional/no-expression-statements, no-bitwise, @typescript-eslint/no-magic-numbers */\n    let mostSignificantByte = 0;\n    let lowerBytes = 1;\n    let c = 0;\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of, no-plusplus\n    for (let j = 0; j < v.length; j++) {\n        c = mostSignificantByte >>> 3;\n        mostSignificantByte &= 0x07;\n        mostSignificantByte <<= 5;\n        mostSignificantByte |= lowerBytes >>> 27;\n        lowerBytes &= 0x07ffffff;\n        lowerBytes <<= 5;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        lowerBytes ^= v[j];\n        // eslint-disable-next-line no-plusplus\n        for (let i = 0; i < bech32GeneratorMostSignificantByte.length; ++i) {\n            // eslint-disable-next-line functional/no-conditional-statements\n            if (c & (1 << i)) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                mostSignificantByte ^= bech32GeneratorMostSignificantByte[i];\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                lowerBytes ^= bech32GeneratorRemainingBytes[i];\n            }\n        }\n    }\n    lowerBytes ^= 1;\n    // eslint-disable-next-line functional/no-conditional-statements\n    if (lowerBytes < 0) {\n        lowerBytes ^= 1 << 31;\n        lowerBytes += (1 << 30) * 2;\n    }\n    return mostSignificantByte * (1 << 30) * 4 + lowerBytes;\n    /* eslint-enable functional/no-let, functional/no-loop-statements, functional/no-expression-statements, no-bitwise, @typescript-eslint/no-magic-numbers */\n};\n/**\n * Convert the checksum returned by {@link cashAddressPolynomialModulo} to an\n * array of 5-bit positive integers that can be Base32 encoded.\n * @param checksum - a 40 bit checksum returned by\n * {@link cashAddressPolynomialModulo}\n */\nexport const cashAddressChecksumToUint5Array = (checksum) => {\n    const result = [];\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements, no-plusplus\n    for (let i = 0; i < 8 /* Constants.base256WordLength */; ++i) {\n        // eslint-disable-next-line functional/no-expression-statements, no-bitwise, @typescript-eslint/no-magic-numbers, functional/immutable-data\n        result.push(checksum & 31);\n        // eslint-disable-next-line functional/no-expression-statements, @typescript-eslint/no-magic-numbers, no-param-reassign\n        checksum /= 32;\n    }\n    // eslint-disable-next-line functional/immutable-data\n    return result.reverse();\n};\n/**\n * Encode a payload as a CashAddress-like string using the CashAddress format.\n *\n * To encode a standard CashAddress, use {@link encodeCashAddress}.\n *\n * @param prefix - a valid prefix indicating the network for which to encode the\n * address – must be only lowercase letters (for standard CashAddress prefixes,\n * see {@link CashAddressNetworkPrefix})\n * @param version - a single byte indicating the version of this address (for\n * standard CashAddress versions, see {@link CashAddressVersionByte})\n * @param payload - the payload to encode\n */\nexport const encodeCashAddressFormat = (prefix, version, payload) => {\n    const checksum40BitPlaceholder = [0, 0, 0, 0, 0, 0, 0, 0];\n    const payloadContents = regroupBits({\n        bin: Uint8Array.from([version, ...payload]),\n        resultWordLength: 5 /* Constants.base32WordLength */,\n        sourceWordLength: 8 /* Constants.base256WordLength */,\n    });\n    const checksumContents = [\n        ...maskCashAddressPrefix(prefix),\n        0 /* Constants.payloadSeparator */,\n        ...payloadContents,\n        ...checksum40BitPlaceholder,\n    ];\n    const checksum = cashAddressPolynomialModulo(checksumContents);\n    const encoded = [\n        ...payloadContents,\n        ...cashAddressChecksumToUint5Array(checksum),\n    ];\n    return `${prefix}:${encodeBech32(encoded)}`;\n};\nexport var CashAddressEncodingError;\n(function (CashAddressEncodingError) {\n    CashAddressEncodingError[\"unsupportedPayloadLength\"] = \"Error encoding CashAddress: a payload of this length can not be encoded as a valid CashAddress.\";\n    CashAddressEncodingError[\"noTypeBitsValueStandardizedForP2pk\"] = \"Error encoding CashAddress: no CashAddress type bit has been standardized for P2PK locking bytecode.\";\n    CashAddressEncodingError[\"unknownLockingBytecodeType\"] = \"Error encoding CashAddress: unknown locking bytecode type.\";\n})(CashAddressEncodingError || (CashAddressEncodingError = {}));\nexport const isValidCashAddressPayloadLength = (length) => cashAddressLengthToSizeBits[length] !== undefined;\n/**\n * Encode a payload as a CashAddress. This function is similar to\n * {@link encodeCashAddress} but supports non-standard `prefix`es and `type`s.\n *\n * **Note: this function cannot prevent all implementation errors via types.**\n * The function will throw if `payload` is not a valid\n * {@link CashAddressSupportedLength}. Confirm the length of untrusted inputs\n * before providing them to this function.\n *\n * For other address standards that closely follow the CashAddress\n * specification (but have alternative version byte requirements), use\n * {@link encodeCashAddressFormat}.\n *\n * @param prefix - a valid prefix indicating the network for which to encode the\n * address (usually a {@link CashAddressNetworkPrefix}) – must be only lowercase\n * letters\n * @param typeBits - the type bit to encode in the version byte – must be a\n * number between `0` and `15`\n * @param payload - the payload to encode (for P2PKH, the public key hash; for\n * P2SH, the redeem bytecode hash)\n */\nexport const encodeCashAddressNonStandard = (prefix, typeBits, payload) => {\n    const { length } = payload;\n    if (!isValidCashAddressPayloadLength(length)) {\n        // eslint-disable-next-line functional/no-throw-statements\n        throw new Error(formatError(CashAddressEncodingError.unsupportedPayloadLength, `Payload length: ${length}.`));\n    }\n    return encodeCashAddressFormat(prefix, encodeCashAddressVersionByte(typeBits, length), payload);\n};\n/**\n * Encode a payload as a CashAddress.\n *\n * **Note: this function cannot prevent all implementation errors via types.**\n * The function will throw if `payload` is not a valid\n * {@link CashAddressSupportedLength}. Confirm the length of untrusted inputs\n * before providing them to this function.\n *\n * To encode a CashAddress with a custom/unknown prefix or type bit, see\n * {@link encodeCashAddressNonStandard}. For other address standards that\n * closely follow the CashAddress specification (but have alternative version\n * byte requirements), use {@link encodeCashAddressFormat}.\n *\n * @param prefix - the network for which to encode the address\n * (a {@link CashAddressNetworkPrefix})\n * @param type - the address type (a {@link CashAddressType})\n * @param payload - the payload to encode – for P2PKH, the public key hash; for\n * P2SH, the redeem bytecode hash\n */\nexport const encodeCashAddress = (prefix, type, payload) => encodeCashAddressNonStandard(prefix, cashAddressTypeToTypeBits[type], payload);\nexport var CashAddressDecodingError;\n(function (CashAddressDecodingError) {\n    CashAddressDecodingError[\"improperPadding\"] = \"Error decoding CashAddress: the payload is improperly padded.\";\n    CashAddressDecodingError[\"invalidCharacters\"] = \"Error decoding CashAddress: the payload contains non-bech32 characters.\";\n    CashAddressDecodingError[\"invalidChecksum\"] = \"Error decoding CashAddress: invalid checksum - please review the address for errors.\";\n    CashAddressDecodingError[\"invalidFormat\"] = \"Error decoding CashAddress: CashAddresses should be of the form \\\"prefix:payload\\\".\";\n    CashAddressDecodingError[\"mismatchedPayloadLength\"] = \"Error decoding CashAddress: mismatched payload length for specified address version.\";\n    CashAddressDecodingError[\"reservedByte\"] = \"Error decoding CashAddress: unknown CashAddress version, reserved byte set.\";\n    CashAddressDecodingError[\"unknownAddressType\"] = \"Error decoding CashAddress: unknown CashAddress type.\";\n})(CashAddressDecodingError || (CashAddressDecodingError = {}));\n/**\n * Decode and validate a string using the CashAddress format. This is more\n * lenient than {@link decodeCashAddress}, which also validates the contents of\n * the version byte.\n *\n * Note, this method requires `address` to include a network prefix. To\n * decode a string with an unknown prefix, try\n * {@link decodeCashAddressFormatWithoutPrefix}.\n *\n * @param address - the CashAddress-like string to decode\n */\n// eslint-disable-next-line complexity\nexport const decodeCashAddressFormat = (address) => {\n    const parts = address.toLowerCase().split(':');\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    if (parts.length !== 2 || parts[0] === '' || parts[1] === '') {\n        return CashAddressDecodingError.invalidFormat;\n    }\n    const [prefix, payload] = parts;\n    if (!isBech32CharacterSet(payload)) {\n        return CashAddressDecodingError.invalidCharacters;\n    }\n    const decodedPayload = decodeBech32(payload);\n    const polynomial = [\n        ...maskCashAddressPrefix(prefix),\n        0 /* Constants.payloadSeparator */,\n        ...decodedPayload,\n    ];\n    if (cashAddressPolynomialModulo(polynomial) !== 0) {\n        return CashAddressDecodingError.invalidChecksum;\n    }\n    const checksum40BitPlaceholderLength = 8;\n    const payloadContents = regroupBits({\n        allowPadding: false,\n        bin: decodedPayload.slice(0, -checksum40BitPlaceholderLength),\n        resultWordLength: 8 /* Constants.base256WordLength */,\n        sourceWordLength: 5 /* Constants.base32WordLength */,\n    });\n    if (typeof payloadContents === 'string') {\n        return CashAddressDecodingError.improperPadding;\n    }\n    const [version, ...contents] = payloadContents;\n    const result = Uint8Array.from(contents);\n    return { payload: result, prefix, version };\n};\n/**\n * Decode and validate a CashAddress, strictly checking the version byte\n * according to the CashAddress specification. This is important for error\n * detection in CashAddresses.\n *\n * This function is similar to {@link decodeCashAddress} but supports\n * non-standard `type`s.\n *\n * For other address-like standards that closely follow the CashAddress\n * specification (but have alternative version byte requirements), use\n * {@link decodeCashAddressFormat}.\n *\n * Note, this method requires that CashAddresses include a network prefix. To\n * decode an address with an unknown prefix, try\n * {@link decodeCashAddressFormatWithoutPrefix}.\n *\n * @param address - the CashAddress to decode\n */\nexport const decodeCashAddressNonStandard = (address) => {\n    const decoded = decodeCashAddressFormat(address);\n    if (typeof decoded === 'string') {\n        return decoded;\n    }\n    const info = decodeCashAddressVersionByte(decoded.version);\n    if (info === CashAddressVersionByteDecodingError.reservedBitSet) {\n        return CashAddressDecodingError.reservedByte;\n    }\n    if (decoded.payload.length !== info.length) {\n        return CashAddressDecodingError.mismatchedPayloadLength;\n    }\n    return {\n        payload: decoded.payload,\n        prefix: decoded.prefix,\n        typeBits: info.typeBits,\n    };\n};\n/**\n * Decode and validate a CashAddress, strictly checking the version byte\n * according to the CashAddress specification. This is important for error\n * detection in CashAddresses.\n *\n * To decode CashAddresses with non-standard `type`s,\n * see {@link decodeCashAddressNonStandard}.\n *\n * For other address-like standards that closely follow the CashAddress\n * specification (but have alternative version byte requirements), use\n * {@link decodeCashAddressFormat}.\n *\n * Note, this method requires that CashAddresses include a network prefix. To\n * decode an address with an unknown prefix, try\n * {@link decodeCashAddressFormatWithoutPrefix}.\n *\n * @param address - the CashAddress to decode\n */\nexport const decodeCashAddress = (address) => {\n    const decoded = decodeCashAddressNonStandard(address);\n    if (typeof decoded === 'string') {\n        return decoded;\n    }\n    const type = cashAddressTypeBitsToType[decoded.typeBits];\n    if (type === undefined) {\n        return `${CashAddressDecodingError.unknownAddressType} Type bit value: ${decoded.typeBits}.`;\n    }\n    return {\n        payload: decoded.payload,\n        prefix: decoded.prefix,\n        type,\n    };\n};\n/**\n * Attempt to decode and validate a CashAddress against a list of possible\n * prefixes. If the correct prefix is known, use {@link decodeCashAddress}.\n *\n * @param address - the CashAddress to decode\n * @param possiblePrefixes - the network prefixes to try\n */\n// decodeCashAddressWithoutPrefix\nexport const decodeCashAddressFormatWithoutPrefix = (address, possiblePrefixes = [\n    CashAddressNetworkPrefix.mainnet,\n    CashAddressNetworkPrefix.testnet,\n    CashAddressNetworkPrefix.regtest,\n]) => {\n    // eslint-disable-next-line functional/no-loop-statements\n    for (const prefix of possiblePrefixes) {\n        const attempt = decodeCashAddressFormat(`${prefix}:${address}`);\n        if (attempt !== CashAddressDecodingError.invalidChecksum) {\n            return attempt;\n        }\n    }\n    return CashAddressDecodingError.invalidChecksum;\n};\n/**\n * Convert a CashAddress polynomial to CashAddress string format.\n *\n * @remarks\n * CashAddress polynomials take the form:\n *\n * `[lowest 5 bits of each prefix character] 0 [payload + checksum]`\n *\n * This method remaps the 5-bit integers in the prefix location to the matching\n * ASCII lowercase characters, replaces the separator with `:`, and then Bech32\n * encodes the remaining payload and checksum.\n *\n * @param polynomial - an array of 5-bit integers representing the terms of a\n * CashAddress polynomial\n */\nexport const cashAddressPolynomialToCashAddress = (polynomial) => {\n    const separatorPosition = polynomial.indexOf(0);\n    const prefix = polynomial\n        .slice(0, separatorPosition)\n        .map((integer) => String.fromCharCode(96 /* Constants.asciiLowerCaseStart */ + integer))\n        .join('');\n    const contents = encodeBech32(polynomial.slice(separatorPosition + 1));\n    return `${prefix}:${contents}`;\n};\nexport var CashAddressCorrectionError;\n(function (CashAddressCorrectionError) {\n    CashAddressCorrectionError[\"tooManyErrors\"] = \"This address has more than 2 errors and cannot be corrected.\";\n})(CashAddressCorrectionError || (CashAddressCorrectionError = {}));\n/**\n * Attempt to correct up to 2 errors in a CashAddress. The CashAddress must be\n * properly formed (include a prefix and only contain Bech32 characters).\n *\n * ## **Improper use of this method carries the risk of lost funds.**\n *\n * It is strongly advised that this method only be used under explicit user\n * control. With enough errors, this method is likely to find a plausible\n * correction for any address (but for which no private key exists). This is\n * effectively equivalent to burning the funds.\n *\n * Only 2 substitution errors can be corrected (or a single swap) – deletions\n * and insertions (errors that shift many other characters and change the\n * length of the payload) can never be safely corrected and will produce an\n * error.\n *\n * Errors can be corrected in both the prefix and the payload, but attempting to\n * correct errors in the prefix prior to this method can improve results, e.g.\n * for `bchtest:qq2azmyyv6dtgczexyalqar70q036yund53jvfde0x`, the string\n * `bchtest:qq2azmyyv6dtgczexyalqar70q036yund53jvfdecc` can be corrected, while\n * `typo:qq2azmyyv6dtgczexyalqar70q036yund53jvfdecc` can not.\n *\n * @param address - the CashAddress on which to attempt error correction\n */\n// Derived from: https://github.com/deadalnix/cashaddressed\n// eslint-disable-next-line complexity\nexport const attemptCashAddressFormatErrorCorrection = (address) => {\n    const parts = address.toLowerCase().split(':');\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    if (parts.length !== 2 || parts[0] === '' || parts[1] === '') {\n        return CashAddressDecodingError.invalidFormat;\n    }\n    const [prefix, payload] = parts;\n    if (!isBech32CharacterSet(payload)) {\n        return CashAddressDecodingError.invalidCharacters;\n    }\n    const decodedPayload = decodeBech32(payload);\n    const polynomial = [...maskCashAddressPrefix(prefix), 0, ...decodedPayload];\n    const originalChecksum = cashAddressPolynomialModulo(polynomial);\n    if (originalChecksum === 0) {\n        return {\n            address: cashAddressPolynomialToCashAddress(polynomial),\n            corrections: [],\n        };\n    }\n    const syndromes = {};\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements, no-plusplus\n    for (let term = 0; term < polynomial.length; term++) {\n        // eslint-disable-next-line functional/no-loop-statements\n        for (\n        // eslint-disable-next-line functional/no-let\n        let errorVector = 1; errorVector < 32 /* Constants.finiteFieldOrder */; \n        // eslint-disable-next-line no-plusplus\n        errorVector++) {\n            // eslint-disable-next-line functional/no-expression-statements, no-bitwise, functional/immutable-data\n            polynomial[term] ^= errorVector;\n            const correct = cashAddressPolynomialModulo(polynomial);\n            if (correct === 0) {\n                return {\n                    address: cashAddressPolynomialToCashAddress(polynomial),\n                    corrections: [term],\n                };\n            }\n            // eslint-disable-next-line no-bitwise\n            const s0 = (BigInt(correct) ^ BigInt(originalChecksum)).toString();\n            // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n            syndromes[s0] = term * 32 /* Constants.finiteFieldOrder */ + errorVector;\n            // eslint-disable-next-line functional/no-expression-statements, no-bitwise, functional/immutable-data\n            polynomial[term] ^= errorVector;\n        }\n    }\n    // eslint-disable-next-line functional/no-loop-statements\n    for (const [s0, pe] of Object.entries(syndromes)) {\n        // eslint-disable-next-line no-bitwise\n        const s1Location = (BigInt(s0) ^ BigInt(originalChecksum)).toString();\n        const s1 = syndromes[s1Location];\n        if (s1 !== undefined) {\n            const correctionIndex1 = Math.trunc(pe / 32 /* Constants.finiteFieldOrder */);\n            const correctionIndex2 = Math.trunc(s1 / 32 /* Constants.finiteFieldOrder */);\n            // eslint-disable-next-line functional/no-expression-statements, no-bitwise, functional/immutable-data\n            polynomial[correctionIndex1] ^= pe % 32 /* Constants.finiteFieldOrder */;\n            // eslint-disable-next-line functional/no-expression-statements, no-bitwise, functional/immutable-data\n            polynomial[correctionIndex2] ^= s1 % 32 /* Constants.finiteFieldOrder */;\n            return {\n                address: cashAddressPolynomialToCashAddress(polynomial),\n                corrections: [correctionIndex1, correctionIndex2].sort((a, b) => a - b),\n            };\n        }\n    }\n    return CashAddressCorrectionError.tooManyErrors;\n};\n//# sourceMappingURL=cash-address.js.map","import { sha256 as internalSha256 } from '../crypto/crypto.js';\nimport { formatError, unknownValue } from '../format/format.js';\nimport { Base58AddressFormatVersion, decodeBase58Address, encodeBase58AddressFormat, } from './base58-address.js';\nimport { CashAddressEncodingError, CashAddressType, decodeCashAddress, encodeCashAddress, } from './cash-address.js';\n/**\n * The most common address types used on Bitcoin Cash and similar networks. Each\n * address type represents a commonly used locking bytecode pattern.\n *\n * @remarks\n * Addresses are strings that encode information about the network and\n * `lockingBytecode` to which a transaction output can pay.\n *\n * Several address formats exist – `Base58Address` was the format used by the\n * original satoshi client, and is still in use on several active chains (see\n * {@link encodeBase58Address}). On Bitcoin Cash, the `CashAddress` standard is\n * most common (See {@link encodeCashAddress}).\n */\nexport var LockingBytecodeType;\n(function (LockingBytecodeType) {\n    /**\n     * Pay to Public Key (P2PK). This address type is uncommon, and primarily\n     * occurs in early blocks because the original satoshi implementation mined\n     * rewards to P2PK addresses.\n     *\n     * There are no standardized address formats for representing a P2PK address.\n     * Instead, most applications use the `AddressType.p2pkh` format.\n     */\n    LockingBytecodeType[\"p2pk\"] = \"P2PK\";\n    /**\n     * Pay to Public Key Hash (P2PKH). The most common address type. P2PKH\n     * addresses lock funds using a single private key.\n     */\n    LockingBytecodeType[\"p2pkh\"] = \"P2PKH\";\n    /**\n     * 20-byte Pay to Script Hash (P2SH20). An address type that locks funds to\n     * the 20-byte hash of a script provided in the spending transaction. See\n     * BIPs 13 and 16 for details.\n     */\n    LockingBytecodeType[\"p2sh20\"] = \"P2SH20\";\n    /**\n     * 32-byte Pay to Script Hash (P2SH32). An address type that locks funds to\n     * the 32-byte hash of a script provided in the spending transaction.\n     */\n    LockingBytecodeType[\"p2sh32\"] = \"P2SH32\";\n})(LockingBytecodeType || (LockingBytecodeType = {}));\nexport const isPayToPublicKeyUncompressed = (lockingBytecode) => lockingBytecode.length === 67 /* PayToPublicKeyUncompressed.length */ &&\n    lockingBytecode[0] === 65 /* Opcodes.OP_PUSHBYTES_65 */ &&\n    lockingBytecode[66 /* PayToPublicKeyUncompressed.lastElement */] ===\n        172 /* Opcodes.OP_CHECKSIG */;\nexport const isPayToPublicKeyCompressed = (lockingBytecode) => lockingBytecode.length === 35 /* PayToPublicKeyCompressed.length */ &&\n    lockingBytecode[0] === 33 /* Opcodes.OP_PUSHBYTES_33 */ &&\n    lockingBytecode[34 /* PayToPublicKeyCompressed.lastElement */] === 172 /* Opcodes.OP_CHECKSIG */;\nexport const isPayToPublicKey = (lockingBytecode) => isPayToPublicKeyCompressed(lockingBytecode) ||\n    isPayToPublicKeyUncompressed(lockingBytecode);\n// eslint-disable-next-line complexity\nexport const isPayToPublicKeyHash = (lockingBytecode) => lockingBytecode.length === 25 /* PayToPublicKeyHash.length */ &&\n    lockingBytecode[0] === 118 /* Opcodes.OP_DUP */ &&\n    lockingBytecode[1] === 169 /* Opcodes.OP_HASH160 */ &&\n    lockingBytecode[2] === 20 /* Opcodes.OP_PUSHBYTES_20 */ &&\n    lockingBytecode[23] === 136 /* Opcodes.OP_EQUALVERIFY */ &&\n    lockingBytecode[24] === 172 /* Opcodes.OP_CHECKSIG */;\nexport const isPayToScriptHash20 = (lockingBytecode) => lockingBytecode.length === 23 /* PayToScriptHash20.length */ &&\n    lockingBytecode[0] === 169 /* Opcodes.OP_HASH160 */ &&\n    lockingBytecode[1] === 20 /* Opcodes.OP_PUSHBYTES_20 */ &&\n    lockingBytecode[22 /* PayToScriptHash20.lastElement */] === 135 /* Opcodes.OP_EQUAL */;\nexport const isPayToScriptHash32 = (lockingBytecode) => lockingBytecode.length === 35 /* PayToScriptHash32.length */ &&\n    lockingBytecode[0] === 170 /* Opcodes.OP_HASH256 */ &&\n    lockingBytecode[1] === 32 /* Opcodes.OP_PUSHBYTES_32 */ &&\n    lockingBytecode[34 /* PayToScriptHash32.lastElement */] === 135 /* Opcodes.OP_EQUAL */;\n/**\n * Attempt to match a lockingBytecode to a standard address type for use in\n * address encoding. (See {@link LockingBytecodeType} for details.)\n *\n * For a locking bytecode matching the Pay to Public Key Hash (P2PKH) pattern,\n * the returned `type` is {@link LockingBytecodeType.p2pkh} and `payload` is the\n * `HASH160` of the public key.\n *\n * For a locking bytecode matching the 20-byte Pay to Script Hash (P2SH20)\n * pattern, the returned `type` is {@link LockingBytecodeType.p2sh20} and\n * `payload` is the `HASH160` of the redeeming bytecode, A.K.A. \"redeem\n * script hash\".\n *\n * For a locking bytecode matching the Pay to Public Key (P2PK) pattern, the\n * returned `type` is {@link LockingBytecodeType.p2pk} and `payload` is the full\n * public key.\n *\n * Any other locking bytecode will return a `type` of\n * {@link LockingBytecodeType.unknown} and a payload of the\n * unmodified `bytecode`.\n *\n * @param bytecode - the locking bytecode to match\n */\n// eslint-disable-next-line complexity\nexport const lockingBytecodeToAddressContents = (bytecode) => {\n    if (isPayToPublicKeyHash(bytecode)) {\n        return {\n            payload: bytecode.slice(3 /* AddressPayload.p2pkhStart */, 23 /* AddressPayload.p2pkhEnd */),\n            type: LockingBytecodeType.p2pkh,\n        };\n    }\n    if (isPayToScriptHash20(bytecode)) {\n        return {\n            payload: bytecode.slice(2 /* AddressPayload.p2sh20Start */, 22 /* AddressPayload.p2sh20End */),\n            type: LockingBytecodeType.p2sh20,\n        };\n    }\n    if (isPayToScriptHash32(bytecode)) {\n        return {\n            payload: bytecode.slice(2 /* AddressPayload.p2sh32Start */, 34 /* AddressPayload.p2sh32End */),\n            type: LockingBytecodeType.p2sh32,\n        };\n    }\n    if (isPayToPublicKeyUncompressed(bytecode)) {\n        return {\n            payload: bytecode.slice(1 /* AddressPayload.p2pkUncompressedStart */, 66 /* AddressPayload.p2pkUncompressedEnd */),\n            type: LockingBytecodeType.p2pk,\n        };\n    }\n    if (isPayToPublicKeyCompressed(bytecode)) {\n        return {\n            payload: bytecode.slice(1 /* AddressPayload.p2pkCompressedStart */, 34 /* AddressPayload.p2pkCompressedEnd */),\n            type: LockingBytecodeType.p2pk,\n        };\n    }\n    return { payload: bytecode.slice(), type: 'unknown' };\n};\n/**\n * Given the 20-byte {@link hash160} of a compressed public key, return a P2PKH\n * locking bytecode:\n * `OP_DUP OP_HASH160 OP_PUSHBYTES_20 publicKeyHash OP_EQUALVERIFY OP_CHECKSIG`.\n *\n * This method does not validate `publicKeyHash` in any way; inputs of incorrect\n * lengths will produce incorrect results.\n *\n * @param publicKeyHash - the 20-byte hash of the compressed public key\n * @returns\n */\nexport const encodeLockingBytecodeP2pkh = (publicKeyHash) => Uint8Array.from([\n    118 /* Opcodes.OP_DUP */,\n    169 /* Opcodes.OP_HASH160 */,\n    20 /* Opcodes.OP_PUSHBYTES_20 */,\n    ...publicKeyHash,\n    136 /* Opcodes.OP_EQUALVERIFY */,\n    172 /* Opcodes.OP_CHECKSIG */,\n]);\n/**\n * Given the 20-byte {@link hash160} of a P2SH20 redeem bytecode, encode a\n * P2SH20 locking bytecode:\n * `OP_HASH160 OP_PUSHBYTES_20 redeemBytecodeHash OP_EQUAL`.\n *\n * This method does not validate `p2sh20Hash` in any way; inputs of incorrect\n * lengths will produce incorrect results.\n *\n * @param p2sh20Hash - the 20-byte, p2sh20 redeem bytecode hash\n */\nexport const encodeLockingBytecodeP2sh20 = (p2sh20Hash) => Uint8Array.from([\n    169 /* Opcodes.OP_HASH160 */,\n    20 /* Opcodes.OP_PUSHBYTES_20 */,\n    ...p2sh20Hash,\n    135 /* Opcodes.OP_EQUAL */,\n]);\n/**\n * Given the 32-byte {@link hash256} of a P2SH32 redeem bytecode, encode a\n * P2SH32 locking bytecode:\n * `OP_HASH256 OP_PUSHBYTES_32 redeemBytecodeHash OP_EQUAL`.\n *\n * This method does not validate `p2sh32Hash` in any way; inputs of incorrect\n * lengths will produce incorrect results.\n *\n * @param p2sh32Hash - the 32-byte, p2sh32 redeem bytecode hash\n */\nexport const encodeLockingBytecodeP2sh32 = (p2sh32Hash) => Uint8Array.from([\n    170 /* Opcodes.OP_HASH256 */,\n    32 /* Opcodes.OP_PUSHBYTES_32 */,\n    ...p2sh32Hash,\n    135 /* Opcodes.OP_EQUAL */,\n]);\n/**\n * Given a 33-byte compressed or 65-byte uncompressed public key, encode a P2PK\n * locking bytecode: `OP_PUSHBYTES_33 publicKey OP_CHECKSIG` or\n * `OP_PUSHBYTES_65 publicKey OP_CHECKSIG`.\n *\n * This method does not validate `publicKey` in any way; inputs of incorrect\n * lengths will produce incorrect results.\n *\n * @param publicKey - the 33-byte or 65-byte public key\n */\nexport const encodeLockingBytecodeP2pk = (publicKey) => publicKey.length === 33 /* AddressPayload.compressedPublicKeyLength */\n    ? Uint8Array.from([\n        33 /* Opcodes.OP_PUSHBYTES_33 */,\n        ...publicKey,\n        172 /* Opcodes.OP_CHECKSIG */,\n    ])\n    : Uint8Array.from([\n        65 /* Opcodes.OP_PUSHBYTES_65 */,\n        ...publicKey,\n        172 /* Opcodes.OP_CHECKSIG */,\n    ]);\n/**\n * Get the locking bytecode for a {@link KnownAddressTypeContents}. See\n * {@link lockingBytecodeToAddressContents} for details.\n *\n * @param addressContents - the `AddressContents` to encode\n */\nexport const addressContentsToLockingBytecode = ({ payload, type, }) => {\n    if (type === LockingBytecodeType.p2pkh) {\n        return encodeLockingBytecodeP2pkh(payload);\n    }\n    if (type === LockingBytecodeType.p2sh20) {\n        return encodeLockingBytecodeP2sh20(payload);\n    }\n    if (type === LockingBytecodeType.p2sh32) {\n        return encodeLockingBytecodeP2sh32(payload);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (type === LockingBytecodeType.p2pk) {\n        return encodeLockingBytecodeP2pk(payload);\n    }\n    return unknownValue(type, `Unrecognized addressContents type: ${type}`);\n};\n/**\n * Encode a locking bytecode as a CashAddress given a network prefix.\n *\n * If `bytecode` matches a standard pattern, it is encoded using the proper\n * address type and returned as a valid CashAddress (string).\n *\n * If `bytecode` cannot be encoded as an address (i.e. because the pattern is\n * not standard), the resulting {@link AddressContents} is returned.\n *\n * @param bytecode - the locking bytecode to encode\n * @param prefix - the network prefix to use, e.g. `bitcoincash`, `bchtest`, or\n * `bchreg`, defaults to `bitcoincash`\n * @param options - an object describing address options, defaults to\n * `{ tokenSupport: false }`\n */\n// eslint-disable-next-line complexity\nexport const lockingBytecodeToCashAddress = (bytecode, prefix = 'bitcoincash', options = { tokenSupport: false }) => {\n    const contents = lockingBytecodeToAddressContents(bytecode);\n    if (contents.type === LockingBytecodeType.p2pkh) {\n        return options.tokenSupport\n            ? encodeCashAddress(prefix, CashAddressType.p2pkhWithTokens, contents.payload)\n            : encodeCashAddress(prefix, CashAddressType.p2pkh, contents.payload);\n    }\n    if (contents.type === LockingBytecodeType.p2sh20 ||\n        contents.type === LockingBytecodeType.p2sh32) {\n        return options.tokenSupport\n            ? encodeCashAddress(prefix, CashAddressType.p2shWithTokens, contents.payload)\n            : encodeCashAddress(prefix, CashAddressType.p2sh, contents.payload);\n    }\n    if (contents.type === 'P2PK') {\n        return {\n            error: CashAddressEncodingError.noTypeBitsValueStandardizedForP2pk,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (contents.type === 'unknown') {\n        return { error: CashAddressEncodingError.unknownLockingBytecodeType };\n    }\n    return unknownValue(contents.type, `Unrecognized locking bytecode type: ${contents.type}`);\n};\nexport var LockingBytecodeGenerationError;\n(function (LockingBytecodeGenerationError) {\n    LockingBytecodeGenerationError[\"unsupportedPayloadLength\"] = \"Error generating locking bytecode: no standard locking bytecode patterns support a payload of this length.\";\n})(LockingBytecodeGenerationError || (LockingBytecodeGenerationError = {}));\n/**\n * Convert a CashAddress to its respective locking bytecode.\n *\n * This method returns the locking bytecode and network prefix. If an error\n * occurs, an error message is returned as a string.\n *\n * @param address - the CashAddress to convert\n */\n// eslint-disable-next-line complexity\nexport const cashAddressToLockingBytecode = (address) => {\n    const decoded = decodeCashAddress(address);\n    if (typeof decoded === 'string')\n        return decoded;\n    if (decoded.payload.length !== 20 /* AddressPayload.p2sh20Length */ &&\n        decoded.payload.length !== 32 /* AddressPayload.p2sh32Length */) {\n        return formatError(LockingBytecodeGenerationError.unsupportedPayloadLength, `Payload length: ${decoded.payload.length}`);\n    }\n    if (decoded.type === CashAddressType.p2pkh ||\n        decoded.type === CashAddressType.p2pkhWithTokens) {\n        return {\n            bytecode: addressContentsToLockingBytecode({\n                payload: decoded.payload,\n                type: LockingBytecodeType.p2pkh,\n            }),\n            options: {\n                tokenSupport: decoded.type === CashAddressType.p2pkhWithTokens,\n            },\n            prefix: decoded.prefix,\n        };\n    }\n    if (decoded.type === CashAddressType.p2sh ||\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        decoded.type === CashAddressType.p2shWithTokens) {\n        return {\n            bytecode: addressContentsToLockingBytecode({\n                payload: decoded.payload,\n                type: decoded.payload.length === 32 /* AddressPayload.p2sh32Length */\n                    ? LockingBytecodeType.p2sh32\n                    : LockingBytecodeType.p2sh20,\n            }),\n            options: {\n                tokenSupport: decoded.type === CashAddressType.p2shWithTokens,\n            },\n            prefix: decoded.prefix,\n        };\n    }\n    return unknownValue(decoded.type, `Unrecognized address type: ${decoded.type}`);\n};\n/**\n * Encode a locking bytecode as a Base58Address for a given network.\n *\n * If `bytecode` matches a standard pattern, it is encoded using the proper\n * address type and returned as a valid Base58Address (string).\n *\n * If `bytecode` cannot be encoded as an address (i.e. because the pattern is\n * not standard), the resulting {@link AddressContents} is returned.\n *\n * Note, Base58Addresses cannot accept tokens; to accept tokens,\n * use {@link lockingBytecodeToCashAddress} with `options.tokenSupport` set\n * to `true`.\n *\n * @param bytecode - the locking bytecode to encode\n * @param network - the network for which to encode the address (`mainnet`,\n * `testnet`, or 'copayBCH'), defaults to `mainnet`\n * @param sha256 - an implementation of sha256 (defaults to the internal WASM\n * implementation)\n */\nexport const lockingBytecodeToBase58Address = (bytecode, network = 'mainnet', sha256 = internalSha256) => {\n    const contents = lockingBytecodeToAddressContents(bytecode);\n    if (contents.type === LockingBytecodeType.p2pkh) {\n        return encodeBase58AddressFormat({\n            copayBCH: Base58AddressFormatVersion.p2pkhCopayBCH,\n            mainnet: Base58AddressFormatVersion.p2pkh,\n            testnet: Base58AddressFormatVersion.p2pkhTestnet,\n        }[network], contents.payload, sha256);\n    }\n    if (contents.type === LockingBytecodeType.p2sh20) {\n        return encodeBase58AddressFormat({\n            copayBCH: Base58AddressFormatVersion.p2sh20CopayBCH,\n            mainnet: Base58AddressFormatVersion.p2sh20,\n            testnet: Base58AddressFormatVersion.p2sh20Testnet,\n        }[network], contents.payload, sha256);\n    }\n    return contents;\n};\n/**\n * Convert a Base58Address to its respective locking bytecode.\n *\n * This method returns the locking bytecode and network version. If an error\n * occurs, an error message is returned as a string.\n *\n * @param address - the CashAddress to convert\n */\nexport const base58AddressToLockingBytecode = (address, sha256 = internalSha256) => {\n    const decoded = decodeBase58Address(address, sha256);\n    if (typeof decoded === 'string')\n        return decoded;\n    return {\n        bytecode: addressContentsToLockingBytecode({\n            payload: decoded.payload,\n            type: [\n                Base58AddressFormatVersion.p2pkh,\n                Base58AddressFormatVersion.p2pkhCopayBCH,\n                Base58AddressFormatVersion.p2pkhTestnet,\n            ].includes(decoded.version)\n                ? LockingBytecodeType.p2pkh\n                : LockingBytecodeType.p2sh20,\n        }),\n        version: decoded.version,\n    };\n};\n//# sourceMappingURL=locking-bytecode.js.map","import { binToBigIntUint64LE, binToNumberUint32LE, formatError, readCompactUintMinimal, } from '../format/format.js';\nexport var ReadBytesError;\n(function (ReadBytesError) {\n    ReadBytesError[\"insufficientLength\"] = \"Error reading bytes: insufficient length.\";\n})(ReadBytesError || (ReadBytesError = {}));\n/**\n * Returns a function that reads the requested number of bytes from a\n * {@link ReadPosition}, returning either an error message (as a string) or an\n * object containing the `Uint8Array` and the next {@link ReadPosition}.\n *\n * @param length - the number of bytes to read\n */\nexport const readBytes = (length) => (\n/**\n * the {@link ReadPosition} at which to start reading the bytes.\n */\nposition) => {\n    const nextPosition = {\n        bin: position.bin,\n        index: position.index + length,\n    };\n    const result = position.bin.slice(position.index, nextPosition.index);\n    if (result.length !== length) {\n        return formatError(ReadBytesError.insufficientLength, `Bytes requested: ${length}; remaining bytes: ${result.length}`);\n    }\n    return { position: nextPosition, result };\n};\nexport var ReadUint32LEError;\n(function (ReadUint32LEError) {\n    ReadUint32LEError[\"insufficientBytes\"] = \"Error reading Uint32LE: requires 4 bytes.\";\n})(ReadUint32LEError || (ReadUint32LEError = {}));\n/**\n * Read a 4-byte, Uint32LE from the provided {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * number and the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading\n */\nexport const readUint32LE = (position) => {\n    const nextPosition = {\n        bin: position.bin,\n        index: position.index + 4 /* ReadConstants.bytesPerUint32 */,\n    };\n    const uint32LEBin = position.bin.subarray(position.index, nextPosition.index);\n    if (uint32LEBin.length !== 4 /* ReadConstants.bytesPerUint32 */) {\n        return formatError(ReadUint32LEError.insufficientBytes, `Remaining bytes: ${uint32LEBin.length}`);\n    }\n    const result = binToNumberUint32LE(uint32LEBin);\n    return { position: nextPosition, result };\n};\nexport var ReadUint64LEError;\n(function (ReadUint64LEError) {\n    ReadUint64LEError[\"insufficientBytes\"] = \"Error reading Uint64LE: requires 8 bytes.\";\n})(ReadUint64LEError || (ReadUint64LEError = {}));\n/**\n * Read {@link Output.valueSatoshis} from the provided {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * {@link Output.valueSatoshis} and the next {@link ReadPosition}.\n * @param position - the {@link ReadPosition} at which to start reading\n * {@link Output.valueSatoshis}\n */\nexport const readUint64LE = (position) => {\n    const nextPosition = {\n        bin: position.bin,\n        index: position.index + 8 /* ReadConstants.bytesPerUint64 */,\n    };\n    const uint64LEBin = position.bin.subarray(position.index, nextPosition.index);\n    if (uint64LEBin.length !== 8 /* ReadConstants.bytesPerUint64 */) {\n        return formatError(ReadUint64LEError.insufficientBytes, `Remaining bytes: ${uint64LEBin.length}`);\n    }\n    const result = binToBigIntUint64LE(uint64LEBin);\n    return { position: nextPosition, result };\n};\nexport var CompactUintPrefixedBinError;\n(function (CompactUintPrefixedBinError) {\n    CompactUintPrefixedBinError[\"invalidCompactUint\"] = \"Error reading CompactUint-prefixed bin: invalid CompactUint.\";\n    CompactUintPrefixedBinError[\"insufficientBytes\"] = \"Error reading CompactUint-prefixed bin: insufficient bytes.\";\n})(CompactUintPrefixedBinError || (CompactUintPrefixedBinError = {}));\n/**\n * Read a bin (`Uint8Array`) that is prefixed by a minimally-encoded\n * `CompactUint` starting at the provided {@link ReadPosition}, returning either\n * an error message (as a string) or an object containing the `Uint8Array` and\n * the next {@link ReadPosition}. (In the transaction format,\n * `CompactUint`-prefixes are used to indicate the length of unlocking bytecode,\n * locking bytecode, and non-fungible token commitments.)\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * `CompactUint`-prefixed bin (`Uint8Array`)\n */\nexport const readCompactUintPrefixedBin = (position) => {\n    const read = readCompactUintMinimal(position);\n    if (typeof read === 'string') {\n        return formatError(CompactUintPrefixedBinError.invalidCompactUint, read);\n    }\n    const { result, position: p2 } = read;\n    const length = Number(result);\n    const nextPosition = { bin: position.bin, index: p2.index + length };\n    const contents = position.bin.slice(p2.index, nextPosition.index);\n    if (contents.length !== length) {\n        return formatError(CompactUintPrefixedBinError.insufficientBytes, `Required bytes: ${length}, remaining bytes: ${contents.length}`);\n    }\n    return { position: nextPosition, result: contents };\n};\n/**\n * Read the remaining bytes from the provided {@link ReadPosition}, returning\n * an object containing the `Uint8Array` and the next {@link ReadPosition}\n * (with `index === bin.length`).\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * remaining bytes\n */\nexport const readRemainingBytes = (position) => {\n    const nextPosition = {\n        bin: position.bin,\n        index: position.bin.length,\n    };\n    const result = position.bin.subarray(position.index, nextPosition.index);\n    return { position: nextPosition, result };\n};\n//# sourceMappingURL=read-components.js.map","/**\n * The capability assigned to a particular non-fungible token.\n */\nexport var NonFungibleTokenCapability;\n(function (NonFungibleTokenCapability) {\n    /**\n     * No capability, i.e. the token is an **immutable token**.\n     */\n    NonFungibleTokenCapability[\"none\"] = \"none\";\n    /**\n     * The mutable capability (`0x01`), i.e. the token is a **mutable token**.\n     */\n    NonFungibleTokenCapability[\"mutable\"] = \"mutable\";\n    /**\n     * The minting capability (`0x02`), i.e. the token is a **minting token**.\n     */\n    NonFungibleTokenCapability[\"minting\"] = \"minting\";\n})(NonFungibleTokenCapability || (NonFungibleTokenCapability = {}));\n/**\n * The maximum uint64 value – an impossibly large, intentionally invalid value\n * for `valueSatoshis`. See {@link Transaction.valueSatoshis} for details.\n */\n// prettier-ignore\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nexport const excessiveSatoshis = Uint8Array.from([255, 255, 255, 255, 255, 255, 255, 255]);\n//# sourceMappingURL=transaction-types.js.map","import { hash256, sha256 as internalSha256 } from '../crypto/crypto.js';\nimport { bigIntToCompactUint, binToHex, flattenBinArray, formatError, numberToBinUint32LE, readCompactUintMinimal, readItemCount, readMultiple, valueSatoshisToBin, } from '../format/format.js';\nimport { readBytes, readCompactUintPrefixedBin, readRemainingBytes, readUint32LE, readUint64LE, } from './read-components.js';\nimport { NonFungibleTokenCapability } from './transaction-types.js';\n/**\n * Encode a single input for inclusion in an encoded transaction.\n *\n * @param input - the input to encode\n */\nexport const encodeTransactionInput = (input) => flattenBinArray([\n    input.outpointTransactionHash.slice().reverse(),\n    numberToBinUint32LE(input.outpointIndex),\n    bigIntToCompactUint(BigInt(input.unlockingBytecode.length)),\n    input.unlockingBytecode,\n    numberToBinUint32LE(input.sequenceNumber),\n]);\nexport var TransactionDecodingError;\n(function (TransactionDecodingError) {\n    TransactionDecodingError[\"transaction\"] = \"Error reading transaction.\";\n    TransactionDecodingError[\"endsWithUnexpectedBytes\"] = \"Error decoding transaction: the provided input includes unexpected bytes after the encoded transaction.\";\n    TransactionDecodingError[\"input\"] = \"Error reading transaction input.\";\n    TransactionDecodingError[\"inputs\"] = \"Error reading transaction inputs.\";\n    TransactionDecodingError[\"output\"] = \"Error reading transaction output.\";\n    TransactionDecodingError[\"outputs\"] = \"Error reading transaction outputs.\";\n    TransactionDecodingError[\"lockingBytecodeLength\"] = \"Error reading locking bytecode length.\";\n})(TransactionDecodingError || (TransactionDecodingError = {}));\n/**\n * Read a transaction {@link Input} from the provided {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * {@link Input} and the next {@link ReadPosition}.\n * @param position - the {@link ReadPosition} at which to start reading the\n * transaction output\n */\nexport const readTransactionInput = (position) => {\n    const inputRead = readMultiple(position, [\n        readBytes(32 /* TransactionConstants.outpointTransactionHashLength */),\n        readUint32LE,\n        readCompactUintPrefixedBin,\n        readUint32LE,\n    ]);\n    if (typeof inputRead === 'string') {\n        return formatError(TransactionDecodingError.input, inputRead);\n    }\n    const { position: nextPosition, result: [outpointTransactionHash, outpointIndex, unlockingBytecode, sequenceNumber,], } = inputRead;\n    return {\n        position: nextPosition,\n        result: {\n            outpointIndex,\n            outpointTransactionHash: outpointTransactionHash.reverse(),\n            sequenceNumber,\n            unlockingBytecode,\n        },\n    };\n};\n/**\n * Encode a set of {@link Input}s for inclusion in an encoded transaction\n * including the prefixed number of inputs.\n *\n * Format: [CompactUint: input count] [encoded inputs]\n *\n * @param inputs - the set of inputs to encode\n */\nexport const encodeTransactionInputs = (inputs) => flattenBinArray([\n    bigIntToCompactUint(BigInt(inputs.length)),\n    ...inputs.map(encodeTransactionInput),\n]);\n/**\n * Read a set of transaction {@link Input}s beginning at {@link ReadPosition}.\n * A CompactUint will be read to determine the number of inputs, and that\n * number of transaction inputs will be read and returned. Returns either an\n * error message (as a string) or an object containing the array of inputs and\n * the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * transaction inputs\n */\nexport const readTransactionInputs = (position) => {\n    const inputsRead = readItemCount(position, readTransactionInput);\n    if (typeof inputsRead === 'string') {\n        return formatError(TransactionDecodingError.inputs, inputsRead);\n    }\n    return inputsRead;\n};\nconst maximumTokenAmount = 9223372036854775807n;\nexport const nftCapabilityNumberToLabel = [\n    NonFungibleTokenCapability.none,\n    NonFungibleTokenCapability.mutable,\n    NonFungibleTokenCapability.minting,\n];\nexport const nftCapabilityLabelToNumber = {\n    [NonFungibleTokenCapability.none]: 0,\n    [NonFungibleTokenCapability.mutable]: 1,\n    [NonFungibleTokenCapability.minting]: 2,\n};\nexport var CashTokenDecodingError;\n(function (CashTokenDecodingError) {\n    CashTokenDecodingError[\"invalidPrefix\"] = \"Error reading token prefix.\";\n    CashTokenDecodingError[\"insufficientLength\"] = \"Invalid token prefix: insufficient length.\";\n    CashTokenDecodingError[\"reservedBit\"] = \"Invalid token prefix: reserved bit is set.\";\n    CashTokenDecodingError[\"invalidCapability\"] = \"Invalid token prefix: capability must be none (0), mutable (1), or minting (2).\";\n    CashTokenDecodingError[\"commitmentWithoutNft\"] = \"Invalid token prefix: commitment requires an NFT.\";\n    CashTokenDecodingError[\"capabilityWithoutNft\"] = \"Invalid token prefix: capability requires an NFT.\";\n    CashTokenDecodingError[\"commitmentLengthZero\"] = \"Invalid token prefix: if encoded, commitment length must be greater than 0.\";\n    CashTokenDecodingError[\"invalidCommitment\"] = \"Invalid token prefix: invalid non-fungible token commitment.\";\n    CashTokenDecodingError[\"invalidAmountEncoding\"] = \"Invalid token prefix: invalid fungible token amount encoding.\";\n    CashTokenDecodingError[\"zeroAmount\"] = \"Invalid token prefix: if encoded, fungible token amount must be greater than 0.\";\n    CashTokenDecodingError[\"excessiveAmount\"] = \"Invalid token prefix: exceeds maximum fungible token amount of 9223372036854775807.\";\n    CashTokenDecodingError[\"noTokens\"] = \"Invalid token prefix: must encode at least one token.\";\n})(CashTokenDecodingError || (CashTokenDecodingError = {}));\n/**\n * Read a token amount from the provided {@link ReadPosition}, returning either\n * an error message (as a string) or an object containing the value and the next\n * {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * token amount.\n */\nexport const readTokenAmount = (position) => {\n    const amountRead = readCompactUintMinimal(position);\n    if (typeof amountRead === 'string') {\n        return formatError(CashTokenDecodingError.invalidAmountEncoding, amountRead);\n    }\n    if (amountRead.result > maximumTokenAmount) {\n        return formatError(CashTokenDecodingError.excessiveAmount, `Encoded amount: ${amountRead.result}`);\n    }\n    if (amountRead.result === 0n) {\n        return formatError(CashTokenDecodingError.zeroAmount);\n    }\n    return amountRead;\n};\n/**\n * Attempt to read a transaction {@link Output}'s token prefix from the provided\n * {@link ReadPosition}, returning either an error message (as a string) or an\n * object containing the (optional) token information and the\n * next {@link ReadPosition}.\n *\n * Rather than using this function directly, most applications\n * should use {@link readLockingBytecodeWithPrefix}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * token prefix\n */\n// eslint-disable-next-line complexity\nexport const readTokenPrefix = (position) => {\n    const { bin, index } = position;\n    if (bin[index] !== 239 /* CashTokens.PREFIX_TOKEN */) {\n        return { position, result: {} };\n    }\n    if (bin.length < index + 34 /* CashTokens.minimumPrefixLength */) {\n        return formatError(CashTokenDecodingError.insufficientLength, `The minimum possible length is ${34 /* CashTokens.minimumPrefixLength */}. Missing bytes: ${34 /* CashTokens.minimumPrefixLength */ - (bin.length - index)}`);\n    }\n    const category = bin\n        .slice(index + 1, index + 33 /* CashTokens.tokenBitfieldIndex */)\n        .reverse();\n    const tokenBitfield = bin[index + 33 /* CashTokens.tokenBitfieldIndex */]; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    /* eslint-disable no-bitwise */\n    const prefixStructure = tokenBitfield & 240 /* CashTokens.tokenFormatMask */;\n    if ((prefixStructure & 128 /* CashTokens.RESERVED_BIT */) !== 0) {\n        return formatError(CashTokenDecodingError.reservedBit, `Bitfield: 0b${tokenBitfield.toString(2 /* CashTokens.useBinaryOutput */)}`);\n    }\n    const nftCapabilityInt = tokenBitfield & 15 /* CashTokens.nftCapabilityMask */;\n    if (nftCapabilityInt > 2 /* CashTokens.maximumCapability */) {\n        return formatError(CashTokenDecodingError.invalidCapability, `Capability value: ${nftCapabilityInt}`);\n    }\n    const capability = nftCapabilityNumberToLabel[nftCapabilityInt]; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    const hasNft = (prefixStructure & 32 /* CashTokens.HAS_NFT */) !== 0;\n    const hasCommitmentLength = (prefixStructure & 64 /* CashTokens.HAS_COMMITMENT_LENGTH */) !== 0;\n    if (hasCommitmentLength && !hasNft) {\n        return formatError(CashTokenDecodingError.commitmentWithoutNft, `Bitfield: 0b${tokenBitfield.toString(2 /* CashTokens.useBinaryOutput */)}`);\n    }\n    const hasAmount = (prefixStructure & 16 /* CashTokens.HAS_AMOUNT */) !== 0;\n    /* eslint-enable no-bitwise */\n    const nextPosition = {\n        bin,\n        index: index + 33 /* CashTokens.tokenBitfieldIndex */ + 1,\n    };\n    if (hasNft) {\n        const commitmentRead = hasCommitmentLength\n            ? readCompactUintPrefixedBin(nextPosition)\n            : { position: nextPosition, result: Uint8Array.of() };\n        if (typeof commitmentRead === 'string') {\n            return formatError(CashTokenDecodingError.invalidCommitment, commitmentRead);\n        }\n        if (hasCommitmentLength && commitmentRead.result.length === 0) {\n            return formatError(CashTokenDecodingError.commitmentLengthZero);\n        }\n        const amountRead = hasAmount\n            ? readTokenAmount(commitmentRead.position)\n            : { position: commitmentRead.position, result: 0n };\n        if (typeof amountRead === 'string') {\n            return amountRead;\n        }\n        return {\n            position: amountRead.position,\n            result: {\n                token: {\n                    amount: amountRead.result,\n                    category,\n                    nft: { capability, commitment: commitmentRead.result },\n                },\n            },\n        };\n    }\n    if (capability !== NonFungibleTokenCapability.none) {\n        return formatError(CashTokenDecodingError.capabilityWithoutNft, `Bitfield: 0b${tokenBitfield.toString(2 /* CashTokens.useBinaryOutput */)}`);\n    }\n    if (!hasAmount) {\n        return formatError(CashTokenDecodingError.noTokens, `Bitfield: 0b${tokenBitfield.toString(2 /* CashTokens.useBinaryOutput */)}`);\n    }\n    const amountRead = readTokenAmount(nextPosition);\n    if (typeof amountRead === 'string') {\n        return amountRead;\n    }\n    return {\n        position: amountRead.position,\n        result: { token: { amount: amountRead.result, category } },\n    };\n};\n/**\n * Read the locking bytecode and token prefix (if present) of a transaction\n * {@link Output}, beginning at the `CompactUint` indicating the\n * combined length.\n * @param position - the {@link ReadPosition} at which to start reading the\n * optional token prefix and locking bytecode\n */\nexport const readLockingBytecodeWithPrefix = (position) => {\n    const bytecodeRead = readCompactUintPrefixedBin(position);\n    if (typeof bytecodeRead === 'string') {\n        return formatError(TransactionDecodingError.lockingBytecodeLength, bytecodeRead);\n    }\n    const { result: contents, position: nextPosition } = bytecodeRead;\n    const contentsRead = readMultiple({ bin: contents, index: 0 }, [\n        readTokenPrefix,\n        readRemainingBytes,\n    ]);\n    if (typeof contentsRead === 'string') {\n        return formatError(CashTokenDecodingError.invalidPrefix, contentsRead);\n    }\n    const { result: [{ token }, lockingBytecode], } = contentsRead;\n    return {\n        position: nextPosition,\n        result: { lockingBytecode, ...(token === undefined ? {} : { token }) },\n    };\n};\n/**\n * Read a transaction {@link Output} from the provided {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * {@link Output} and the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * transaction output\n */\nexport const readTransactionOutput = (position) => {\n    const outputRead = readMultiple(position, [\n        readUint64LE,\n        readLockingBytecodeWithPrefix,\n    ]);\n    if (typeof outputRead === 'string') {\n        return formatError(TransactionDecodingError.output, outputRead);\n    }\n    const { position: nextPosition, result: [valueSatoshis, { lockingBytecode, token }], } = outputRead;\n    return {\n        position: nextPosition,\n        result: {\n            lockingBytecode,\n            ...(token === undefined ? {} : { token }),\n            valueSatoshis,\n        },\n    };\n};\n/**\n * Given {@link Output.token} data, encode a token prefix.\n *\n * This function does not fail, but returns an empty Uint8Array if the token\n * data does not encode any tokens (even if `token.category` is set).\n *\n * @param token - the token data to encode\n */\n// eslint-disable-next-line complexity\nexport const encodeTokenPrefix = (token) => {\n    if (token === undefined || (token.nft === undefined && token.amount < 1n)) {\n        return Uint8Array.of();\n    }\n    const hasNft = token.nft === undefined ? 0 : 32 /* CashTokens.HAS_NFT */;\n    const capabilityInt = token.nft === undefined\n        ? 0\n        : nftCapabilityLabelToNumber[token.nft.capability];\n    const hasCommitmentLength = token.nft !== undefined && token.nft.commitment.length > 0\n        ? 64 /* CashTokens.HAS_COMMITMENT_LENGTH */\n        : 0;\n    const hasAmount = token.amount > 0n ? 16 /* CashTokens.HAS_AMOUNT */ : 0;\n    const tokenBitfield = \n    // eslint-disable-next-line no-bitwise\n    hasNft | hasCommitmentLength | hasAmount | capabilityInt;\n    return flattenBinArray([\n        Uint8Array.of(239 /* CashTokens.PREFIX_TOKEN */),\n        token.category.slice().reverse(),\n        Uint8Array.of(tokenBitfield),\n        ...(hasCommitmentLength === 0\n            ? []\n            : [\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                bigIntToCompactUint(BigInt(token.nft.commitment.length)),\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                token.nft.commitment,\n            ]),\n        ...(hasAmount === 0 ? [] : [bigIntToCompactUint(token.amount)]),\n    ]);\n};\n/**\n * Encode a single {@link Output} for inclusion in an encoded transaction.\n *\n * @param output - the output to encode\n */\nexport const encodeTransactionOutput = (output) => {\n    const lockingBytecodeField = flattenBinArray([\n        encodeTokenPrefix(output.token),\n        output.lockingBytecode,\n    ]);\n    return flattenBinArray([\n        valueSatoshisToBin(output.valueSatoshis),\n        bigIntToCompactUint(BigInt(lockingBytecodeField.length)),\n        lockingBytecodeField,\n    ]);\n};\n/**\n * Read a set of transaction {@link Output}s beginning at {@link ReadPosition}.\n * A CompactUint will be read to determine the number of outputs, and that\n * number of transaction outputs will be read and returned. Returns either an\n * error message (as a string) or an object containing the array of outputs and\n * the next {@link ReadPosition}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * transaction outputs\n */\nexport const readTransactionOutputs = (position) => {\n    const outputsRead = readItemCount(position, readTransactionOutput);\n    if (typeof outputsRead === 'string') {\n        return formatError(TransactionDecodingError.outputs, outputsRead);\n    }\n    return outputsRead;\n};\n/**\n * Encode a set of {@link Output}s for inclusion in an encoded transaction\n * including the prefixed number of outputs. Note, this encoding differs from\n * {@link encodeTransactionOutputsForSigning} (used for signing serializations).\n *\n * Format: [CompactUint: output count] [encoded outputs]\n *\n * @param outputs - the set of outputs to encode\n */\nexport const encodeTransactionOutputs = (outputs) => flattenBinArray([\n    bigIntToCompactUint(BigInt(outputs.length)),\n    ...outputs.map(encodeTransactionOutput),\n]);\n/**\n * Read a version 1 or 2 transaction beginning at {@link ReadPosition},\n * returning either an error message (as a string) or an object containing the\n * {@link Transaction} and the next {@link ReadPosition}. Rather than using this\n * function directly, most applications should\n * use {@link decodeTransactionCommon}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * {@link TransactionCommon}\n */\nexport const readTransactionCommon = (position) => {\n    const transactionRead = readMultiple(position, [\n        readUint32LE,\n        readTransactionInputs,\n        readTransactionOutputs,\n        readUint32LE,\n    ]);\n    if (typeof transactionRead === 'string') {\n        return formatError(TransactionDecodingError.transaction, transactionRead);\n    }\n    const { position: nextPosition, result: [version, inputs, outputs, locktime], } = transactionRead;\n    return {\n        position: nextPosition,\n        result: { inputs, locktime, outputs, version },\n    };\n};\nexport const readTransaction = readTransactionCommon;\nexport const readTransactionOutputNonTokenAware = (pos) => {\n    const outputRead = readMultiple(pos, [\n        readUint64LE,\n        readCompactUintPrefixedBin,\n    ]);\n    if (typeof outputRead === 'string') {\n        return formatError(TransactionDecodingError.output, outputRead);\n    }\n    const { position: nextPosition, result: [valueSatoshis, lockingBytecode], } = outputRead;\n    return {\n        position: nextPosition,\n        result: { lockingBytecode, valueSatoshis },\n    };\n};\nexport const readTransactionOutputsNonTokenAware = (pos) => {\n    const outputsRead = readItemCount(pos, readTransactionOutputNonTokenAware);\n    if (typeof outputsRead === 'string') {\n        return formatError(TransactionDecodingError.outputs, outputsRead);\n    }\n    return outputsRead;\n};\n/**\n * Read a version 1 or 2 transaction beginning at a {@link ReadPosition} as if\n * CHIP-2022-02-CashTokens were not deployed, returning either an error message\n * (as a string) or an object containing the {@link Transaction} and the next\n * {@link ReadPosition}.\n *\n * This function emulates legacy transaction parsing to test behavior prior to\n * deployment of CHIP-2022-02-CashTokens; most applications should instead\n * use {@link readTransactionCommon}.\n *\n * @param position - the {@link ReadPosition} at which to start reading the\n * {@link TransactionCommon}\n */\nexport const readTransactionNonTokenAware = (position) => {\n    const transactionRead = readMultiple(position, [\n        readUint32LE,\n        readTransactionInputs,\n        readTransactionOutputsNonTokenAware,\n        readUint32LE,\n    ]);\n    if (typeof transactionRead === 'string') {\n        return formatError(TransactionDecodingError.transaction, transactionRead);\n    }\n    const { position: nextPosition, result: [version, inputs, outputs, locktime], } = transactionRead;\n    return {\n        position: nextPosition,\n        result: { inputs, locktime, outputs, version },\n    };\n};\n/**\n * Decode a {@link TransactionCommon} according to the version 1/2 P2P network\n * transaction format.\n *\n * This function verifies that the provided `bin` contains only one transaction\n * and no additional data. To read a transaction from a specific location within\n * a `Uint8Array`, use {@link readTransactionCommon}.\n *\n * @param bin - the encoded transaction to decode\n */\nexport const decodeTransactionCommon = (bin) => {\n    const transactionRead = readTransactionCommon({ bin, index: 0 });\n    if (typeof transactionRead === 'string') {\n        return transactionRead;\n    }\n    if (transactionRead.position.index !== bin.length) {\n        return formatError(TransactionDecodingError.endsWithUnexpectedBytes, `Encoded transaction ends at index ${transactionRead.position.index - 1}, leaving ${bin.length - transactionRead.position.index} remaining bytes.`);\n    }\n    return transactionRead.result;\n};\nexport const decodeTransactionBCH = decodeTransactionCommon;\nexport const decodeTransaction = decodeTransactionBCH;\n/**\n * Decode a {@link TransactionCommon} from a trusted source according to the\n * version 1/2 P2P network transaction format.\n *\n * Note: this method throws runtime errors when attempting to decode messages\n * which do not properly follow the transaction format. If the input is\n * untrusted, use {@link decodeTransactionCommon}.\n *\n * @param bin - the raw message to decode\n */\nexport const decodeTransactionUnsafeCommon = (bin) => {\n    const result = decodeTransactionCommon(bin);\n    if (typeof result === 'string') {\n        // eslint-disable-next-line functional/no-throw-statements\n        throw new Error(result);\n    }\n    return result;\n};\nexport const decodeTransactionUnsafeBCH = decodeTransactionUnsafeCommon;\nexport const decodeTransactionUnsafe = decodeTransactionUnsafeBCH;\n/**\n * Encode a {@link Transaction} using the standard P2P network format. This\n * serialization is also used when computing the transaction's hash (A.K.A.\n * \"transaction ID\" or \"TXID\").\n */\nexport const encodeTransactionCommon = (tx) => flattenBinArray([\n    numberToBinUint32LE(tx.version),\n    encodeTransactionInputs(tx.inputs),\n    encodeTransactionOutputs(tx.outputs),\n    numberToBinUint32LE(tx.locktime),\n]);\nexport const encodeTransactionBCH = encodeTransactionCommon;\nexport const encodeTransaction = encodeTransactionBCH;\n/**\n * @deprecated use `structuredClone` instead\n */\nexport const cloneTransactionInputsCommon = (inputs) => inputs.map((input) => ({\n    outpointIndex: input.outpointIndex,\n    outpointTransactionHash: input.outpointTransactionHash.slice(),\n    sequenceNumber: input.sequenceNumber,\n    unlockingBytecode: input.unlockingBytecode.slice(),\n}));\n/**\n * @deprecated use `structuredClone` instead\n */\nexport const cloneTransactionOutputsCommon = (outputs) => outputs.map((output) => ({\n    lockingBytecode: output.lockingBytecode.slice(),\n    ...(output.token === undefined\n        ? {}\n        : {\n            token: {\n                amount: output.token.amount,\n                category: output.token.category.slice(),\n                ...(output.token.nft === undefined\n                    ? {}\n                    : {\n                        nft: {\n                            capability: output.token.nft.capability,\n                            commitment: output.token.nft.commitment.slice(),\n                        },\n                    }),\n            },\n        }),\n    valueSatoshis: output.valueSatoshis,\n}));\n/**\n * @deprecated use `structuredClone` instead\n */\nexport const cloneTransactionCommon = (transaction) => ({\n    inputs: cloneTransactionInputsCommon(transaction.inputs),\n    locktime: transaction.locktime,\n    outputs: cloneTransactionOutputsCommon(transaction.outputs),\n    version: transaction.version,\n});\n/**\n * Compute a transaction hash (A.K.A. \"transaction ID\" or \"TXID\") from an\n * encoded transaction in P2P network message order. This is the byte order\n * produced by most sha256 libraries and used by encoded P2P network messages.\n * It is also the byte order produced by `OP_SHA256` and `OP_HASH256` in the\n * virtual machine.\n *\n * @returns the transaction hash in P2P network message byte order\n *\n * @param transaction - the encoded transaction\n * @param sha256 - an implementation of sha256\n */\nexport const hashTransactionP2pOrder = (transaction, sha256 = internalSha256) => hash256(transaction, sha256);\n/**\n * Compute a transaction hash (A.K.A. \"transaction ID\" or \"TXID\") from an\n * encoded transaction in user interface byte order. This is the byte order\n * typically used by block explorers, wallets, and other user interfaces.\n *\n * To return this result as a `string`, use {@link hashTransaction}.\n *\n * @returns the transaction hash in User Interface byte order\n *\n * @param transaction - the encoded transaction\n * @param sha256 - an implementation of sha256\n */\nexport const hashTransactionUiOrder = (transaction, sha256 = internalSha256) => hashTransactionP2pOrder(transaction, sha256).reverse();\n/**\n * Return an encoded {@link Transaction}'s hash/ID as a string in user interface\n * byte order (typically used by wallets and block explorers).\n *\n * To return this result as a `Uint8Array`, use {@link hashTransactionUiOrder}.\n *\n * @param transaction - the encoded transaction\n */\nexport const hashTransaction = (transaction) => binToHex(hashTransactionUiOrder(transaction));\n/**\n * Encode all outpoints in a series of transaction inputs. (For use in\n * {@link hashTransactionOutpoints}.)\n *\n * @param inputs - the series of inputs from which to extract the outpoints\n */\nexport const encodeTransactionOutpoints = (inputs) => flattenBinArray(inputs.map((i) => flattenBinArray([\n    i.outpointTransactionHash.slice().reverse(),\n    numberToBinUint32LE(i.outpointIndex),\n])));\n/**\n * Encode an array of transaction {@link Output}s for use in transaction signing\n * serializations. Note, this encoding differs from\n * {@link encodeTransactionOutputs} (used for encoding full transactions).\n *\n * @param outputs - the array of outputs to encode\n */\nexport const encodeTransactionOutputsForSigning = (outputs) => flattenBinArray(outputs.map(encodeTransactionOutput));\n/**\n * Encode the sequence numbers of an array of transaction inputs for use in\n * transaction signing serializations.\n *\n * @param inputs - the array of inputs from which to extract the sequence\n * numbers\n */\nexport const encodeTransactionInputSequenceNumbersForSigning = (inputs) => flattenBinArray(inputs.map((i) => numberToBinUint32LE(i.sequenceNumber)));\n//# sourceMappingURL=transaction-encoding.js.map","import { hash256, sha256 as internalSha256 } from '../../../crypto/crypto.js';\nimport { bigIntToCompactUint, flattenBinArray, numberToBinUint32LE, valueSatoshisToBin, } from '../../../format/format.js';\nimport { encodeTokenPrefix, encodeTransactionInputSequenceNumbersForSigning, encodeTransactionOutpoints, encodeTransactionOutput, encodeTransactionOutputsForSigning, } from '../../../message/message.js';\n/**\n * A.K.A. `sighash` flags\n */\nexport var SigningSerializationFlag;\n(function (SigningSerializationFlag) {\n    /**\n     * A.K.A. `SIGHASH_ALL`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"allOutputs\"] = 1] = \"allOutputs\";\n    /**\n     * A.K.A `SIGHASH_NONE`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"noOutputs\"] = 2] = \"noOutputs\";\n    /**\n     * A.K.A. `SIGHASH_SINGLE`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"correspondingOutput\"] = 3] = \"correspondingOutput\";\n    /**\n     * A.K.A. `SIGHASH_UTXOS`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"utxos\"] = 32] = \"utxos\";\n    SigningSerializationFlag[SigningSerializationFlag[\"forkId\"] = 64] = \"forkId\";\n    /**\n     * A.K.A `ANYONE_CAN_PAY`/`SIGHASH_ANYONECANPAY`\n     */\n    SigningSerializationFlag[SigningSerializationFlag[\"singleInput\"] = 128] = \"singleInput\";\n})(SigningSerializationFlag || (SigningSerializationFlag = {}));\n/* eslint-disable no-bitwise, @typescript-eslint/prefer-literal-enum-member */\nexport var SigningSerializationType;\n(function (SigningSerializationType) {\n    SigningSerializationType[SigningSerializationType[\"allOutputs\"] = 65] = \"allOutputs\";\n    SigningSerializationType[SigningSerializationType[\"allOutputsAllUtxos\"] = 97] = \"allOutputsAllUtxos\";\n    SigningSerializationType[SigningSerializationType[\"allOutputsSingleInput\"] = 193] = \"allOutputsSingleInput\";\n    SigningSerializationType[SigningSerializationType[\"correspondingOutput\"] = 67] = \"correspondingOutput\";\n    SigningSerializationType[SigningSerializationType[\"correspondingOutputAllUtxos\"] = 99] = \"correspondingOutputAllUtxos\";\n    SigningSerializationType[SigningSerializationType[\"correspondingOutputSingleInput\"] = 195] = \"correspondingOutputSingleInput\";\n    SigningSerializationType[SigningSerializationType[\"noOutputs\"] = 66] = \"noOutputs\";\n    SigningSerializationType[SigningSerializationType[\"noOutputsAllUtxos\"] = 98] = \"noOutputsAllUtxos\";\n    SigningSerializationType[SigningSerializationType[\"noOutputsSingleInput\"] = 194] = \"noOutputsSingleInput\";\n})(SigningSerializationType || (SigningSerializationType = {}));\n/* eslint-enable no-bitwise, @typescript-eslint/prefer-literal-enum-member */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const SigningSerializationTypeBCH = SigningSerializationType;\nconst match = (type, flag) => \n// eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\n(type[0] & flag) !== 0;\nconst equals = (type, flag) => (type[0] & 31 /* Internal.mask5Bits */) === flag;\nconst shouldSerializeSingleInput = (type) => match(type, SigningSerializationFlag.singleInput);\nconst shouldSerializeCorrespondingOutput = (type) => equals(type, SigningSerializationFlag.correspondingOutput);\nconst shouldSerializeNoOutputs = (type) => equals(type, SigningSerializationFlag.noOutputs);\nconst shouldSerializeUtxos = (type) => match(type, SigningSerializationFlag.utxos);\nconst emptyHash = () => new Uint8Array(32 /* Internal.sha256HashByteLength */).fill(0);\n/**\n * Return the proper `hashPrevouts` value for a given a signing serialization\n * type.\n */\nexport const hashPrevouts = ({ signingSerializationType, transactionOutpoints, }, sha256 = internalSha256) => shouldSerializeSingleInput(signingSerializationType)\n    ? emptyHash()\n    : hash256(transactionOutpoints, sha256);\n/**\n * Return the proper `hashUtxos` value for a given a signing serialization\n * type.\n */\nexport const hashUtxos = ({ signingSerializationType, transactionUtxos, }, sha256 = internalSha256) => shouldSerializeUtxos(signingSerializationType)\n    ? hash256(transactionUtxos, sha256)\n    : Uint8Array.of();\n/**\n * Return the proper `hashSequence` value for a given a signing serialization\n * type.\n */\nexport const hashSequence = ({ signingSerializationType, transactionSequenceNumbers, }, sha256 = internalSha256) => !shouldSerializeSingleInput(signingSerializationType) &&\n    !shouldSerializeCorrespondingOutput(signingSerializationType) &&\n    !shouldSerializeNoOutputs(signingSerializationType)\n    ? hash256(transactionSequenceNumbers, sha256)\n    : emptyHash();\n/**\n * Return the proper `hashOutputs` value for a given a signing serialization\n * type.\n */\nexport const hashOutputs = ({ correspondingOutput, signingSerializationType, transactionOutputs, }, sha256 = internalSha256) => !shouldSerializeCorrespondingOutput(signingSerializationType) &&\n    !shouldSerializeNoOutputs(signingSerializationType)\n    ? hash256(transactionOutputs, sha256)\n    : shouldSerializeCorrespondingOutput(signingSerializationType)\n        ? correspondingOutput === undefined\n            ? emptyHash()\n            : hash256(correspondingOutput, sha256)\n        : emptyHash();\n/**\n * Encode the signature-protected properties of a transaction following the\n * algorithm required by the `signingSerializationType` of a signature.\n *\n * Note: When validating transactions with multiple signatures,\n * performance-critical applications should use a memoized sha256 implementation\n * to avoid re-computing hashes.\n */\nexport const encodeSigningSerializationBCH = ({ correspondingOutput, coveredBytecode, forkId = new Uint8Array([0, 0, 0]), locktime, outpointIndex, outpointTransactionHash, outputTokenPrefix, outputValue, sequenceNumber, signingSerializationType, transactionOutpoints, transactionOutputs, transactionSequenceNumbers, transactionUtxos, version, }, sha256 = internalSha256) => flattenBinArray([\n    numberToBinUint32LE(version),\n    hashPrevouts({ signingSerializationType, transactionOutpoints }, sha256),\n    hashUtxos({ signingSerializationType, transactionUtxos }, sha256),\n    hashSequence({\n        signingSerializationType,\n        transactionSequenceNumbers,\n    }, sha256),\n    outpointTransactionHash.slice().reverse(),\n    numberToBinUint32LE(outpointIndex),\n    outputTokenPrefix,\n    bigIntToCompactUint(BigInt(coveredBytecode.length)),\n    coveredBytecode,\n    outputValue,\n    numberToBinUint32LE(sequenceNumber),\n    hashOutputs({\n        correspondingOutput,\n        signingSerializationType,\n        transactionOutputs,\n    }, sha256),\n    numberToBinUint32LE(locktime),\n    signingSerializationType,\n    forkId,\n]);\n/**\n * Generate the encoded components of a BCH signing serialization from\n * compilation context.\n */\nexport const generateSigningSerializationComponentsBCH = (context) => ({\n    correspondingOutput: context.inputIndex < context.transaction.outputs.length\n        ? encodeTransactionOutput(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        context.transaction.outputs[context.inputIndex])\n        : undefined,\n    locktime: context.transaction.locktime,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    outpointIndex: context.transaction.inputs[context.inputIndex].outpointIndex,\n    outpointTransactionHash: \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    context.transaction.inputs[context.inputIndex].outpointTransactionHash,\n    outputTokenPrefix: encodeTokenPrefix(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    context.sourceOutputs[context.inputIndex].token),\n    outputValue: valueSatoshisToBin(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    context.sourceOutputs[context.inputIndex].valueSatoshis),\n    sequenceNumber: \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    context.transaction.inputs[context.inputIndex].sequenceNumber,\n    transactionOutpoints: encodeTransactionOutpoints(context.transaction.inputs),\n    transactionOutputs: encodeTransactionOutputsForSigning(context.transaction.outputs),\n    transactionSequenceNumbers: encodeTransactionInputSequenceNumbersForSigning(context.transaction.inputs),\n    transactionUtxos: encodeTransactionOutputsForSigning(context.sourceOutputs),\n    version: context.transaction.version,\n});\n/**\n * Generate the signing serialization for a particular transaction input\n * following the algorithm required by the provided `signingSerializationType`.\n *\n * Note: When validating transactions with multiple signatures,\n * performance-critical applications should use a memoized sha256 implementation\n * to avoid re-computing hashes.\n */\nexport const generateSigningSerializationBCH = (context, { coveredBytecode, signingSerializationType, }, sha256 = internalSha256) => encodeSigningSerializationBCH({\n    ...generateSigningSerializationComponentsBCH(context),\n    coveredBytecode,\n    signingSerializationType,\n}, sha256);\n/**\n * @param signingSerializationType - the 32-bit number indicating the signing\n * serialization algorithm to use\n */\nexport const isLegacySigningSerialization = (signingSerializationType) => {\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const forkValue = signingSerializationType >> 8;\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const newForkValue = (forkValue ^ 0xdead) | 0xff0000;\n    // eslint-disable-next-line no-bitwise, @typescript-eslint/no-magic-numbers\n    const sighashType = (newForkValue << 8) | (signingSerializationType & 0xff);\n    // eslint-disable-next-line no-bitwise\n    return (sighashType & SigningSerializationFlag.forkId) === 0;\n};\n//# sourceMappingURL=signing-serialization.js.map","import { SigningSerializationTypeBCH } from './signing-serialization.js';\n/**\n * Consensus settings for the `BCH_2022_05` instruction set.\n */\nexport var ConsensusCommon;\n(function (ConsensusCommon) {\n    /**\n     * A.K.A. `MAX_SCRIPT_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumBytecodeLength\"] = 10000] = \"maximumBytecodeLength\";\n    /**\n     * A.K.A. `MAX_OP_RETURN_RELAY`, `nMaxDatacarrierBytes`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumDataCarrierBytes\"] = 223] = \"maximumDataCarrierBytes\";\n    /**\n     * A.K.A. `MAX_OPS_PER_SCRIPT`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumOperationCount\"] = 201] = \"maximumOperationCount\";\n    /**\n     * A.K.A. `MAX_STACK_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStackDepth\"] = 1000] = \"maximumStackDepth\";\n    /**\n     * A.K.A. `MAX_SCRIPT_ELEMENT_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStackItemLength\"] = 520] = \"maximumStackItemLength\";\n    /**\n     * A.K.A. `MAX_STANDARD_VERSION`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStandardVersion\"] = 2] = \"maximumStandardVersion\";\n    /**\n     * A.K.A. `MAX_TX_IN_SCRIPT_SIG_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStandardUnlockingBytecodeLength\"] = 1650] = \"maximumStandardUnlockingBytecodeLength\";\n    /**\n     * A.K.A. `MIN_TX_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"minimumTransactionSize\"] = 100] = \"minimumTransactionSize\";\n    /**\n     * A.K.A. `MAX_STANDARD_TX_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumStandardTransactionSize\"] = 100000] = \"maximumStandardTransactionSize\";\n    /**\n     * A.K.A. `MAX_TX_SIZE`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumTransactionSize\"] = 1000000] = \"maximumTransactionSize\";\n    /**\n     * A.K.A. `MAXIMUM_ELEMENT_SIZE_64_BIT`\n     */\n    ConsensusCommon[ConsensusCommon[\"maximumVmNumberLength\"] = 8] = \"maximumVmNumberLength\";\n    // eslint-disable-next-line @typescript-eslint/no-mixed-enums\n    ConsensusCommon[\"minVmNumber\"] = \"-9223372036854775807\";\n    ConsensusCommon[\"maxVmNumber\"] = \"9223372036854775807\";\n    ConsensusCommon[ConsensusCommon[\"schnorrSignatureLength\"] = 64] = \"schnorrSignatureLength\";\n})(ConsensusCommon || (ConsensusCommon = {}));\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const SigningSerializationTypesCommon = [\n    SigningSerializationTypeBCH.allOutputs,\n    SigningSerializationTypeBCH.allOutputsSingleInput,\n    SigningSerializationTypeBCH.correspondingOutput,\n    SigningSerializationTypeBCH.correspondingOutputSingleInput,\n    SigningSerializationTypeBCH.noOutputs,\n    SigningSerializationTypeBCH.noOutputsSingleInput,\n];\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const SigningSerializationTypesBCH = SigningSerializationTypesCommon;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const ConsensusBCH = ConsensusCommon;\n//# sourceMappingURL=consensus.js.map","import { formatError } from '../../../format/format.js';\nexport var AuthenticationErrorCommon;\n(function (AuthenticationErrorCommon) {\n    AuthenticationErrorCommon[\"calledReserved\"] = \"Program called an unassigned, reserved operation.\";\n    AuthenticationErrorCommon[\"calledReturn\"] = \"Program called an OP_RETURN operation.\";\n    AuthenticationErrorCommon[\"calledUpgradableNop\"] = \"Program called a disallowed upgradable non-operation (OP_NOP1-OP_NOP10).\";\n    AuthenticationErrorCommon[\"checkSequenceUnavailable\"] = \"Program called an OP_CHECKSEQUENCEVERIFY operation, but OP_CHECKSEQUENCEVERIFY requires transaction version 2 or higher.\";\n    AuthenticationErrorCommon[\"disabledOpcode\"] = \"Program contains a disabled opcode.\";\n    AuthenticationErrorCommon[\"divisionByZero\"] = \"Program attempted to divide a number by zero.\";\n    AuthenticationErrorCommon[\"emptyAlternateStack\"] = \"Tried to read from an empty alternate stack.\";\n    AuthenticationErrorCommon[\"emptyStack\"] = \"Tried to read from an empty stack.\";\n    AuthenticationErrorCommon[\"exceededMaximumBytecodeLengthLocking\"] = \"The provided locking bytecode exceeds the maximum bytecode length (10,000 bytes).\";\n    AuthenticationErrorCommon[\"exceededMaximumBytecodeLengthUnlocking\"] = \"The provided unlocking bytecode exceeds the maximum bytecode length (10,000 bytes).\";\n    AuthenticationErrorCommon[\"exceededMaximumVmNumberLength\"] = \"Program attempted an OP_BIN2NUM operation on a byte sequence that cannot be encoded within the maximum VM Number length.\";\n    AuthenticationErrorCommon[\"exceededMaximumStackDepth\"] = \"Program exceeded the maximum stack depth (1,000 items).\";\n    AuthenticationErrorCommon[\"exceededMaximumStackItemLength\"] = \"Program attempted to push a stack item that exceeded the maximum stack item length (520 bytes).\";\n    AuthenticationErrorCommon[\"exceededMaximumOperationCount\"] = \"Program exceeded the maximum operation count (201 operations).\";\n    AuthenticationErrorCommon[\"exceedsMaximumMultisigPublicKeyCount\"] = \"Program called an OP_CHECKMULTISIG that exceeds the maximum public key count (20 public keys).\";\n    AuthenticationErrorCommon[\"failedVerify\"] = \"Program failed an OP_VERIFY operation.\";\n    AuthenticationErrorCommon[\"invalidStackIndex\"] = \"Tried to read from an invalid stack index.\";\n    AuthenticationErrorCommon[\"incompatibleLocktimeType\"] = \"Program called an OP_CHECKLOCKTIMEVERIFY operation with an incompatible locktime type. The transaction locktime and required locktime must both refer to either a block height or a block time.\";\n    AuthenticationErrorCommon[\"incompatibleSequenceType\"] = \"Program called an OP_CHECKSEQUENCEVERIFY operation with an incompatible sequence type flag. The input sequence number and required sequence number must both use the same sequence locktime type.\";\n    AuthenticationErrorCommon[\"insufficientLength\"] = \"Program called an OP_NUM2BIN operation with an insufficient byte length to re-encode the provided number.\";\n    AuthenticationErrorCommon[\"insufficientPublicKeys\"] = \"Program called an OP_CHECKMULTISIG operation that requires signatures from more public keys than are provided.\";\n    AuthenticationErrorCommon[\"invalidNaturalNumber\"] = \"Invalid input: the key/signature count inputs for OP_CHECKMULTISIG require a natural number (n > 0).\";\n    AuthenticationErrorCommon[\"invalidProtocolBugValue\"] = \"The OP_CHECKMULTISIG protocol bug value must be a VM Number 0 (to comply with the \\\"NULLDUMMY\\\" rule).\";\n    AuthenticationErrorCommon[\"invalidPublicKeyEncoding\"] = \"Encountered an improperly encoded public key.\";\n    AuthenticationErrorCommon[\"invalidVmNumber\"] = \"Invalid input: this operation requires a valid VM Number.\";\n    AuthenticationErrorCommon[\"invalidSignatureEncoding\"] = \"Encountered an improperly encoded signature.\";\n    AuthenticationErrorCommon[\"invalidSplitIndex\"] = \"Program called an OP_SPLIT operation with an invalid index.\";\n    AuthenticationErrorCommon[\"invalidTransactionInputIndex\"] = \"Program attempted to read from an invalid transaction input index.\";\n    AuthenticationErrorCommon[\"invalidTransactionOutputIndex\"] = \"Program attempted to read from an invalid transaction output index.\";\n    AuthenticationErrorCommon[\"invalidTransactionUtxoIndex\"] = \"Program attempted to read from an invalid transaction UTXO index.\";\n    AuthenticationErrorCommon[\"locktimeDisabled\"] = \"Program called an OP_CHECKLOCKTIMEVERIFY operation, but locktime is disabled for this transaction.\";\n    AuthenticationErrorCommon[\"mismatchedBitwiseOperandLength\"] = \"Program attempted a bitwise operation on operands of different lengths.\";\n    AuthenticationErrorCommon[\"malformedLockingBytecode\"] = \"The provided locking bytecode is malformed.\";\n    AuthenticationErrorCommon[\"malformedP2shBytecode\"] = \"Redeem bytecode was malformed prior to P2SH evaluation.\";\n    AuthenticationErrorCommon[\"malformedPush\"] = \"Program must be long enough to push the requested number of bytes.\";\n    AuthenticationErrorCommon[\"malformedUnlockingBytecode\"] = \"The provided unlocking bytecode is malformed.\";\n    AuthenticationErrorCommon[\"negativeLocktime\"] = \"Program called an OP_CHECKLOCKTIMEVERIFY or OP_CHECKSEQUENCEVERIFY operation with a negative locktime.\";\n    AuthenticationErrorCommon[\"nonEmptyControlStack\"] = \"The active bytecode completed with a non-empty control stack (missing `OP_ENDIF`).\";\n    AuthenticationErrorCommon[\"nonMinimalPush\"] = \"Push operations must use the smallest possible encoding.\";\n    AuthenticationErrorCommon[\"nonNullSignatureFailure\"] = \"Program failed a signature verification with a non-null signature (violating the \\\"NULLFAIL\\\" rule).\";\n    AuthenticationErrorCommon[\"overflowsVmNumberRange\"] = \"Program attempted an arithmetic operation which exceeds the range of VM Numbers.\";\n    AuthenticationErrorCommon[\"requiresCleanStack\"] = \"Program completed with an unexpected number of items on the stack (must be exactly 1).\";\n    AuthenticationErrorCommon[\"requiresPushOnly\"] = \"Unlocking bytecode may contain only push operations.\";\n    AuthenticationErrorCommon[\"schnorrSizedSignatureInCheckMultiSig\"] = \"Program used a schnorr-sized signature (65 bytes) in an OP_CHECKMULTISIG operation.\";\n    AuthenticationErrorCommon[\"unexpectedElse\"] = \"Encountered an OP_ELSE outside of an OP_IF ... OP_ENDIF block.\";\n    AuthenticationErrorCommon[\"unexpectedEndIf\"] = \"Encountered an OP_ENDIF that is not following a matching OP_IF.\";\n    AuthenticationErrorCommon[\"unknownOpcode\"] = \"Called an unknown opcode.\";\n    AuthenticationErrorCommon[\"unmatchedSequenceDisable\"] = \"Program called an OP_CHECKSEQUENCEVERIFY operation requiring the disable flag, but the input's sequence number is missing the disable flag.\";\n    AuthenticationErrorCommon[\"unsatisfiedLocktime\"] = \"Program called an OP_CHECKLOCKTIMEVERIFY operation that requires a locktime greater than the transaction's locktime.\";\n    AuthenticationErrorCommon[\"unsatisfiedSequenceNumber\"] = \"Program called an OP_CHECKSEQUENCEVERIFY operation that requires a sequence number greater than the input's sequence number.\";\n    AuthenticationErrorCommon[\"unsuccessfulEvaluation\"] = \"Unsuccessful evaluation: completed with a non-truthy value on top of the stack.\";\n})(AuthenticationErrorCommon || (AuthenticationErrorCommon = {}));\n/**\n * Applies the `error` to a `state`.\n *\n * @remarks\n * If the state already has an error, this method does not override it.\n * (Evaluation should end after the first encountered error, so further errors\n * aren't relevant.)\n */\nexport const applyError = (state, errorType, errorDetails) => ({\n    ...state,\n    error: state.error ?? formatError(errorType, errorDetails),\n});\n//# sourceMappingURL=errors.js.map","/**\n * The `BCH_2023_05` instruction set.\n */\nexport var OpcodesBCH2023;\n(function (OpcodesBCH2023) {\n    /**\n     * A.K.A. `OP_FALSE` or `OP_PUSHBYTES_0`\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_0\"] = 0] = \"OP_0\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_1\"] = 1] = \"OP_PUSHBYTES_1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_2\"] = 2] = \"OP_PUSHBYTES_2\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_3\"] = 3] = \"OP_PUSHBYTES_3\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_4\"] = 4] = \"OP_PUSHBYTES_4\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_5\"] = 5] = \"OP_PUSHBYTES_5\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_6\"] = 6] = \"OP_PUSHBYTES_6\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_7\"] = 7] = \"OP_PUSHBYTES_7\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_8\"] = 8] = \"OP_PUSHBYTES_8\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_9\"] = 9] = \"OP_PUSHBYTES_9\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_10\"] = 10] = \"OP_PUSHBYTES_10\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_11\"] = 11] = \"OP_PUSHBYTES_11\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_12\"] = 12] = \"OP_PUSHBYTES_12\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_13\"] = 13] = \"OP_PUSHBYTES_13\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_14\"] = 14] = \"OP_PUSHBYTES_14\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_15\"] = 15] = \"OP_PUSHBYTES_15\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_16\"] = 16] = \"OP_PUSHBYTES_16\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_17\"] = 17] = \"OP_PUSHBYTES_17\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_18\"] = 18] = \"OP_PUSHBYTES_18\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_19\"] = 19] = \"OP_PUSHBYTES_19\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_20\"] = 20] = \"OP_PUSHBYTES_20\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_21\"] = 21] = \"OP_PUSHBYTES_21\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_22\"] = 22] = \"OP_PUSHBYTES_22\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_23\"] = 23] = \"OP_PUSHBYTES_23\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_24\"] = 24] = \"OP_PUSHBYTES_24\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_25\"] = 25] = \"OP_PUSHBYTES_25\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_26\"] = 26] = \"OP_PUSHBYTES_26\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_27\"] = 27] = \"OP_PUSHBYTES_27\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_28\"] = 28] = \"OP_PUSHBYTES_28\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_29\"] = 29] = \"OP_PUSHBYTES_29\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_30\"] = 30] = \"OP_PUSHBYTES_30\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_31\"] = 31] = \"OP_PUSHBYTES_31\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_32\"] = 32] = \"OP_PUSHBYTES_32\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_33\"] = 33] = \"OP_PUSHBYTES_33\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_34\"] = 34] = \"OP_PUSHBYTES_34\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_35\"] = 35] = \"OP_PUSHBYTES_35\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_36\"] = 36] = \"OP_PUSHBYTES_36\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_37\"] = 37] = \"OP_PUSHBYTES_37\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_38\"] = 38] = \"OP_PUSHBYTES_38\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_39\"] = 39] = \"OP_PUSHBYTES_39\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_40\"] = 40] = \"OP_PUSHBYTES_40\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_41\"] = 41] = \"OP_PUSHBYTES_41\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_42\"] = 42] = \"OP_PUSHBYTES_42\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_43\"] = 43] = \"OP_PUSHBYTES_43\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_44\"] = 44] = \"OP_PUSHBYTES_44\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_45\"] = 45] = \"OP_PUSHBYTES_45\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_46\"] = 46] = \"OP_PUSHBYTES_46\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_47\"] = 47] = \"OP_PUSHBYTES_47\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_48\"] = 48] = \"OP_PUSHBYTES_48\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_49\"] = 49] = \"OP_PUSHBYTES_49\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_50\"] = 50] = \"OP_PUSHBYTES_50\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_51\"] = 51] = \"OP_PUSHBYTES_51\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_52\"] = 52] = \"OP_PUSHBYTES_52\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_53\"] = 53] = \"OP_PUSHBYTES_53\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_54\"] = 54] = \"OP_PUSHBYTES_54\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_55\"] = 55] = \"OP_PUSHBYTES_55\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_56\"] = 56] = \"OP_PUSHBYTES_56\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_57\"] = 57] = \"OP_PUSHBYTES_57\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_58\"] = 58] = \"OP_PUSHBYTES_58\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_59\"] = 59] = \"OP_PUSHBYTES_59\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_60\"] = 60] = \"OP_PUSHBYTES_60\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_61\"] = 61] = \"OP_PUSHBYTES_61\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_62\"] = 62] = \"OP_PUSHBYTES_62\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_63\"] = 63] = \"OP_PUSHBYTES_63\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_64\"] = 64] = \"OP_PUSHBYTES_64\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_65\"] = 65] = \"OP_PUSHBYTES_65\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_66\"] = 66] = \"OP_PUSHBYTES_66\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_67\"] = 67] = \"OP_PUSHBYTES_67\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_68\"] = 68] = \"OP_PUSHBYTES_68\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_69\"] = 69] = \"OP_PUSHBYTES_69\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_70\"] = 70] = \"OP_PUSHBYTES_70\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_71\"] = 71] = \"OP_PUSHBYTES_71\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_72\"] = 72] = \"OP_PUSHBYTES_72\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_73\"] = 73] = \"OP_PUSHBYTES_73\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_74\"] = 74] = \"OP_PUSHBYTES_74\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHBYTES_75\"] = 75] = \"OP_PUSHBYTES_75\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHDATA_1\"] = 76] = \"OP_PUSHDATA_1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHDATA_2\"] = 77] = \"OP_PUSHDATA_2\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PUSHDATA_4\"] = 78] = \"OP_PUSHDATA_4\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_1NEGATE\"] = 79] = \"OP_1NEGATE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RESERVED\"] = 80] = \"OP_RESERVED\";\n    /**\n     * A.K.A. `OP_TRUE`\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_1\"] = 81] = \"OP_1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2\"] = 82] = \"OP_2\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_3\"] = 83] = \"OP_3\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_4\"] = 84] = \"OP_4\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_5\"] = 85] = \"OP_5\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_6\"] = 86] = \"OP_6\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_7\"] = 87] = \"OP_7\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_8\"] = 88] = \"OP_8\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_9\"] = 89] = \"OP_9\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_10\"] = 90] = \"OP_10\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_11\"] = 91] = \"OP_11\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_12\"] = 92] = \"OP_12\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_13\"] = 93] = \"OP_13\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_14\"] = 94] = \"OP_14\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_15\"] = 95] = \"OP_15\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_16\"] = 96] = \"OP_16\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP\"] = 97] = \"OP_NOP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_VER\"] = 98] = \"OP_VER\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_IF\"] = 99] = \"OP_IF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOTIF\"] = 100] = \"OP_NOTIF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_VERIF\"] = 101] = \"OP_VERIF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_VERNOTIF\"] = 102] = \"OP_VERNOTIF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ELSE\"] = 103] = \"OP_ELSE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ENDIF\"] = 104] = \"OP_ENDIF\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_VERIFY\"] = 105] = \"OP_VERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RETURN\"] = 106] = \"OP_RETURN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TOALTSTACK\"] = 107] = \"OP_TOALTSTACK\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_FROMALTSTACK\"] = 108] = \"OP_FROMALTSTACK\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2DROP\"] = 109] = \"OP_2DROP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2DUP\"] = 110] = \"OP_2DUP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_3DUP\"] = 111] = \"OP_3DUP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2OVER\"] = 112] = \"OP_2OVER\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2ROT\"] = 113] = \"OP_2ROT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2SWAP\"] = 114] = \"OP_2SWAP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_IFDUP\"] = 115] = \"OP_IFDUP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_DEPTH\"] = 116] = \"OP_DEPTH\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_DROP\"] = 117] = \"OP_DROP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_DUP\"] = 118] = \"OP_DUP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NIP\"] = 119] = \"OP_NIP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OVER\"] = 120] = \"OP_OVER\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_PICK\"] = 121] = \"OP_PICK\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ROLL\"] = 122] = \"OP_ROLL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ROT\"] = 123] = \"OP_ROT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SWAP\"] = 124] = \"OP_SWAP\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TUCK\"] = 125] = \"OP_TUCK\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CAT\"] = 126] = \"OP_CAT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SPLIT\"] = 127] = \"OP_SPLIT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NUM2BIN\"] = 128] = \"OP_NUM2BIN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_BIN2NUM\"] = 129] = \"OP_BIN2NUM\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SIZE\"] = 130] = \"OP_SIZE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_INVERT\"] = 131] = \"OP_INVERT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_AND\"] = 132] = \"OP_AND\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OR\"] = 133] = \"OP_OR\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_XOR\"] = 134] = \"OP_XOR\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_EQUAL\"] = 135] = \"OP_EQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_EQUALVERIFY\"] = 136] = \"OP_EQUALVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RESERVED1\"] = 137] = \"OP_RESERVED1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RESERVED2\"] = 138] = \"OP_RESERVED2\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_1ADD\"] = 139] = \"OP_1ADD\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_1SUB\"] = 140] = \"OP_1SUB\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2MUL\"] = 141] = \"OP_2MUL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_2DIV\"] = 142] = \"OP_2DIV\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NEGATE\"] = 143] = \"OP_NEGATE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ABS\"] = 144] = \"OP_ABS\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOT\"] = 145] = \"OP_NOT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_0NOTEQUAL\"] = 146] = \"OP_0NOTEQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ADD\"] = 147] = \"OP_ADD\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SUB\"] = 148] = \"OP_SUB\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_MUL\"] = 149] = \"OP_MUL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_DIV\"] = 150] = \"OP_DIV\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_MOD\"] = 151] = \"OP_MOD\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_LSHIFT\"] = 152] = \"OP_LSHIFT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RSHIFT\"] = 153] = \"OP_RSHIFT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_BOOLAND\"] = 154] = \"OP_BOOLAND\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_BOOLOR\"] = 155] = \"OP_BOOLOR\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NUMEQUAL\"] = 156] = \"OP_NUMEQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NUMEQUALVERIFY\"] = 157] = \"OP_NUMEQUALVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NUMNOTEQUAL\"] = 158] = \"OP_NUMNOTEQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_LESSTHAN\"] = 159] = \"OP_LESSTHAN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_GREATERTHAN\"] = 160] = \"OP_GREATERTHAN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_LESSTHANOREQUAL\"] = 161] = \"OP_LESSTHANOREQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_GREATERTHANOREQUAL\"] = 162] = \"OP_GREATERTHANOREQUAL\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_MIN\"] = 163] = \"OP_MIN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_MAX\"] = 164] = \"OP_MAX\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_WITHIN\"] = 165] = \"OP_WITHIN\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_RIPEMD160\"] = 166] = \"OP_RIPEMD160\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SHA1\"] = 167] = \"OP_SHA1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_SHA256\"] = 168] = \"OP_SHA256\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_HASH160\"] = 169] = \"OP_HASH160\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_HASH256\"] = 170] = \"OP_HASH256\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CODESEPARATOR\"] = 171] = \"OP_CODESEPARATOR\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKSIG\"] = 172] = \"OP_CHECKSIG\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKSIGVERIFY\"] = 173] = \"OP_CHECKSIGVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKMULTISIG\"] = 174] = \"OP_CHECKMULTISIG\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKMULTISIGVERIFY\"] = 175] = \"OP_CHECKMULTISIGVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP1\"] = 176] = \"OP_NOP1\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKLOCKTIMEVERIFY\"] = 177] = \"OP_CHECKLOCKTIMEVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKSEQUENCEVERIFY\"] = 178] = \"OP_CHECKSEQUENCEVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP4\"] = 179] = \"OP_NOP4\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP5\"] = 180] = \"OP_NOP5\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP6\"] = 181] = \"OP_NOP6\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP7\"] = 182] = \"OP_NOP7\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP8\"] = 183] = \"OP_NOP8\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP9\"] = 184] = \"OP_NOP9\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_NOP10\"] = 185] = \"OP_NOP10\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKDATASIG\"] = 186] = \"OP_CHECKDATASIG\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_CHECKDATASIGVERIFY\"] = 187] = \"OP_CHECKDATASIGVERIFY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_REVERSEBYTES\"] = 188] = \"OP_REVERSEBYTES\";\n    /**\n     * First codepoint left undefined before nullary introspection operations.\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN189\"] = 189] = \"OP_UNKNOWN189\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN190\"] = 190] = \"OP_UNKNOWN190\";\n    /**\n     * Last codepoint left undefined before nullary introspection operations.\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN191\"] = 191] = \"OP_UNKNOWN191\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_INPUTINDEX\"] = 192] = \"OP_INPUTINDEX\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_ACTIVEBYTECODE\"] = 193] = \"OP_ACTIVEBYTECODE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TXVERSION\"] = 194] = \"OP_TXVERSION\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TXINPUTCOUNT\"] = 195] = \"OP_TXINPUTCOUNT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TXOUTPUTCOUNT\"] = 196] = \"OP_TXOUTPUTCOUNT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_TXLOCKTIME\"] = 197] = \"OP_TXLOCKTIME\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOVALUE\"] = 198] = \"OP_UTXOVALUE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOBYTECODE\"] = 199] = \"OP_UTXOBYTECODE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPOINTTXHASH\"] = 200] = \"OP_OUTPOINTTXHASH\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPOINTINDEX\"] = 201] = \"OP_OUTPOINTINDEX\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_INPUTBYTECODE\"] = 202] = \"OP_INPUTBYTECODE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_INPUTSEQUENCENUMBER\"] = 203] = \"OP_INPUTSEQUENCENUMBER\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTVALUE\"] = 204] = \"OP_OUTPUTVALUE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTBYTECODE\"] = 205] = \"OP_OUTPUTBYTECODE\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOTOKENCATEGORY\"] = 206] = \"OP_UTXOTOKENCATEGORY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOTOKENCOMMITMENT\"] = 207] = \"OP_UTXOTOKENCOMMITMENT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UTXOTOKENAMOUNT\"] = 208] = \"OP_UTXOTOKENAMOUNT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTTOKENCATEGORY\"] = 209] = \"OP_OUTPUTTOKENCATEGORY\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTTOKENCOMMITMENT\"] = 210] = \"OP_OUTPUTTOKENCOMMITMENT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_OUTPUTTOKENAMOUNT\"] = 211] = \"OP_OUTPUTTOKENAMOUNT\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN212\"] = 212] = \"OP_UNKNOWN212\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN213\"] = 213] = \"OP_UNKNOWN213\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN214\"] = 214] = \"OP_UNKNOWN214\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN215\"] = 215] = \"OP_UNKNOWN215\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN216\"] = 216] = \"OP_UNKNOWN216\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN217\"] = 217] = \"OP_UNKNOWN217\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN218\"] = 218] = \"OP_UNKNOWN218\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN219\"] = 219] = \"OP_UNKNOWN219\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN220\"] = 220] = \"OP_UNKNOWN220\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN221\"] = 221] = \"OP_UNKNOWN221\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN222\"] = 222] = \"OP_UNKNOWN222\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN223\"] = 223] = \"OP_UNKNOWN223\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN224\"] = 224] = \"OP_UNKNOWN224\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN225\"] = 225] = \"OP_UNKNOWN225\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN226\"] = 226] = \"OP_UNKNOWN226\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN227\"] = 227] = \"OP_UNKNOWN227\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN228\"] = 228] = \"OP_UNKNOWN228\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN229\"] = 229] = \"OP_UNKNOWN229\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN230\"] = 230] = \"OP_UNKNOWN230\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN231\"] = 231] = \"OP_UNKNOWN231\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN232\"] = 232] = \"OP_UNKNOWN232\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN233\"] = 233] = \"OP_UNKNOWN233\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN234\"] = 234] = \"OP_UNKNOWN234\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN235\"] = 235] = \"OP_UNKNOWN235\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN236\"] = 236] = \"OP_UNKNOWN236\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN237\"] = 237] = \"OP_UNKNOWN237\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN238\"] = 238] = \"OP_UNKNOWN238\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN239\"] = 239] = \"OP_UNKNOWN239\";\n    /**\n     * A.K.A. `OP_PREFIX_BEGIN`\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN240\"] = 240] = \"OP_UNKNOWN240\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN241\"] = 241] = \"OP_UNKNOWN241\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN242\"] = 242] = \"OP_UNKNOWN242\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN243\"] = 243] = \"OP_UNKNOWN243\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN244\"] = 244] = \"OP_UNKNOWN244\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN245\"] = 245] = \"OP_UNKNOWN245\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN246\"] = 246] = \"OP_UNKNOWN246\";\n    /**\n     * A.K.A. `OP_PREFIX_END`\n     */\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN247\"] = 247] = \"OP_UNKNOWN247\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN248\"] = 248] = \"OP_UNKNOWN248\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN249\"] = 249] = \"OP_UNKNOWN249\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN250\"] = 250] = \"OP_UNKNOWN250\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN251\"] = 251] = \"OP_UNKNOWN251\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN252\"] = 252] = \"OP_UNKNOWN252\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN253\"] = 253] = \"OP_UNKNOWN253\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN254\"] = 254] = \"OP_UNKNOWN254\";\n    OpcodesBCH2023[OpcodesBCH2023[\"OP_UNKNOWN255\"] = 255] = \"OP_UNKNOWN255\";\n})(OpcodesBCH2023 || (OpcodesBCH2023 = {}));\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const OpcodesBCH = OpcodesBCH2023;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Opcodes = OpcodesBCH;\n//# sourceMappingURL=bch-2023-opcodes.js.map","import { isPayToPublicKey, isPayToPublicKeyHash, isPayToScriptHash20, isPayToScriptHash32, } from '../../../address/address.js';\nimport { binToHex, flattenBinArray, numberToBinUint16LE, numberToBinUint32LE, } from '../../../format/format.js';\nimport { encodeTransactionOutput } from '../../../message/message.js';\nimport { OpcodesBCH } from '../bch/2023/bch-2023-opcodes.js';\nimport { OpcodesBTC } from '../btc/btc-opcodes.js';\n/**\n * A type-guard that checks if the provided instruction is malformed.\n * @param instruction - the instruction to check\n */\nexport const authenticationInstructionIsMalformed = (instruction) => 'malformed' in instruction;\n/**\n * A type-guard that checks if the final instruction in the provided array of\n * instructions is malformed. (Only the final instruction can be malformed.)\n * @param instructions - the array of instructions to check\n */\nexport const authenticationInstructionsAreMalformed = (instructions) => instructions.length > 0 &&\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    authenticationInstructionIsMalformed(instructions[instructions.length - 1]);\nexport const authenticationInstructionsArePushInstructions = (instructions) => instructions.every((instruction) => 'data' in instruction);\nconst uint8Bytes = 1;\nconst uint16Bytes = 2;\nconst uint32Bytes = 4;\n/**\n * Decode a little endian number of `length` from virtual machine `bytecode`\n * beginning at `index`.\n */\nexport const decodeLittleEndianNumber = (bytecode, index, length) => {\n    const view = new DataView(bytecode.buffer, index, length);\n    const readAsLittleEndian = true;\n    return length === uint8Bytes\n        ? view.getUint8(0)\n        : length === uint16Bytes\n            ? view.getUint16(0, readAsLittleEndian)\n            : view.getUint32(0, readAsLittleEndian);\n};\n/**\n * Returns the number of bytes used to indicate the length of the push in this\n * operation.\n * @param opcode - an opcode between 0x00 and 0xff\n */\nexport const opcodeToPushLength = (opcode) => ({\n    [76 /* CommonPushOpcodes.OP_PUSHDATA_1 */]: uint8Bytes,\n    [77 /* CommonPushOpcodes.OP_PUSHDATA_2 */]: uint16Bytes,\n    [78 /* CommonPushOpcodes.OP_PUSHDATA_4 */]: uint32Bytes,\n})[opcode] ?? 0;\n/**\n * Decode one instruction from the provided virtual machine bytecode.\n *\n * Returns an object with an `instruction` referencing a\n * {@link AuthenticationInstructionMaybeMalformed}, and a `nextIndex` indicating\n * the next index from which to read. If the next index is greater than or equal\n * to the length of the bytecode, the bytecode has been fully decoded.\n *\n * The final {@link AuthenticationInstructionMaybeMalformed} in the bytecode may\n * be malformed if 1) the final operation is a push and 2) too few bytes remain\n * for the push operation to complete.\n *\n * @param bytecode - the virtual machine bytecode from which to read the next\n * instruction\n * @param index - the index from which to begin reading\n */\n// eslint-disable-next-line complexity\nexport const decodeAuthenticationInstruction = (bytecode, index) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const opcode = bytecode[index];\n    if (opcode > 78 /* CommonPushOpcodes.OP_PUSHDATA_4 */) {\n        return {\n            instruction: {\n                opcode,\n            },\n            nextIndex: index + 1,\n        };\n    }\n    const lengthBytes = opcodeToPushLength(opcode);\n    if (lengthBytes !== 0 && index + lengthBytes >= bytecode.length) {\n        const sliceStart = index + 1;\n        const sliceEnd = sliceStart + lengthBytes;\n        return {\n            instruction: {\n                expectedLengthBytes: lengthBytes,\n                length: bytecode.slice(sliceStart, sliceEnd),\n                malformed: true,\n                opcode,\n            },\n            nextIndex: sliceEnd,\n        };\n    }\n    const dataBytes = lengthBytes === 0\n        ? opcode\n        : decodeLittleEndianNumber(bytecode, index + 1, lengthBytes);\n    const dataStart = index + 1 + lengthBytes;\n    const dataEnd = dataStart + dataBytes;\n    return {\n        instruction: {\n            data: bytecode.slice(dataStart, dataEnd),\n            ...(dataEnd > bytecode.length\n                ? {\n                    expectedDataBytes: dataEnd - dataStart,\n                    malformed: true,\n                }\n                : undefined),\n            opcode,\n        },\n        nextIndex: dataEnd,\n    };\n};\n/**\n * @param instruction - the {@link AuthenticationInstruction} to clone.\n * @returns A copy of the provided {@link AuthenticationInstruction}.\n *\n * @deprecated use `structuredClone` instead\n */\nexport const cloneAuthenticationInstruction = (instruction) => ({\n    ...('data' in instruction ? { data: instruction.data } : {}),\n    opcode: instruction.opcode,\n});\n/**\n * Decode authentication virtual machine bytecode (`lockingBytecode` or\n * `unlockingBytecode`) into {@link AuthenticationInstructionsMaybeMalformed}.\n * The method {@link authenticationInstructionsAreMalformed} can be used to\n * check if these instructions include a malformed instruction. If not, they are\n * valid {@link AuthenticationInstructions}.\n *\n * @param bytecode - the authentication virtual machine bytecode to decode\n */\nexport const decodeAuthenticationInstructions = (bytecode) => {\n    const instructions = [];\n    // eslint-disable-next-line functional/no-let\n    let i = 0;\n    // eslint-disable-next-line functional/no-loop-statements\n    while (i < bytecode.length) {\n        const { instruction, nextIndex } = decodeAuthenticationInstruction(bytecode, i);\n        // eslint-disable-next-line functional/no-expression-statements\n        i = nextIndex;\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n        instructions.push(instruction);\n    }\n    return instructions;\n};\n/**\n * OP_0 is the only single-word push. All other push instructions will\n * disassemble to multiple ASM words. (OP_1-OP_16 are handled like normal\n * operations.)\n */\nconst isMultiWordPush = (opcode) => opcode !== 0 /* CommonPushOpcodes.OP_0 */;\nconst formatAsmPushHex = (data) => data.length > 0 ? `0x${binToHex(data)}` : '';\nconst formatMissingBytesAsm = (missing) => `[missing ${missing} byte${missing === 1 ? '' : 's'}]`;\nconst hasMalformedLength = (instruction) => 'length' in instruction;\nconst isPushData = (pushOpcode) => pushOpcode >= 76 /* CommonPushOpcodes.OP_PUSHDATA_1 */;\n/**\n * Disassemble a malformed authentication instruction into a string description.\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param instruction - the {@link AuthenticationInstructionMalformed} to\n * disassemble\n */\nexport const disassembleAuthenticationInstructionMalformed = (opcodes, instruction) => `${opcodes[instruction.opcode] ?? 'OP_UNKNOWN'} ${hasMalformedLength(instruction)\n    ? `${formatAsmPushHex(instruction.length)}${formatMissingBytesAsm(instruction.expectedLengthBytes - instruction.length.length)}`\n    : `${isPushData(instruction.opcode)\n        ? `${instruction.expectedDataBytes} `\n        : ''}${formatAsmPushHex(instruction.data)}${formatMissingBytesAsm(instruction.expectedDataBytes - instruction.data.length)}`}`;\n/**\n * Disassemble a properly-formed authentication instruction into a string\n * description.\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param instruction - the instruction to disassemble\n */\nexport const disassembleAuthenticationInstruction = (opcodes, instruction) => `${opcodes[instruction.opcode] ?? 'OP_UNKNOWN'}${'data' in instruction && isMultiWordPush(instruction.opcode)\n    ? ` ${isPushData(instruction.opcode) ? `${instruction.data.length} ` : ''}${formatAsmPushHex(instruction.data)}`\n    : ''}`;\n/**\n * Disassemble a single {@link AuthenticationInstructionMaybeMalformed} into its\n * ASM representation.\n *\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param instruction - the instruction to disassemble\n */\nexport const disassembleAuthenticationInstructionMaybeMalformed = (opcodes, instruction) => authenticationInstructionIsMalformed(instruction)\n    ? disassembleAuthenticationInstructionMalformed(opcodes, instruction)\n    : disassembleAuthenticationInstruction(opcodes, instruction);\n/**\n * Disassemble an array of {@link AuthenticationInstructionMaybeMalformed}\n * (including potentially malformed instructions) into its ASM representation.\n *\n * This method supports disassembling an array including multiple\n * {@link AuthenticationInstructionMaybeMalformed}s, rather than the more\n * constrained {@link AuthenticationInstructionsMaybeMalformed} (may only\n * include one malformed instruction as the last item in the array).\n *\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param instructions - the array of instructions to disassemble\n */\nexport const disassembleAuthenticationInstructionsMaybeMalformed = (opcodes, instructions) => instructions\n    .map((instruction) => disassembleAuthenticationInstructionMaybeMalformed(opcodes, instruction))\n    .join(' ');\n/**\n * Disassemble authentication bytecode into a lossless ASM representation. (All\n * push operations are represented with the same opcodes used in the bytecode,\n * even when non-minimally encoded.)\n *\n * @param opcodes - a mapping of possible opcodes to their string representation\n * @param bytecode - the authentication bytecode to disassemble\n */\nexport const disassembleBytecode = (opcodes, bytecode) => disassembleAuthenticationInstructionsMaybeMalformed(opcodes, decodeAuthenticationInstructions(bytecode));\n/**\n * Disassemble BCH authentication bytecode into its ASM representation.\n *\n * Note, this method automatically uses the latest BCH instruction set. To\n * manually select an instruction set, use {@link disassembleBytecode}.\n *\n * @param bytecode - the virtual machine bytecode to disassemble\n */\nexport const disassembleBytecodeBCH = (bytecode) => disassembleAuthenticationInstructionsMaybeMalformed(OpcodesBCH, decodeAuthenticationInstructions(bytecode));\n/**\n * Disassemble BTC authentication bytecode into its ASM representation.\n *\n * Note, this method automatically uses the latest BTC instruction set. To\n * manually select an instruction set, use {@link disassembleBytecode}.\n *\n * @param bytecode - the virtual machine bytecode to disassemble\n */\nexport const disassembleBytecodeBTC = (bytecode) => disassembleAuthenticationInstructionsMaybeMalformed(OpcodesBTC, decodeAuthenticationInstructions(bytecode));\n/**\n * Create an object where each key is an opcode identifier and each value is\n * the bytecode value (`Uint8Array`) it represents.\n * @param opcodes - An opcode enum, e.g. {@link OpcodesBCH}\n */\nexport const generateBytecodeMap = (opcodes) => Object.entries(opcodes)\n    .filter((entry) => typeof entry[1] === 'number')\n    .reduce((identifiers, pair) => ({\n    ...identifiers,\n    [pair[0]]: Uint8Array.of(pair[1]),\n}), {});\nconst getInstructionLengthBytes = (instruction) => {\n    const { opcode } = instruction;\n    const expectedLength = opcodeToPushLength(opcode);\n    return expectedLength === uint8Bytes\n        ? Uint8Array.of(instruction.data.length)\n        : expectedLength === uint16Bytes\n            ? numberToBinUint16LE(instruction.data.length)\n            : numberToBinUint32LE(instruction.data.length);\n};\n/**\n * Re-encode a valid authentication instruction.\n * @param instruction - the instruction to encode\n */\nexport const encodeAuthenticationInstruction = (instruction) => Uint8Array.from([\n    instruction.opcode,\n    ...('data' in instruction\n        ? [\n            ...(isPushData(instruction.opcode)\n                ? getInstructionLengthBytes(instruction)\n                : []),\n            ...instruction.data,\n        ]\n        : []),\n]);\n/**\n * Re-encode a malformed authentication instruction.\n * @param instruction - the {@link AuthenticationInstructionMalformed} to encode\n */\nexport const encodeAuthenticationInstructionMalformed = (instruction) => {\n    const { opcode } = instruction;\n    if (hasMalformedLength(instruction)) {\n        return Uint8Array.from([opcode, ...instruction.length]);\n    }\n    if (isPushData(opcode)) {\n        return Uint8Array.from([\n            opcode,\n            ...(opcode === 76 /* CommonPushOpcodes.OP_PUSHDATA_1 */\n                ? Uint8Array.of(instruction.expectedDataBytes)\n                : opcode === 77 /* CommonPushOpcodes.OP_PUSHDATA_2 */\n                    ? numberToBinUint16LE(instruction.expectedDataBytes)\n                    : numberToBinUint32LE(instruction.expectedDataBytes)),\n            ...instruction.data,\n        ]);\n    }\n    return Uint8Array.from([opcode, ...instruction.data]);\n};\n/**\n * Re-encode a potentially-malformed authentication instruction.\n * @param instruction - the {@link AuthenticationInstructionMaybeMalformed}\n * to encode\n */\nexport const encodeAuthenticationInstructionMaybeMalformed = (instruction) => authenticationInstructionIsMalformed(instruction)\n    ? encodeAuthenticationInstructionMalformed(instruction)\n    : encodeAuthenticationInstruction(instruction);\n/**\n * Re-encode an array of valid authentication instructions.\n * @param instructions - the array of valid instructions to encode\n */\nexport const encodeAuthenticationInstructions = (instructions) => flattenBinArray(instructions.map(encodeAuthenticationInstruction));\n/**\n * Re-encode an array of potentially-malformed authentication instructions.\n * @param instructions - the array of\n * {@link AuthenticationInstructionMaybeMalformed}s to encode\n */\nexport const encodeAuthenticationInstructionsMaybeMalformed = (instructions) => flattenBinArray(instructions.map(encodeAuthenticationInstructionMaybeMalformed));\nexport var VmNumberError;\n(function (VmNumberError) {\n    VmNumberError[\"outOfRange\"] = \"Failed to decode VM Number: overflows VM Number range.\";\n    VmNumberError[\"requiresMinimal\"] = \"Failed to decode VM Number: the number is not minimally-encoded.\";\n})(VmNumberError || (VmNumberError = {}));\nexport const isVmNumberError = (value) => value === VmNumberError.outOfRange || value === VmNumberError.requiresMinimal;\nconst typicalMaximumVmNumberByteLength = 8;\n/**\n * This method attempts to decode a VM Number, a format in which numeric values\n * are represented on the stack. (The Satoshi implementation calls this\n * `CScriptNum`.)\n *\n * If `bytes` is a valid VM Number, this method returns the represented number\n * in BigInt format. If `bytes` is not valid, a {@link VmNumberError}\n * is returned.\n *\n * All common operations accepting numeric parameters or pushing numeric values\n * to the stack currently use the VM Number format. The binary format of numbers\n * wouldn't be important if they could only be operated on by arithmetic\n * operators, but since the results of these operations may become input to\n * other operations (e.g. hashing), the specific representation is consensus-\n * critical.\n *\n * @param bytes - a Uint8Array from the stack\n */\n// eslint-disable-next-line complexity\nexport const vmNumberToBigInt = (bytes, { maximumVmNumberByteLength = typicalMaximumVmNumberByteLength, requireMinimalEncoding = true, } = {\n    maximumVmNumberByteLength: typicalMaximumVmNumberByteLength,\n    requireMinimalEncoding: true,\n}) => {\n    if (bytes.length === 0) {\n        return 0n;\n    }\n    if (bytes.length > maximumVmNumberByteLength) {\n        return VmNumberError.outOfRange;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const mostSignificantByte = bytes[bytes.length - 1];\n    const secondMostSignificantByte = bytes[bytes.length - 1 - 1];\n    const allButTheSignBit = 127;\n    const justTheSignBit = 128;\n    if (requireMinimalEncoding &&\n        // eslint-disable-next-line no-bitwise\n        (mostSignificantByte & allButTheSignBit) === 0 &&\n        // eslint-disable-next-line no-bitwise, @typescript-eslint/no-non-null-assertion\n        (bytes.length <= 1 || (secondMostSignificantByte & justTheSignBit) === 0)) {\n        return VmNumberError.requiresMinimal;\n    }\n    const bitsPerByte = 8;\n    const signFlippingByte = 0x80;\n    // eslint-disable-next-line functional/no-let\n    let result = 0n;\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements, no-plusplus\n    for (let byte = 0; byte < bytes.length; byte++) {\n        // eslint-disable-next-line functional/no-expression-statements,  no-bitwise, @typescript-eslint/no-non-null-assertion\n        result |= BigInt(bytes[byte]) << BigInt(byte * bitsPerByte);\n    }\n    /* eslint-disable no-bitwise */\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const isNegative = (bytes[bytes.length - 1] & signFlippingByte) !== 0;\n    return isNegative\n        ? -(result &\n            ~(BigInt(signFlippingByte) << BigInt(bitsPerByte * (bytes.length - 1))))\n        : result;\n    /* eslint-enable no-bitwise */\n};\n/**\n * Convert a BigInt into the VM Number format. See {@link vmNumberToBigInt} for\n * more information.\n *\n * @param integer - the BigInt to encode as a VM Number\n */\n// eslint-disable-next-line complexity\nexport const bigIntToVmNumber = (integer) => {\n    if (integer === 0n) {\n        return new Uint8Array();\n    }\n    const bytes = [];\n    const isNegative = integer < 0;\n    const byteStates = 0xff;\n    const bitsPerByte = 8;\n    // eslint-disable-next-line functional/no-let\n    let remaining = isNegative ? -integer : integer;\n    // eslint-disable-next-line functional/no-loop-statements\n    while (remaining > 0) {\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data, no-bitwise\n        bytes.push(Number(remaining & BigInt(byteStates)));\n        // eslint-disable-next-line functional/no-expression-statements, no-bitwise\n        remaining >>= BigInt(bitsPerByte);\n    }\n    const signFlippingByte = 0x80;\n    // eslint-disable-next-line no-bitwise, functional/no-conditional-statements, @typescript-eslint/no-non-null-assertion\n    if ((bytes[bytes.length - 1] & signFlippingByte) > 0) {\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n        bytes.push(isNegative ? signFlippingByte : 0x00);\n        // eslint-disable-next-line functional/no-conditional-statements\n    }\n    else if (isNegative) {\n        // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data, no-bitwise\n        bytes[bytes.length - 1] |= signFlippingByte;\n    }\n    return new Uint8Array(bytes);\n};\n/**\n * Returns true if the provided stack item is \"truthy\" in the sense required\n * by several operations (anything but zero and \"negative zero\").\n *\n * The Satoshi implementation calls this method `CastToBool`.\n *\n * @param item - the stack item to check for truthiness\n */\nexport const stackItemIsTruthy = (item) => {\n    const signFlippingByte = 0x80;\n    // eslint-disable-next-line functional/no-let, functional/no-loop-statements, no-plusplus\n    for (let i = 0; i < item.length; i++) {\n        if (item[i] !== 0) {\n            if (i === item.length - 1 && item[i] === signFlippingByte) {\n                return false;\n            }\n            return true;\n        }\n    }\n    return false;\n};\n/**\n * Convert a boolean into VM Number format (the type used to express\n * boolean values emitted by several operations).\n *\n * @param value - the boolean value to convert\n */\nexport const booleanToVmNumber = (value) => value ? bigIntToVmNumber(1n) : bigIntToVmNumber(0n);\n/**\n * From C++ implementation:\n * Note that IsPushOnly() *does* consider OP_RESERVED to be a push-type\n * opcode, however execution of OP_RESERVED fails, so it's not relevant to\n * P2SH/BIP62 as the scriptSig would fail prior to the P2SH special\n * validation code being executed.\n */\nexport const isPushOperation = (opcode) => opcode <= 96 /* Opcodes.OP_16 */;\nexport const isPushOnly = (bytecode) => {\n    const instructions = decodeAuthenticationInstructions(bytecode);\n    return instructions.every((instruction) => isPushOperation(instruction.opcode));\n};\nexport const isPushOnlyAccurate = (bytecode) => {\n    const instructions = decodeAuthenticationInstructions(bytecode);\n    return (!authenticationInstructionsAreMalformed(instructions) &&\n        authenticationInstructionsArePushInstructions(instructions));\n};\n/**\n * Test if the provided locking bytecode is an arbitrary data output.\n * A.K.A. `TX_NULL_DATA`, \"data carrier\", OP_RETURN output\n * @param lockingBytecode - the locking bytecode to test\n */\nexport const isArbitraryDataOutput = (lockingBytecode) => lockingBytecode.length >= 1 &&\n    lockingBytecode[0] === 106 /* Opcodes.OP_RETURN */ &&\n    isPushOnly(lockingBytecode.slice(1));\n/**\n * Given a number of bytes and a fee rate in satoshis-per-kilobyte, return the\n * minimum required fee. This calculation in important for standardness in dust\n * threshold calculation.\n *\n * @param length - the number of bytes for which the fee is to be paid\n * @param feeRateSatsPerKb - the fee rate in satoshis per 1000 bytes\n */\nexport const getMinimumFee = (length, feeRateSatsPerKb) => {\n    if (length < 1n)\n        return 0n;\n    const truncated = (length * feeRateSatsPerKb) / BigInt(1000 /* Dust.bytesPerKb */);\n    return truncated === 0n ? 1n : truncated;\n};\nexport const getDustThresholdForLength = (outputLength, dustRelayFeeSatPerKb = BigInt(1000 /* Dust.standardDustRelayFee */)) => {\n    const expectedTotalLength = outputLength + 148 /* Dust.p2pkhInputLength */;\n    return (BigInt(3 /* Dust.minimumFeeMultiple */) *\n        getMinimumFee(BigInt(expectedTotalLength), dustRelayFeeSatPerKb));\n};\n/**\n * Given an {@link Output} and (optionally) a dust relay fee in\n * satoshis-per-kilobyte, return the minimum satoshi value for this output to\n * not be considered a \"dust output\". **For nodes to relay or mine a transaction\n * with this output, the output must have a satoshi value greater than or equal\n * to this threshold.**\n *\n * By standardness, if an output is expected to cost more than 1/3 of it's value\n * in fees to spend, it is considered dust. When calculating the expected fee,\n * the input size is assumed to be (at least) the size of a typical P2PKH input\n * spent using a 72-byte ECDSA signature, 148 bytes:\n * - Outpoint transaction hash: 32 bytes\n * - Outpoint index: 4 bytes\n * - Unlocking bytecode length: 1 byte\n * - Push of 72-byte ECDSA signature: 72 + 1 byte\n * - Push of public key: 33 + 1 byte\n * - Sequence number: 4 bytes\n *\n * The encoded length of the serialized output is added to 148 bytes, and the\n * dust threshold for the output is 3 times the minimum fee for the total bytes.\n * For a P2PKH output (34 bytes) and the standard 1000 sat/Kb dust relay fee,\n * this results in a dust limit of `546` satoshis (`(34+148)*3*1000/1000`).\n *\n * Note, arbitrary data outputs are not required to meet the dust limit as\n * they are provably unspendable and can be pruned from the UTXO set.\n *\n * @param output - the output to test\n * @param dustRelayFeeSatPerKb - the \"dust relay fee\", defaults to `1000n`\n */\nexport const getDustThreshold = (output, dustRelayFeeSatPerKb = BigInt(1000 /* Dust.standardDustRelayFee */)) => {\n    if (isArbitraryDataOutput(output.lockingBytecode)) {\n        return 0n;\n    }\n    const encodedOutputLength = encodeTransactionOutput(output).length;\n    return getDustThresholdForLength(encodedOutputLength, dustRelayFeeSatPerKb);\n};\n/**\n * Given an {@link Output} and (optionally) a dust relay fee in\n * satoshis-per-kilobyte, return `true` if the provided output is considered\n * a \"dust output\", or `false` otherwise.\n *\n * @param output - the output to test\n * @param dustRelayFeeSatPerKb - the \"dust relay fee\", defaults to `1000n`\n */\nexport const isDustOutput = (output, dustRelayFeeSatPerKb = BigInt(1000 /* Dust.standardDustRelayFee */)) => output.valueSatoshis < getDustThreshold(output, dustRelayFeeSatPerKb);\nexport const isValidUncompressedPublicKeyEncoding = (publicKey) => publicKey.length === 65 /* PublicKey.uncompressedByteLength */ &&\n    publicKey[0] === 4 /* PublicKey.uncompressedHeaderByte */;\nexport const isValidCompressedPublicKeyEncoding = (publicKey) => publicKey.length === 33 /* PublicKey.compressedByteLength */ &&\n    (publicKey[0] === 2 /* PublicKey.compressedHeaderByteEven */ ||\n        publicKey[0] === 3 /* PublicKey.compressedHeaderByteOdd */);\nexport const isValidPublicKeyEncoding = (publicKey) => isValidCompressedPublicKeyEncoding(publicKey) ||\n    isValidUncompressedPublicKeyEncoding(publicKey);\n// eslint-disable-next-line complexity\nexport const pushNumberOpcodeToNumber = (opcode) => {\n    if (opcode === 0 /* Opcodes.OP_0 */) {\n        return 0;\n    }\n    if (opcode === 79 /* Opcodes.OP_1NEGATE */) {\n        return -1;\n    }\n    if (!Number.isInteger(opcode) ||\n        opcode < 81 /* Opcodes.OP_1 */ ||\n        opcode > 96 /* Opcodes.OP_16 */) {\n        return false;\n    }\n    return opcode - 80 /* Opcodes.OP_RESERVED */;\n};\n// eslint-disable-next-line complexity\nexport const isSimpleMultisig = (lockingBytecode) => {\n    const instructions = decodeAuthenticationInstructions(lockingBytecode);\n    if (authenticationInstructionsAreMalformed(instructions)) {\n        return false;\n    }\n    const lastIndex = instructions.length - 1;\n    if (instructions.length < 4 /* Multisig.minimumInstructions */ ||\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        instructions[lastIndex].opcode !== 174 /* Opcodes.OP_CHECKMULTISIG */) {\n        return false;\n    }\n    /**\n     * The required count of signers (the `m` in `m-of-n`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const m = pushNumberOpcodeToNumber(instructions[0].opcode);\n    /**\n     * The total count of signers (the `n` in `m-of-n`).\n     */\n    const n = pushNumberOpcodeToNumber(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    instructions[lastIndex - 1].opcode);\n    if (n === false || m === false) {\n        return false;\n    }\n    const publicKeyInstructions = instructions.slice(1 /* Multisig.keyStart */, -2 /* Multisig.keyEnd */);\n    if (!authenticationInstructionsArePushInstructions(publicKeyInstructions)) {\n        return false;\n    }\n    const publicKeys = publicKeyInstructions.map((instruction) => instruction.data);\n    if (publicKeys.some((key) => !isValidPublicKeyEncoding(key))) {\n        return false;\n    }\n    return { m, n, publicKeys };\n};\n// eslint-disable-next-line complexity\nexport const isStandardMultisig = (lockingBytecode) => {\n    const multisigProperties = isSimpleMultisig(lockingBytecode);\n    if (multisigProperties === false) {\n        return false;\n    }\n    const { m, n } = multisigProperties;\n    if (n < 1 || n > 3 /* Multisig.maximumStandardN */ || m < 1 || m > n) {\n        return false;\n    }\n    return true;\n};\nexport const isStandardOutputBytecode = (lockingBytecode) => isPayToPublicKeyHash(lockingBytecode) ||\n    isPayToScriptHash20(lockingBytecode) ||\n    isPayToPublicKey(lockingBytecode) ||\n    isArbitraryDataOutput(lockingBytecode) ||\n    isStandardMultisig(lockingBytecode);\n// eslint-disable-next-line complexity\nexport const isStandardOutputBytecode2023 = (lockingBytecode) => isPayToPublicKeyHash(lockingBytecode) ||\n    isPayToScriptHash20(lockingBytecode) ||\n    isPayToScriptHash32(lockingBytecode) ||\n    isPayToPublicKey(lockingBytecode) ||\n    isArbitraryDataOutput(lockingBytecode) ||\n    isStandardMultisig(lockingBytecode);\n/**\n * Test a stack item for the SegWit Recovery Rules activated in `BCH_2019_05`.\n *\n * @param bytecode - the stack item to test\n */\n// eslint-disable-next-line complexity\nexport const isWitnessProgram = (bytecode) => {\n    const correctLength = bytecode.length >= 4 /* SegWit.minimumLength */ &&\n        bytecode.length <= 42 /* SegWit.maximumLength */;\n    const validVersionPush = bytecode[0] === 0 /* SegWit.OP_0 */ ||\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        (bytecode[0] >= 81 /* SegWit.OP_1 */ && bytecode[0] <= 96 /* SegWit.OP_16 */);\n    const correctLengthByte = \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    bytecode[1] + 2 /* SegWit.versionAndLengthBytes */ === bytecode.length;\n    return correctLength && validVersionPush && correctLengthByte;\n};\n//# sourceMappingURL=instruction-sets-utils.js.map","import { ConsensusCommon } from './consensus.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { bigIntToVmNumber, isVmNumberError, vmNumberToBigInt, } from './instruction-sets-utils.js';\nexport const incrementOperationCount = (operation) => (state) => {\n    const nextState = operation(state);\n    // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n    nextState.operationCount += 1;\n    return nextState;\n};\nexport const conditionallyEvaluate = (operation) => (state) => state.controlStack.every((item) => item) ? operation(state) : state;\n/**\n * Map a function over each operation in an {@link InstructionSet.operations}\n * object, assigning the result to the same `opcode` in the resulting object.\n * @param operationMap - an operations map from an {@link InstructionSet}\n * @param combinators - a list of functions to apply (in order) to\n * each operation\n */\nexport const mapOverOperations = (combinators, operationMap) => Object.keys(operationMap).reduce((result, opcode) => ({\n    ...result,\n    [opcode]: combinators.reduce((op, combinator) => combinator(op), \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    operationMap[Number(opcode)]),\n}), {});\n/**\n * Pop one stack item off of `state.stack` and provide that item to `operation`.\n */\nexport const useOneStackItem = (state, operation) => {\n    // eslint-disable-next-line functional/immutable-data\n    const item = state.stack.pop();\n    if (item === undefined) {\n        return applyError(state, AuthenticationErrorCommon.emptyStack);\n    }\n    return operation(state, [item]);\n};\nexport const useTwoStackItems = (state, operation) => useOneStackItem(state, (nextState, [valueTwo]) => useOneStackItem(nextState, (lastState, [valueTop]) => operation(lastState, [valueTop, valueTwo])));\nexport const useThreeStackItems = (state, operation) => useOneStackItem(state, (nextState, [valueThree]) => useTwoStackItems(nextState, (lastState, [valueTop, valueTwo]) => operation(lastState, [valueTop, valueTwo, valueThree])));\nexport const useFourStackItems = (state, operation) => useTwoStackItems(state, (nextState, [valueThree, valueFour]) => useTwoStackItems(nextState, (lastState, [valueTop, valueTwo]) => operation(lastState, [valueTop, valueTwo, valueThree, valueFour])));\nexport const useSixStackItems = (state, operation) => useFourStackItems(state, (nextState, [valueThree, valueFour, valueFive, valueSix]) => useTwoStackItems(nextState, (lastState, [valueTop, valueTwo]) => operation(lastState, [\n    valueTop,\n    valueTwo,\n    valueThree,\n    valueFour,\n    valueFive,\n    valueSix,\n])));\nconst typicalMaximumVmNumberByteLength = 8;\nexport const useOneVmNumber = (state, operation, { maximumVmNumberByteLength = typicalMaximumVmNumberByteLength, requireMinimalEncoding = true, } = {\n    maximumVmNumberByteLength: typicalMaximumVmNumberByteLength,\n    requireMinimalEncoding: true,\n}) => useOneStackItem(state, (nextState, [item]) => {\n    const value = vmNumberToBigInt(item, {\n        maximumVmNumberByteLength,\n        requireMinimalEncoding,\n    });\n    if (isVmNumberError(value)) {\n        return applyError(state, AuthenticationErrorCommon.invalidVmNumber);\n    }\n    return operation(nextState, [value]);\n});\nexport const useTwoVmNumbers = (state, operation, { maximumVmNumberByteLength = typicalMaximumVmNumberByteLength, requireMinimalEncoding = true, } = {\n    maximumVmNumberByteLength: typicalMaximumVmNumberByteLength,\n    requireMinimalEncoding: true,\n}) => useOneVmNumber(state, (nextState, [secondValue]) => useOneVmNumber(nextState, (lastState, [firstValue]) => operation(lastState, [firstValue, secondValue]), {\n    maximumVmNumberByteLength,\n    requireMinimalEncoding,\n}), {\n    maximumVmNumberByteLength,\n    requireMinimalEncoding,\n});\nexport const useThreeVmNumbers = (state, operation, { maximumVmNumberByteLength = typicalMaximumVmNumberByteLength, requireMinimalEncoding = true, } = {\n    maximumVmNumberByteLength: typicalMaximumVmNumberByteLength,\n    requireMinimalEncoding: true,\n}) => useTwoVmNumbers(state, (nextState, [secondValue, thirdValue]) => useOneVmNumber(nextState, (lastState, [firstValue]) => operation(lastState, [firstValue, secondValue, thirdValue]), {\n    maximumVmNumberByteLength,\n    requireMinimalEncoding,\n}), {\n    maximumVmNumberByteLength,\n    requireMinimalEncoding,\n});\n/**\n * Return the provided state with the provided value pushed to its stack.\n * @param state - the state to update and return\n * @param data - the value to push to the stack\n */\nexport const pushToStack = (state, \n// eslint-disable-next-line functional/functional-parameters\n...data) => {\n    // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n    state.stack.push(...data);\n    return state;\n};\n/**\n * If the provided item exceeds the maximum stack item length, apply an error.\n * Otherwise, return the provided state with the item pushed to its stack.\n * @param state - the state to update and return\n * @param item - the value to push to the stack\n */\nexport const pushToStackChecked = (state, item, maximumLength = ConsensusCommon.maximumStackItemLength) => {\n    if (item.length > maximumLength) {\n        return applyError(state, `${AuthenticationErrorCommon.exceededMaximumStackItemLength} Item length: ${item.length} bytes.`);\n    }\n    // eslint-disable-next-line functional/no-expression-statements, functional/immutable-data\n    state.stack.push(item);\n    return state;\n};\n/**\n * Return the provided state with the VM number pushed to its stack.\n * @param state - the state to update and return\n * @param vmNumber - the number to push to the stack\n */\nexport const pushToStackVmNumber = (state, vmNumber) => pushToStack(state, bigIntToVmNumber(vmNumber));\n/**\n * If the provided number is outside the VM number range, apply an error.\n * Otherwise, return the provided state with the VM number pushed to its stack.\n * @param state - the state to update and return\n * @param vmNumber - the VM number to push to the stack\n */\nexport const pushToStackVmNumberChecked = (state, vmNumber, minVmNumber = BigInt(ConsensusCommon.minVmNumber), maxVmNumber = BigInt(ConsensusCommon.maxVmNumber)) => {\n    if (vmNumber > maxVmNumber || vmNumber < minVmNumber) {\n        return applyError(state, AuthenticationErrorCommon.overflowsVmNumberRange);\n    }\n    return pushToStackVmNumber(state, vmNumber);\n};\nexport const combineOperations = (firstOperation, secondOperation) => (state) => secondOperation(firstOperation(state));\n//# sourceMappingURL=combinators.js.map","import { numberToBinUint16LE, numberToBinUint32LE, } from '../../../format/format.js';\nimport { pushToStack } from './combinators.js';\nimport { ConsensusCommon } from './consensus.js';\nimport { applyError, AuthenticationErrorCommon } from './errors.js';\nimport { bigIntToVmNumber } from './instruction-sets-utils.js';\n/**\n * Returns the minimal bytecode required to push the provided `data` to the\n * stack.\n *\n * @remarks\n * This method conservatively encodes a `Uint8Array` as a data push. For VM\n * Numbers that can be pushed using a single opcode (-1 through 16), the\n * equivalent bytecode value is returned. Other `data` values will be prefixed\n * with the proper opcode and push length bytes (if necessary) to create the\n * minimal push instruction.\n *\n * Note, while some single-byte VM Number pushes will be minimally-encoded by\n * this method, all larger inputs will be encoded as-is (it cannot be assumed\n * that inputs are intended to be used as VM Numbers). To encode the push of a\n * VM Number, minimally-encode the number before passing it to this\n * method, e.g.:\n * `encodeDataPush(bigIntToVmNumber(decodeVmNumber(nonMinimalNumber)))`.\n *\n * The maximum `bytecode` length that can be encoded for a push in the Bitcoin\n * system is `4294967295` (~4GB). This method assumes a smaller input – if\n * `bytecode` has the potential to be longer, it should be checked (and the\n * error handled) prior to calling this method.\n *\n * @param data - the Uint8Array to push to the stack\n */\n// eslint-disable-next-line complexity\nexport const encodeDataPush = (data) => data.length <= 75 /* PushOperationConstants.maximumPushByteOperationSize */\n    ? data.length === 0\n        ? Uint8Array.of(0)\n        : data.length === 1\n            ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                data[0] !== 0 && data[0] <= 16 /* PushOperationConstants.pushNumberOpcodes */\n                    ? Uint8Array.of(\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    data[0] + 80 /* PushOperationConstants.pushNumberOpcodesOffset */)\n                    : data[0] === 129 /* PushOperationConstants.negativeOne */\n                        ? Uint8Array.of(79 /* PushOperationConstants.OP_1NEGATE */)\n                        : Uint8Array.from([1, ...data])\n            : Uint8Array.from([data.length, ...data])\n    : data.length <= 255 /* PushOperationConstants.maximumPushData1Size */\n        ? Uint8Array.from([\n            76 /* PushOperationConstants.OP_PUSHDATA_1 */,\n            data.length,\n            ...data,\n        ])\n        : data.length <= 65535 /* PushOperationConstants.maximumPushData2Size */\n            ? Uint8Array.from([\n                77 /* PushOperationConstants.OP_PUSHDATA_2 */,\n                ...numberToBinUint16LE(data.length),\n                ...data,\n            ])\n            : Uint8Array.from([\n                78 /* PushOperationConstants.OP_PUSHDATA_4 */,\n                ...numberToBinUint32LE(data.length),\n                ...data,\n            ]);\n/**\n * Returns true if the provided `data` is minimally-encoded by the provided\n * `opcode`.\n * @param opcode - the opcode used to push `data`\n * @param data - the contents of the push\n */\n// eslint-disable-next-line complexity\nexport const isMinimalDataPush = (opcode, data) => {\n    if (data.length === 0) {\n        return opcode === 0 /* PushOperationConstants.OP_0 */;\n    }\n    if (data.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        if (data[0] >= 1 && data[0] <= 16 /* PushOperationConstants.pushNumberOpcodes */) {\n            return (\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            opcode === data[0] + 80 /* PushOperationConstants.pushNumberOpcodesOffset */);\n        }\n        if (data[0] === 129 /* PushOperationConstants.negativeOne */) {\n            return opcode === 79 /* PushOperationConstants.OP_1NEGATE */;\n        }\n        return true;\n    }\n    if (data.length <= 75 /* PushOperationConstants.maximumPushByteOperationSize */) {\n        return opcode === data.length;\n    }\n    if (data.length <= 255 /* PushOperationConstants.maximumPushData1Size */) {\n        return opcode === 76 /* PushOperationConstants.OP_PUSHDATA_1 */;\n    }\n    if (data.length <= 65535 /* PushOperationConstants.maximumPushData2Size */) {\n        return opcode === 77 /* PushOperationConstants.OP_PUSHDATA_2 */;\n    }\n    if (data.length <= 4294967295 /* PushOperationConstants.maximumPushData4Size */) {\n        return opcode === 78 /* PushOperationConstants.OP_PUSHDATA_4 */;\n    }\n    return false;\n};\nconst executionIsActive = (state) => state.controlStack.every((item) => item);\n// TODO: add tests that verify the order of operations below (are non-minimal pushes OK inside unexecuted conditionals?)\nexport const pushOperation = (maximumPushSize = ConsensusCommon.maximumStackItemLength) => (state) => {\n    const instruction = state.instructions[state.ip];\n    return instruction.data.length > maximumPushSize\n        ? applyError(state, `${AuthenticationErrorCommon.exceededMaximumStackItemLength} Item length: ${instruction.data.length} bytes.`)\n        : executionIsActive(state)\n            ? isMinimalDataPush(instruction.opcode, instruction.data)\n                ? pushToStack(state, instruction.data)\n                : applyError(state, AuthenticationErrorCommon.nonMinimalPush)\n            : state;\n};\n/**\n * @param number - the number that is pushed to the stack by this operation.\n * @returns an operation that pushes a number to the stack.\n */\nexport const pushNumberOperation = (number) => {\n    const value = bigIntToVmNumber(BigInt(number));\n    return (state) => pushToStack(state, value);\n};\n//# sourceMappingURL=push.js.map","import { cashAddressToLockingBytecode, CashAddressNetworkPrefix, CashAddressType, decodeCashAddress, encodeCashAddress } from \"@bitauth/libauth\";\nexport function deriveLockingBytecode(address) {\n    const lock = cashAddressToLockingBytecode(address);\n    if (typeof lock === \"string\")\n        throw lock;\n    return lock.bytecode;\n}\nexport function getFutureBlockDate(currentBlock, futureBlock) {\n    const blocks = futureBlock - currentBlock;\n    var futureDate = new Date();\n    //@ts-ignore\n    futureDate.setTime(futureDate.getTime() + 6E5 * blocks);\n    return futureDate;\n}\nexport function delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n}\nexport function asTokenUnawareP2sh(rawAddress) {\n    const addressInfo = decodeCashAddress(rawAddress);\n    if (typeof addressInfo == \"string\")\n        throw (addressInfo);\n    return encodeCashAddress(addressInfo.prefix, CashAddressType.p2sh, addressInfo.payload);\n}\nexport function isTokenAddress(rawAddress) {\n    const addressInfo = decodeCashAddress(rawAddress);\n    if (typeof addressInfo == \"string\")\n        return false;\n    return addressInfo.type == CashAddressType.p2pkhWithTokens || addressInfo.type == CashAddressType.p2shWithTokens;\n}\nexport function asCsUtxo(u) {\n    return {\n        txid: u.txid,\n        vout: u.vout,\n        satoshis: BigInt(u.satoshis),\n        token: u.token ? {\n            amount: u.token.amount,\n            category: u.token.tokenId,\n            nft: {\n                capability: u.token.capability,\n                commitment: u.token.commitment,\n            }\n        } : undefined\n    };\n}\nexport const prefixFromNetworkMap = {\n    mainnet: CashAddressNetworkPrefix.mainnet,\n    testnet: CashAddressNetworkPrefix.testnet,\n    regtest: CashAddressNetworkPrefix.regtest,\n};\n//# sourceMappingURL=util.js.map","import { encodeDataPush, hash256, bigIntToVmNumber, CashAddressNetworkPrefix, hexToBin, lockingBytecodeToCashAddress } from \"@bitauth/libauth\";\nexport class Coupon {\n    amount;\n    lock;\n    static lockingScript = \"00cc00c694a16900c788c08bc39c\";\n    /**\n     * Return the address for a Coupon\n     *\n     *\n     * @param amount - the threshold amount (sats) to redeem coupon\n     * @param lock - the vault locking bytecode\n     * @param network - the network prefix\n     */\n    static getAddress(amount, lock, network = CashAddressNetworkPrefix.mainnet) {\n        let lockingBytecode = this.getLockingBytecode(amount, lock);\n        let addr = lockingBytecodeToCashAddress(lockingBytecode, network, { tokenSupport: true });\n        if (typeof addr !== 'string')\n            throw (addr);\n        return addr;\n    }\n    /**\n     * Return the unlockingBytecode for a Coupon\n     *\n     *\n     * @param amount - the threshold amount (sats) to redeem coupon\n     * @param lock - the vault locking bytecode\n     */\n    static getUnlockingBytecode(amount, lock) {\n        const amountVm = encodeDataPush(bigIntToVmNumber(BigInt(amount)));\n        const lockVm = encodeDataPush(lock);\n        const lockingScript = hexToBin(this.lockingScript);\n        return new Uint8Array([\n            ...lockVm,\n            ...amountVm,\n            ...lockingScript\n        ]);\n    }\n    /**\n     * Return the lockingBytecode for a Coupon\n     *\n     *\n     * @param amount - the threshold amount (sats) to redeem coupon\n     * @param lock - the Vault locking bytecode\n     */\n    static getLockingBytecode(amount, lock) {\n        return new Uint8Array([\n            ...hexToBin(\"aa20\"),\n            ...hash256(this.getUnlockingBytecode(amount, lock)),\n            ...hexToBin(\"87\")\n        ]);\n    }\n    static asInput(amount, lock, utxo) {\n        return {\n            outpointIndex: utxo.vout,\n            outpointTransactionHash: hexToBin(utxo.txid),\n            sequenceNumber: 0,\n            unlockingBytecode: this.getUnlockingBytecode(amount, lock),\n        };\n    }\n}\n//# sourceMappingURL=coupon.js.map","import { encodeDataPush, hash256, bigIntToVmNumber, CashAddressNetworkPrefix, hexToBin, lockingBytecodeToCashAddress } from \"@bitauth/libauth\";\nimport { Coupon } from \"./coupon\";\nexport class Vault {\n    locktime;\n    static lockingScript = \"c0d3c0d0a06376b17568c0cec0d188c0cdc0c788c0d0c0c693c0d3c0cc939c77\";\n    /**\n     * Return the token address for a Vault\n     *\n     *\n     * @param time - block time of the vault lock\n     * @param network - cashaddress network prefix\n     */\n    static getAddress(time, network = CashAddressNetworkPrefix.mainnet, tokenSupport = true) {\n        let lockingBytecode = this.getLockingBytecode(time);\n        let addr = lockingBytecodeToCashAddress(lockingBytecode, network, { tokenSupport: tokenSupport });\n        if (typeof addr !== 'string')\n            throw (addr);\n        return addr;\n    }\n    /**\n     * Return the coupon for a Vault at specified amount\n     *\n     *\n     * @param amount - the threshold amount (sats) to redeem coupon\n     * @param time - block time of the vault lock\n     */\n    static getCoupon(amount, time, network = CashAddressNetworkPrefix.mainnet) {\n        return Coupon.getAddress(amount, this.getLockingBytecode(time), network);\n    }\n    /**\n     * Return the unlockingBytecode for a Vault\n     *\n     *\n     * @param time - block time of the vault lock\n     */\n    static getUnlockingBytecode(time) {\n        const locktimeVm = encodeDataPush(bigIntToVmNumber(BigInt(time)));\n        const lockingScript = hexToBin(this.lockingScript);\n        return new Uint8Array([\n            ...locktimeVm,\n            ...lockingScript\n        ]);\n    }\n    /**\n     * Return the lockingBytecode for a Vault\n     *\n     *\n     * @param time - block time of the vault lock\n     */\n    static getLockingBytecode(time) {\n        return new Uint8Array([\n            ...hexToBin(\"aa20\"),\n            ...hash256(this.getUnlockingBytecode(time)),\n            ...hexToBin(\"87\")\n        ]);\n    }\n    /**\n     * Return an array of staggered block times\n     *\n     *\n     * @param startTime - block time of the vault lock\n     * @param series - power of 10 to stagger the times\n     * @param limit - length of the array to return\n     */\n    static getSeriesTimes(startTime, series = 3, limit = 10) {\n        const step = Math.pow(10, series);\n        const next = startTime - (startTime % step) + step;\n        return Array.from({ length: limit }, (e, i) => next + (step * i));\n    }\n    /**\n     * Return an array of vaults in a series\n     *\n     *\n     * @param startTime - block time of the vault lock\n     * @param series - power of 10 to stagger the times\n     * @param limit - length of the array to return\n     * @param network - cashaddress network prefix\n     */\n    static getSeries(startTime, series, limit, network = CashAddressNetworkPrefix.mainnet) {\n        let seriesTimes = this.getSeriesTimes(startTime, series, limit);\n        return seriesTimes.map(time => { return this.getAddress(time, network); });\n    }\n    /**\n     * Return an array coupons for vaults in a series\n     *\n     *\n     * @param startTime - block time of the vault lock\n     * @param amount - coupon threshold amount\n     * @param series - power of 10 to stagger the times\n     * @param limit - length of the array to return\n     * @param network - cashaddress network prefix\n     */\n    static getCouponSeries(startTime, amount = 1e8, series, limit, network = CashAddressNetworkPrefix.mainnet) {\n        let seriesTimes = this.getSeriesTimes(startTime, series, limit);\n        return seriesTimes.map(time => {\n            return Coupon.getAddress(amount, this.getLockingBytecode(time), network);\n        });\n    }\n    /**\n    * Return an Unspent Transaction Output as an Input\n    *\n    *\n    * @param time - block time of the vault lock\n    * @param utxo - the unspent transaction output being spent.\n    */\n    static asInput(time, utxo) {\n        return {\n            outpointIndex: utxo.vout,\n            outpointTransactionHash: hexToBin(utxo.txid),\n            sequenceNumber: 0,\n            unlockingBytecode: this.getUnlockingBytecode(time),\n        };\n    }\n    /**\n    * Return an Unspent Transaction Output as an Output\n    *\n    *\n    * @param time - block time of the vault lock\n    * @param utxo - the unspent transaction output being spent.\n    * @param placement - the number of sats being placed *into* the vault.\n    */\n    static asOutput(time, utxo, placement) {\n        return {\n            lockingBytecode: this.getLockingBytecode(time),\n            valueSatoshis: BigInt(utxo.satoshis + placement),\n            token: {\n                amount: utxo.token?.amount - BigInt(placement),\n                category: hexToBin(utxo.token?.tokenId),\n                nft: undefined,\n            },\n        };\n    }\n}\n//# sourceMappingURL=vault.js.map"],"names":["ensure_array_like","array_like_or_iterator","outro_and_destroy_block","block","lookup","transition_out","fix_and_outro_and_destroy_block","update_keyed_each","old_blocks","dirty","get_key","dynamic","ctx","list","node","destroy","create_each_block","next","get_context","o","n","i","old_indexes","new_blocks","new_lookup","deltas","updates","child_ctx","key","will_move","did_move","insert","transition_in","new_block","old_block","new_key","old_key","run_all","e","t","r","c","a","s","u","l","f","h","d","p","m","_","w","define_process_default","A","S","j","x","N","C","k","I","U","M","W","Z","ee","te","re","oe","ie","ae","g","y","b","v","height","persist","writable","createLocalStorage","receiptAddress","chars","base64ToBin","validBase64","bufferLengthEstimate","stringLength","bufferLength","buffer","bytes","encoded1","encoded2","encoded3","encoded4","binToBase64","result","range","length","begin","index","splitEvery","input","chunkLength","hexByteWidth","hexadecimal","hexToBin","validHex","byte","isHex","maybeHex","binToHex","str","swapEndianness","flattenBinArray","array","totalLength","total","bin","flattened","binsAreEqual","formatError","errorType","errorDetails","unknownValue","value","message","binToFixedLength","fixedBytes","numberToBinUint16LE","numberToBinUint32LE","numberToBinUint32BE","bigIntToBinUintLE","base","remaining","bigIntToBinUint64LEClamped","bigIntToBinUint64LE","valueAsUint64","binToNumberUint16LE","binToNumberUint32LE","bigIntToBinUint256BEClamped","binToBigIntUintLE","accumulated","binToBigIntUint64LE","truncatedBin","binToValueSatoshis","valueSatoshisToBin","compactUintPrefixToSize","firstByte","CompactUintError","readCompactUint","position","prefix","contents","bigIntToCompactUint","readCompactUintMinimal","read","readLength","canonicalEncoding","int32UnsignedToSigned","int32","readMultiple","readFunctions","nextPosition","results","readFunction","out","ReadItemCountError","readItemCount","countRead","instantiateRustWasm","webassemblyBytes","expectedImportModuleName","hashExportName","initExportName","updateExportName","finalExportName","wasm","ptr","len","getUint8Memory","num","cachedUint8Memory","cachedUint32Memory","cachedGlobalArgumentPtr","globalArgumentPtr","getUint32Memory","passArray8ToWasm","getArrayU8FromWasm","rawState","ptr0","len0","retPtr","mem","realRet","ptr1","len1","ripemd160Base64Bytes","SECP256K1_FLAGS_TYPE_CONTEXT","SECP256K1_FLAGS_TYPE_COMPRESSION","SECP256K1_FLAGS_BIT_CONTEXT_VERIFY","SECP256K1_FLAGS_BIT_CONTEXT_SIGN","SECP256K1_FLAGS_BIT_COMPRESSION","SECP256K1_CONTEXT_VERIFY","SECP256K1_CONTEXT_SIGN","SECP256K1_CONTEXT_NONE","SECP256K1_EC_COMPRESSED","SECP256K1_EC_UNCOMPRESSED","ContextFlag","CompressionFlag","secp256k1Base64Bytes","wrapSecp256k1Wasm","instance","heapU8","heapU32","context","contextPtr","seedPtr","pointer","pointerView32","secretKeyPtr","tweakNum256Ptr","publicKeyPtr","publicKeyOutPtr","publicKeyInPtr","publicKeyInLength","outputPtr","outputLengthPtr","compression","outputPubkeyPointer","rSigPtr","msg32Ptr","outputRSigPtr","inputSigPtr","rid","sigOutPtr","recIDOutPtr","outputSigPtr","sigPtr","compactSigInPtr","sigDERInPtr","sigDERInLength","outputCompactSigPtr","outputDERSigPtr","outputDERSigLengthPtr","pubkeyPtr","isLittleEndian","heap16","heap32","alignMemory","factor","size","instantiateSecp256k1WasmBytes","wasmMemory","STATIC_BASE","STATICTOP_INITIAL","DYNAMICTOP_PTR","STATICTOP","STACKTOP","STACK_MAX","DYNAMIC_BASE","TABLE_SIZE","MAX_TABLE_SIZE","getErrNoLocation","info","err","dest","src","getEmbeddedSecp256k1Binary","instantiateSecp256k1Wasm","sha1Base64Bytes","sha256Base64Bytes","sha512Base64Bytes","instantiateRipemd160Bytes","getEmbeddedRipemd160Binary","instantiateRipemd160","Secp256k1Error","secp256k1Wasm","randomSeed","sigScratch","publicKeyScratch","messageHashScratch","internalPublicKeyPtr","internalSigPtr","schnorrSigPtr","privateKeyPtr","internalRSigPtr","recoveryNumPtr","recoveryNumPtrView32","getRecoveryNumPtr","lengthPtr","lengthPtrView32","cloneAndPad","expectedLength","zeroPaddedValue","parsePublicKey","publicKey","paddedPublicKey","setLengthPtr","getLengthPtr","serializePublicKey","flag","getSerializedPublicKey","compressed","convertPublicKey","parseSignature","signature","isDer","paddedSignature","getCompactSig","getDERSig","convertSignature","wasDER","fillPrivateKeyPtr","privateKey","paddedPrivateKey","zeroOutPtr","zeroOutPrivateKeyPtr","withPrivateKey","instructions","ret","derivePublicKey","fillMessageHashScratch","messageHash","paddedMessageHash","normalizeSignature","modifySignature","normalize","parseAndNormalizeSignature","signMessageHash","signMessageHashSchnorr","verifyMessage","verifySignature","verifyMessageSchnorr","verifySignatureSchnorr","signMessageHashRecoverable","recoverPublicKey","recoveryId","addTweakPrivateKey","tweakValue","mulTweakPrivateKey","addTweakPublicKey","mulTweakPublicKey","instantiateSecp256k1","instantiateSha1Bytes","getEmbeddedSha1Binary","instantiateSha1","instantiateSha256Bytes","getEmbeddedSha256Binary","instantiateSha256","instantiateSha512Bytes","getEmbeddedSha512Binary","instantiateSha512","sha1","sha256","sha512","ripemd160","secp256k1","hash256","payload","internalSha256","bech32CharacterSet","bech32CharacterSetIndex","BitRegroupingError","regroupBits","sourceWordLength","resultWordLength","allowPadding","accumulator","bits","maxResultInt","encodeBech32","base32IntegerArray","decodeBech32","validBech32","nonBech32Characters","isBech32CharacterSet","maybeBech32","Bech32DecodingError","CashAddressNetworkPrefix","CashAddressVersionByte","CashAddressType","CashAddressTypeBits","cashAddressTypeToTypeBits","cashAddressTypeBitsToType","cashAddressSizeBitsToLength","cashAddressLengthToSizeBits","encodeCashAddressVersionByte","typeBits","CashAddressVersionByteDecodingError","decodeCashAddressVersionByte","version","maskCashAddressPrefix","bech32GeneratorMostSignificantByte","bech32GeneratorRemainingBytes","cashAddressPolynomialModulo","mostSignificantByte","lowerBytes","cashAddressChecksumToUint5Array","checksum","encodeCashAddressFormat","checksum40BitPlaceholder","payloadContents","checksumContents","encoded","CashAddressEncodingError","isValidCashAddressPayloadLength","encodeCashAddressNonStandard","encodeCashAddress","type","CashAddressDecodingError","decodeCashAddressFormat","address","parts","decodedPayload","polynomial","decodeCashAddressNonStandard","decoded","decodeCashAddress","decodeCashAddressFormatWithoutPrefix","possiblePrefixes","attempt","CashAddressCorrectionError","LockingBytecodeType","isPayToPublicKeyUncompressed","lockingBytecode","isPayToPublicKeyCompressed","isPayToPublicKey","isPayToPublicKeyHash","isPayToScriptHash20","isPayToScriptHash32","lockingBytecodeToAddressContents","bytecode","encodeLockingBytecodeP2pkh","publicKeyHash","encodeLockingBytecodeP2sh20","p2sh20Hash","encodeLockingBytecodeP2sh32","p2sh32Hash","encodeLockingBytecodeP2pk","addressContentsToLockingBytecode","lockingBytecodeToCashAddress","options","LockingBytecodeGenerationError","cashAddressToLockingBytecode","ReadBytesError","readBytes","ReadUint32LEError","readUint32LE","uint32LEBin","ReadUint64LEError","readUint64LE","uint64LEBin","CompactUintPrefixedBinError","readCompactUintPrefixedBin","p2","readRemainingBytes","NonFungibleTokenCapability","encodeTransactionInput","TransactionDecodingError","readTransactionInput","inputRead","outpointTransactionHash","outpointIndex","unlockingBytecode","sequenceNumber","encodeTransactionInputs","inputs","readTransactionInputs","inputsRead","maximumTokenAmount","nftCapabilityNumberToLabel","nftCapabilityLabelToNumber","CashTokenDecodingError","readTokenAmount","amountRead","readTokenPrefix","category","tokenBitfield","prefixStructure","nftCapabilityInt","capability","hasNft","hasCommitmentLength","hasAmount","commitmentRead","readLockingBytecodeWithPrefix","bytecodeRead","contentsRead","token","readTransactionOutput","outputRead","valueSatoshis","encodeTokenPrefix","capabilityInt","encodeTransactionOutput","output","lockingBytecodeField","readTransactionOutputs","outputsRead","encodeTransactionOutputs","outputs","readTransactionCommon","transactionRead","locktime","decodeTransactionCommon","decodeTransactionBCH","decodeTransaction","encodeTransactionCommon","tx","encodeTransactionBCH","encodeTransaction","cloneTransactionInputsCommon","cloneTransactionOutputsCommon","cloneTransactionCommon","transaction","encodeTransactionOutpoints","encodeTransactionOutputsForSigning","encodeTransactionInputSequenceNumbersForSigning","SigningSerializationFlag","SigningSerializationType","SigningSerializationTypeBCH","match","equals","shouldSerializeSingleInput","shouldSerializeCorrespondingOutput","shouldSerializeNoOutputs","shouldSerializeUtxos","emptyHash","hashPrevouts","signingSerializationType","transactionOutpoints","hashUtxos","transactionUtxos","hashSequence","transactionSequenceNumbers","hashOutputs","correspondingOutput","transactionOutputs","encodeSigningSerializationBCH","coveredBytecode","forkId","outputTokenPrefix","outputValue","generateSigningSerializationComponentsBCH","generateSigningSerializationBCH","ConsensusCommon","SigningSerializationTypesCommon","SigningSerializationTypesBCH","AuthenticationErrorCommon","applyError","state","OpcodesBCH2023","OpcodesBCH","authenticationInstructionIsMalformed","instruction","authenticationInstructionsAreMalformed","authenticationInstructionsArePushInstructions","uint8Bytes","uint16Bytes","uint32Bytes","decodeLittleEndianNumber","view","readAsLittleEndian","opcodeToPushLength","opcode","decodeAuthenticationInstruction","lengthBytes","sliceStart","sliceEnd","dataBytes","dataStart","dataEnd","cloneAuthenticationInstruction","decodeAuthenticationInstructions","nextIndex","isMultiWordPush","formatAsmPushHex","data","formatMissingBytesAsm","missing","hasMalformedLength","isPushData","pushOpcode","disassembleAuthenticationInstructionMalformed","opcodes","disassembleAuthenticationInstruction","disassembleAuthenticationInstructionMaybeMalformed","disassembleAuthenticationInstructionsMaybeMalformed","disassembleBytecodeBCH","generateBytecodeMap","entry","identifiers","pair","getInstructionLengthBytes","encodeAuthenticationInstruction","encodeAuthenticationInstructions","VmNumberError","isVmNumberError","typicalMaximumVmNumberByteLength","vmNumberToBigInt","maximumVmNumberByteLength","requireMinimalEncoding","secondMostSignificantByte","bitsPerByte","signFlippingByte","bigIntToVmNumber","integer","isNegative","byteStates","stackItemIsTruthy","item","booleanToVmNumber","isPushOperation","isPushOnly","isArbitraryDataOutput","getMinimumFee","feeRateSatsPerKb","truncated","getDustThresholdForLength","outputLength","dustRelayFeeSatPerKb","expectedTotalLength","getDustThreshold","encodedOutputLength","isDustOutput","isValidUncompressedPublicKeyEncoding","isValidCompressedPublicKeyEncoding","isValidPublicKeyEncoding","pushNumberOpcodeToNumber","isSimpleMultisig","lastIndex","publicKeyInstructions","publicKeys","isStandardMultisig","multisigProperties","isStandardOutputBytecode2023","isWitnessProgram","correctLength","validVersionPush","correctLengthByte","incrementOperationCount","operation","nextState","conditionallyEvaluate","mapOverOperations","combinators","operationMap","op","combinator","useOneStackItem","useTwoStackItems","valueTwo","lastState","valueTop","useThreeStackItems","valueThree","useFourStackItems","valueFour","useSixStackItems","valueFive","valueSix","useOneVmNumber","useTwoVmNumbers","secondValue","firstValue","useThreeVmNumbers","thirdValue","pushToStack","pushToStackChecked","maximumLength","pushToStackVmNumber","vmNumber","pushToStackVmNumberChecked","minVmNumber","maxVmNumber","combineOperations","firstOperation","secondOperation","encodeDataPush","isMinimalDataPush","executionIsActive","pushOperation","maximumPushSize","pushNumberOperation","number","deriveLockingBytecode","lock","getFutureBlockDate","currentBlock","futureBlock","blocks","futureDate","delay","time","resolve","asTokenUnawareP2sh","rawAddress","addressInfo","isTokenAddress","asCsUtxo","prefixFromNetworkMap","Coupon","amount","network","addr","amountVm","lockVm","lockingScript","utxo","Vault","tokenSupport","locktimeVm","startTime","series","limit","step","placement"],"mappings":"uIAKO,SAASA,GAAkBC,EAAwB,CACzD,OAAOA,GAAwB,SAAW,OACvCA,EACA,MAAM,KAAKA,CAAsB,CACrC,CAWO,SAASC,GAAwBC,EAAOC,EAAQ,CACtDC,GAAeF,EAAO,EAAG,EAAG,IAAM,CACjCC,EAAO,OAAOD,EAAM,GAAG,CACzB,CAAE,CACF,CASO,SAASG,GAAgCH,EAAOC,EAAQ,CAC9DD,EAAM,EAAC,EACPD,GAAwBC,EAAOC,CAAM,CACtC,CAGO,SAASG,GACfC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAT,EACAU,EACAC,EACAC,EACAC,EACAC,EACC,CACD,IAAIC,EAAIX,EAAW,OACfY,EAAIP,EAAK,OACTQ,EAAIF,EACR,MAAMG,EAAc,CAAA,EACpB,KAAOD,KAAKC,EAAYd,EAAWa,CAAC,EAAE,GAAG,EAAIA,EAC7C,MAAME,EAAa,CAAA,EACbC,EAAa,IAAI,IACjBC,EAAS,IAAI,IACbC,EAAU,CAAA,EAEhB,IADAL,EAAID,EACGC,KAAK,CACX,MAAMM,EAAYT,EAAYN,EAAKC,EAAMQ,CAAC,EACpCO,EAAMlB,EAAQiB,CAAS,EAC7B,IAAIxB,EAAQC,EAAO,IAAIwB,CAAG,EACrBzB,EAKJuB,EAAQ,KAAK,IAAMvB,EAAM,EAAEwB,EAAWlB,CAAK,CAAC,GAJ5CN,EAAQa,EAAkBY,EAAKD,CAAS,EACxCxB,EAAM,EAAC,GAKRqB,EAAW,IAAII,EAAML,EAAWF,CAAC,EAAIlB,GACjCyB,KAAON,GAAaG,EAAO,IAAIG,EAAK,KAAK,IAAIP,EAAIC,EAAYM,CAAG,CAAC,CAAC,CACtE,CACD,MAAMC,EAAY,IAAI,IAChBC,EAAW,IAAI,IAErB,SAASC,EAAO5B,EAAO,CACtB6B,GAAc7B,EAAO,CAAC,EACtBA,EAAM,EAAEW,EAAMG,CAAI,EAClBb,EAAO,IAAID,EAAM,IAAKA,CAAK,EAC3Bc,EAAOd,EAAM,MACbiB,GACA,CACD,KAAOD,GAAKC,GAAG,CACd,MAAMa,EAAYV,EAAWH,EAAI,CAAC,EAC5Bc,EAAY1B,EAAWW,EAAI,CAAC,EAC5BgB,EAAUF,EAAU,IACpBG,EAAUF,EAAU,IACtBD,IAAcC,GAEjBjB,EAAOgB,EAAU,MACjBd,IACAC,KACWI,EAAW,IAAIY,CAAO,EAIvB,CAAChC,EAAO,IAAI+B,CAAO,GAAKN,EAAU,IAAIM,CAAO,EACvDJ,EAAOE,CAAS,EACNH,EAAS,IAAIM,CAAO,EAC9BjB,IACUM,EAAO,IAAIU,CAAO,EAAIV,EAAO,IAAIW,CAAO,GAClDN,EAAS,IAAIK,CAAO,EACpBJ,EAAOE,CAAS,IAEhBJ,EAAU,IAAIO,CAAO,EACrBjB,MAXAJ,EAAQmB,EAAW9B,CAAM,EACzBe,IAYD,CACD,KAAOA,KAAK,CACX,MAAMe,EAAY1B,EAAWW,CAAC,EACzBK,EAAW,IAAIU,EAAU,GAAG,GAAGnB,EAAQmB,EAAW9B,CAAM,CAC7D,CACD,KAAOgB,GAAGW,EAAOR,EAAWH,EAAI,CAAC,CAAC,EAClC,OAAAiB,GAAQX,CAAO,EACRH,CACR,mhgCCxHIe,GAAE,SAASC,EAAEnB,EAAE,CAAQ,OAAAkB,GAAE,OAAO,gBAAgB,CAAC,UAAU,CAAC,CAAA,YAAa,OAAO,SAASA,EAAEC,EAAE,CAACD,EAAE,UAAUC,CAAA,GAAI,SAASD,EAAEC,EAAE,CAAC,QAAQnB,KAAKmB,EAAS,OAAA,UAAU,eAAe,KAAKA,EAAEnB,CAAC,IAAIkB,EAAElB,CAAC,EAAEmB,EAAEnB,CAAC,EAAA,EAAIkB,GAAEC,EAAEnB,CAAC,CAAC,EAAEmB,GAAE,UAAU,CAAC,OAAOA,GAAE,OAAO,QAAQ,SAASD,EAAE,CAASC,QAAAA,EAAEnB,EAAE,EAAEoB,EAAE,UAAU,OAAOpB,EAAEoB,EAAEpB,IAAYD,QAAAA,KAAKoB,EAAE,UAAUnB,CAAC,EAAE,OAAO,UAAU,eAAe,KAAKmB,EAAEpB,CAAC,IAAImB,EAAEnB,CAAC,EAAEoB,EAAEpB,CAAC,GAAUmB,OAAAA,CAAG,EAAAC,GAAE,MAAM,KAAK,SAAS,CAAC,EAAE,SAASnB,GAAEkB,EAAEC,EAAEnB,EAAE,SAAoCoB,EAAErB,EAAE,EAAEE,EAAEkB,EAAE,OAAOpB,EAAEE,EAAEF,IAAKqB,CAAAA,GAAGrB,KAAKoB,IAAIC,IAAIA,EAAE,MAAM,UAAU,MAAM,KAAKD,EAAE,EAAEpB,CAAC,GAAGqB,EAAErB,CAAC,EAAEoB,EAAEpB,CAAC,GAAUmB,OAAAA,EAAE,OAAOE,GAAG,MAAM,UAAU,MAAM,KAAKD,CAAC,CAAC,CAAC,CAAC,IAAIC,GAAE,SAASD,EAAE,CAAC,SAASnB,GAAG,CAAC,OAAcmB,IAAP,MAAUA,EAAE,MAAM,KAAK,SAAS,GAAG,IAAI,CAAQ,OAAA,SAASA,EAAEnB,EAAE,CAAC,GAAe,OAAOA,GAAnB,YAA6BA,IAAP,KAAS,MAAM,IAAI,UAAU,uBAAuB,OAAOA,CAAC,EAAE,+BAA+B,EAAE,SAASoB,GAAG,CAAC,KAAK,YAAYD,CAAC,CAACD,GAAEC,EAAEnB,CAAC,EAAEmB,EAAE,UAAiBnB,IAAP,KAAS,OAAO,OAAOA,CAAC,GAAGoB,EAAE,UAAUpB,EAAE,UAAU,IAAIoB,EAAA,EAAIpB,EAAEmB,CAAC,EAAEnB,CAAC,EAAE,KAAK,EAAED,GAAE,GAAGE,GAAE,IAAI,IAAIoB,GAAE,GAAG,SAASC,GAAEJ,EAAElB,EAAE,CAAI,GAAU,OAAOkB,GAAjB,UAA8B,OAAOA,GAAjB,UAAoB,CAAC,MAAMA,CAAC,GAAG,KAAK,IAAIA,CAAC,IAAI,KAAWA,GAAN,MAAoB,OAAOA,GAAlB,UAA2BA,OAAAA,EAAME,IAAAA,EAAEpB,EAAE,QAAQkB,CAAC,EAAK,GAAKE,IAAL,GAAO,MAAM,kBAAkBA,EAAEpB,EAAE,KAAKkB,CAAC,EAAMnB,IAAAA,EAAEC,EAAE,OAAO,EAAKkB,GAAAA,EAAE,cAAc,MAAM,CAAC,IAAIK,EAAEL,EAAE,IAAK,SAASA,EAAE,CAAQ,OAAAI,GAAEJ,EAAElB,CAAC,CAAA,CAAG,EAAE,OAAOuB,EAAE,QAAQ,mBAAmBxB,CAAC,EAAEwB,CAAC,CAAIL,GAAAA,EAAE,cAAc,OAAO,CAAKM,IAAAA,EAAE,OAAO,YAAY,OAAO,QAAQN,CAAC,EAAE,IAAK,SAASA,EAAE,CAAO,MAAA,CAACA,EAAE,CAAC,EAAEI,GAAEJ,EAAE,CAAC,EAAElB,CAAC,CAAC,CAAG,CAAA,CAAC,EAASwB,OAAAA,EAAE,kBAAkB,EAAEzB,EAAEyB,CAAC,CAAGvB,GAAA,IAAIiB,EAAE,WAAW,EAAE,IAAIO,EAAE,CAAA,EAAGA,EAAE,OAAO,eAAeA,EAAE,qBAAqB,CAAC,MAAMP,EAAE,YAAY,KAAK,WAAW,GAAG,EAAEO,EAAE,OAAO,eAAeA,EAAE,mBAAmB,CAAC,MAAM1B,EAAE,WAAW,EAAG,CAAA,EAAM2B,IAAAA,EAAE,SAASR,EAAEC,EAAE,CAAC,GAAG,OAAO,KAAKE,EAAC,EAAE,SAASH,EAAE,YAAY,IAAI,EAAS,OAAAG,GAAEH,EAAE,YAAY,IAAI,EAAE,QAAQA,EAAG,SAASA,EAAE,CAAQ,OAAAI,GAAEJ,EAAEC,CAAC,CAAA,CAAG,CAAA,EAAGD,EAAElB,CAAC,EAAE,OAAgB0B,IAAT,OAAWP,GAAEA,GAAE,GAAGO,CAAC,EAAED,CAAC,GAAG,OAAO,oBAAoBP,CAAC,EAAE,QAAS,SAASC,EAAE,CAAC,OAAO,eAAeM,EAAEN,EAAE,CAAC,MAAMG,GAAEJ,EAAEC,CAAC,EAAEnB,CAAC,EAAE,WAAW,EAAG,CAAA,CAAA,CAAG,EAAEyB,EAAE,CAAC,SAASF,GAAEL,EAAEC,EAAEnB,EAAE,CAAKD,IAAAA,EAAE,GAAa,OAAOmB,GAAjB,UAAwBA,EAAE,QAAQ,iBAAiB,IAA/B,EAAwClB,OAAAA,EAAEyB,EAAE,SAASP,EAAE,MAAM,EAAE,CAAC,CAAC,EAAK,GAAU,OAAOA,GAAjB,UAA8B,OAAOA,GAAjB,UAA0BA,GAAN,MAAoB,OAAOA,GAAlB,UAA2BA,OAAAA,EAAKA,GAAAA,EAAE,cAAc,MAAM,CAAC,GAAOA,EAAE,SAAN,EAAa,MAAM,CAAA,EAAOjB,IAAAA,EAAEiB,EAAE,QAAW,GAAU,OAAOjB,GAAjB,UAAyCA,EAAE,UAAU,EAAE,EAAE,IAArC,mBAAuC,CAAI,GAAI,OAAO,KAAKD,CAAC,EAAE,SAAnB,EAAiCkB,OAAAA,EAAE,QAAQjB,CAAC,EAAEiB,EAAE,MAAM,IAAIE,EAAC,CAAC,IAAIE,EAAE,CAAA,EAAGtB,EAAEyB,EAAExB,EAAE,MAAM,EAAE,CAAC,EAAEqB,EAAE,QAAQE,EAAE,EAAEA,EAAEN,EAAE,OAAOM,IAAIF,EAAEE,CAAC,EAAED,GAAEL,EAAEM,CAAC,EAAEL,EAAEnB,CAAC,EAASsB,OAAAA,CAAC,CAAIJ,GAAAA,EAAE,cAAc,OAAO,CAAKO,IAAAA,EAAK,IAAQA,GAAU1B,EAAEmB,EAAE,kBAAkB,KAA9B,MAA2CnB,IAAT,OAAWA,EAAE,QAAzD,KAA+D,CAAC,GAAO,OAAO,KAAKC,CAAC,EAAE,SAAnB,EAAiCkB,OAAAA,EAAE,MAAM,IAAIE,EAAC,CAAI,GAAA,OAAOF,EAAE,kBAAkB,EAAE,CAAC,OAAO,KAAKA,CAAC,EAAE,SAAS,oBAAoB,EAAE,CAAC,QAAQQ,KAAKJ,EAAE,CAAA,EAAGtB,EAAEyB,CAAC,EAAEH,EAAEJ,EAAEI,EAAEI,CAAC,EAAEH,GAAEL,EAAEQ,CAAC,EAAEP,EAAEnB,CAAC,EAASsB,OAAAA,CAAC,CAAKK,IAAAA,EAAET,EAAE,oBAAoB,EAAE,OAAOA,EAAE,oBAAoB,EAAE,IAAIU,EAAE,SAASV,EAAEC,EAAEnB,EAAEoB,EAAE,CAAC,GAAG,OAAO,KAAKC,EAAC,EAAE,SAASF,CAAC,EAAS,OAAAE,GAAEF,CAAC,EAAE,UAAUD,EAAG,SAASA,EAAE,CAAQ,OAAAK,GAAEL,EAAElB,EAAEoB,CAAC,CAAA,CAAG,CAAGF,EAAAA,EAAES,EAAER,EAAEnB,CAAC,EAAK,GAAS4B,IAAT,OAAkBA,OAAAA,EAAE,GAAG,CAAC,OAAO,KAAKT,CAAC,EAAE,SAASQ,CAAC,EAAQ,MAAA,IAAI,MAAM,aAAaA,EAAE,iBAAiB,EAAE,IAAIE,EAAE,CAAA,EAAG,QAAQH,KAAK1B,EAAEyB,CAAC,EAAEI,EAAEX,EAAEW,EAAEH,CAAC,EAAEH,GAAEL,EAAEQ,CAAC,EAAEP,EAAEnB,CAAC,EAAE,OAAO,OAAO,eAAe6B,EAAEV,EAAEQ,CAAC,EAAE,SAAS,EAAEE,CAAC,CAAC,CAAC,SAASL,GAAEN,EAAE,CAAGA,GAAAA,EAAE,IAAI,EAAEA,CAAC,CAAC,SAASO,GAAEP,EAAE,CAAQA,OAAAA,GAAGA,EAAE,YAAY,OAAO,UAAU,eAAe,KAAKA,EAAE,SAAS,EAAEA,EAAE,QAAQA,CAAC,EAAE,SAASA,EAAEC,EAAE,CAACD,EAAE,OAAQA,IAAI,CAAC,KAAKA,EAAE,QAAQ,CAAA,GAAM,SAASA,EAAE,CAAC,IAAIC,EAAM,IAAA,KAAK,OAAOA,EAAE,QAAQD,EAAE,IAAI,EAAEC,CAAG,CAAA,EAAED,EAAE,SAAUA,IAAI,CAAC,OAAOA,EAAE,SAAU,CAAA,GAAKA,GAAG,OAAOA,EAAE,MAAM,CAAE,EAAEA,EAAE,SAAUA,IAAI,CAAC,KAAKA,EAAE,SAAS,IAAMA,GAAG,IAAI,OAAOA,EAAE,IAAI,CAAE,EAAEA,EAAE,SAAUA,IAAI,CAAC,OAAOA,EAAE,OAAO,MAAMA,EAAE,QAAUA,GAAG,IAAI,OAAOA,EAAE,OAAOA,EAAE,KAAK,CAAE,EAAEA,EAAE,SAAU,SAASA,EAAE,CAAKC,IAAAA,EAAE,CAAC,IAAI,GAAG,SAAS,GAAG,SAAS,GAAG,OAAO,MAAM,OAAO,KAAK,IAAID,CAAC,IAAI,KAAKC,EAAE,SAAS,GAAGA,EAAE,SAAS,KAAK,IAAID,CAAC,IAAIA,EAAEC,GAAG,MAAMD,CAAC,GAAGC,EAAE,IAAI,GAAGA,IAAIA,EAAE,OAAOD,EAAE,QAAUC,EAAAA,EAAE,EAAI,SAASD,EAAE,CAAC,OAAOA,EAAE,IAAI,IAAIA,EAAE,SAAS,KAAKA,EAAE,SAAS,EAAE,IAAI,IAAI,OAAOA,EAAE,MAAM,CAAA,CAAG,EAAEA,EAAE,MAAO,CAACA,EAAEC,KAAK,CAAC,KAAK,MAAM,KAAKD,EAAE,SAAS,EAAE,IAAKA,GAAGC,EAAED,CAAC,CAAE,IAAM,SAASA,EAAEC,EAAE,CAAC,MAAMnB,EAAM,IAAA,IAAWkB,OAAAA,EAAE,KAAK,IAAKA,GAAGC,EAAED,CAAC,CAAE,EAAE,QAAS,CAAC,CAACA,EAAEC,CAAC,IAAInB,EAAE,IAAIkB,EAAEC,CAAC,CAAE,EAAEnB,CAAA,CAAG,EAAEkB,EAAE,MAAO,CAACA,EAAEC,KAAK,CAAC,KAAK,MAAM,KAAKD,EAAE,QAAQ,EAAE,IAAKA,GAAGC,EAAED,CAAC,CAAE,IAAM,SAASA,EAAEC,EAAE,CAAC,MAAMnB,EAAM,IAAA,IAAI,OAAOkB,EAAE,KAAK,IAAKA,GAAGC,EAAED,CAAC,CAAE,EAAE,QAASA,GAAGlB,EAAE,IAAIkB,CAAC,CAAE,EAAElB,CAAA,CAAG,EAAEkB,EAAE,cAAe,CAACA,EAAEC,KAAK,CAAC,KAAKA,EAAE,IAAI,WAAWD,CAAC,CAAC,IAAM,CAACA,EAAEC,IAAIA,EAAED,EAAE,IAAI,EAAE,MAAO,EAAEA,EAAE,WAAY,CAACA,EAAEC,KAAK,CAAC,OAAOA,EAAED,EAAE,MAAM,EAAE,OAAOA,EAAE,WAAW,OAAOA,EAAE,UAAA,GAAe,CAACA,EAAEC,IAAI,IAAI,SAASA,EAAED,EAAE,MAAM,EAAEA,EAAE,OAAOA,EAAE,MAAM,CAAE,EAAE,CAAC,MAAM,UAAU,WAAW,eAAe,eAAe,YAAY,UAAU,SAAS,UAAU,WAAW,kBAAkB,WAAW,YAAY,WAAW,YAAY,aAAa,aAAa,cAAc,cAAc,EAAE,QAASA,GAAGC,EAAED,CAAC,CAAE,CAAC,GAAG,SAASA,EAAEC,EAAEnB,EAAE,CAACqB,GAAEH,CAAC,EAAE,CAAC,QAAQC,EAAE,UAAUnB,EAAE,EAAGwB,EAAC,EAAE,IAAIE,EAAEC,GAAE,GAAoW,SAASG,GAAEZ,EAAE,CAAC,IAAIC,EAAEnB,EAAEkB,EAAE,CAAC,EAAEE,EAAE,EAAOA,KAAAA,EAAEF,EAAE,QAAQ,CAAC,MAAMnB,EAAEmB,EAAEE,CAAC,EAAEnB,EAAEiB,EAAEE,EAAE,CAAC,EAAE,GAAGA,GAAG,GAAsBrB,IAAnB,kBAAuCA,IAAjB,iBAA2BC,GAAN,KAAQ,OAAkBD,IAAAA,UAAsBA,IAAnB,kBAAsBoB,EAAEnB,EAAEA,EAAEC,EAAED,CAAC,GAAYD,IAAT,QAA6BA,IAAjB,iBAAqBC,EAAEC,EAAG,IAAIiB,IAAIlB,EAAE,KAAKmB,EAAE,GAAGD,CAAC,CAAE,EAAEC,EAAE,OAAO,CAAQnB,OAAAA,CAAC,EAAoB0B,EAAEC,IAAG,SAAS,GAAGD,EAAE,IAAI,SAASR,EAAEC,EAAEnB,EAAE,CAAC,IAAIoB,EAAEpB,GAAG,CAAA,EAAGD,EAAE2B,EAAE,SAASzB,EAAEmB,EAAE,SAASrB,EAAE,QAAQsB,EAAED,EAAE,QAAQrB,EAAE,OAAOuB,EAAWF,EAAE,OAAX,OAAgBA,EAAE,KAAcrB,EAAE,OAAX,OAAgBA,EAAE,KAAK,IAAIwB,EAAWH,EAAE,SAAX,OAAkBA,EAAE,OAAOrB,EAAE,OAAOyB,EAAWJ,EAAE,WAAX,OAAoBA,EAAE,SAASrB,EAAE,SAAS0B,EAAWL,EAAE,WAAX,OAAoBA,EAAE,SAASrB,EAAE,SAAS4B,EAAE1B,EAAE,IAAI,KAAe,OAAOA,GAAjB,SAAwB,IAAA,KAAA,EAAM,UAAU,MAAMA,EAAEA,CAAC,EAAE,EAAW,SAAA,OAAOiB,EAAE,QAAQ,cAAc,kBAAkB,EAAE,QAAQ,IAAI,KAAK,EAAE,QAAQ,IAAI,KAAK,EAAE,IAAIC,EAAE,QAAQ,qBAAqB,kBAAkB,GAAGQ,GAAGA,EAAE,QAAA,GAAW,EAAE,YAAYA,EAAE,YAAY,EAAE,KAAKN,EAAE,WAAWA,EAAE,KAAKC,EAAE,SAASA,EAAE,KAAKC,EAAE,UAAU,KAAKC,EAAE,YAAY,KAAKC,EAAE,aAAaA,EAAE,GAAG,EAAEC,EAAE,IAAI,SAASR,EAAE,CAAC,QAAQC,EAAE,SAAS,OAAO,MAAM,GAAG,EAAEA,EAAE,QAAQ,CAAC,IAAInB,EAAEmB,EAAE,MAAMC,EAAEpB,EAAE,QAAQ,GAAG,EAAKoB,GAAAA,EAAEA,EAAE,EAAEpB,EAAE,OAAOoB,EAAE,mBAAmBpB,EAAE,MAAM,EAAEoB,CAAC,EAAE,QAAQ,OAAO,EAAE,CAAC,IAAIF,EAAE,OAAO,mBAAmBlB,EAAE,MAAMoB,EAAE,CAAC,CAAC,CAAC,CAAQ,OAAA,IAAI,EAAEM,EAAE,MAAM,SAASR,EAAEC,EAAE,CAACO,EAAE,IAAIR,EAAE,GAAG,CAAC,QAAQ,GAAG,OAAOC,GAAGA,EAAE,OAAO,KAAKA,GAAGA,EAAE,KAAK,OAAO,EAAE,SAAS,EAAE,CAAC,EAAEO,EAAE,IAAI,UAAU,CAASR,QAAAA,EAAE,GAAGC,EAAE,SAAS,OAAO,MAAM,GAAG,EAAEA,EAAE,QAAQ,CAAC,IAAInB,EAAEmB,EAAE,MAAMC,EAAEpB,EAAE,QAAQ,GAAG,EAAEoB,EAAEA,EAAE,EAAEpB,EAAE,OAAOoB,EAAEF,EAAE,mBAAmBlB,EAAE,MAAM,EAAEoB,CAAC,EAAE,QAAQ,OAAO,EAAE,CAAC,CAAC,EAAE,mBAAmBpB,EAAE,MAAMoB,EAAE,CAAC,CAAC,CAAC,CAAQF,OAAAA,CAAC,EAAW,MAAMa,GAAE,CAAG,EAAAC,GAAEd,GAAG,EAAEA,GAAG,CAAC,MAAMC,EAAe,OAAOc,GAApB,KAA4CH,GAAE,CAACG,GAAQ,SAASf,GAAGA,EAAE,IAAI,iBAAiBA,GAAGA,EAAE,QAAQ,CAAC,IAA3E,aAAgFa,GAAE,SAASb,CAAC,GAAGC,IAAiB,OAAO,OAApB,MAA6BD,GAAG;AAAA,6FAAgG,QAAQ,KAAKA,CAAC,EAAEa,GAAE,KAAKb,CAAC,EAAE,GAAG,sBAAsBA,CAAC,8BAA8B,CAAC,EAAyB,IAAAgB,GAAE,SAAShB,EAAE,CAAQ,OAASA,IAAT,OAAW,YAAY,KAAK,UAAUI,GAAEJ,EAAE,CAAE,CAAA,CAAC,CAAC,EAAEiB,GAAE,SAASjB,EAAEC,EAAE,CAAC,GAAYA,IAAT,SAAaA,EAAE,QAAkB,OAAOD,GAAjB,SAA0BA,OAAAA,EAAE,GAAYC,IAAT,SAAaA,EAAE,CAAA,GAAkBD,IAAd,YAAgB,CAACC,EAAE,OAAO,YAAYnB,GAAEA,GAAE,GAAG,OAAO,QAAQmB,CAAC,EAAE,EAAE,EAAE,OAAO,QAAQpB,EAAC,CAAI,CAAC,EAAK,GAAA,CAAC,OAAOwB,GAAE,KAAK,MAAML,CAAC,EAAEC,EAAE,CAAA,CAAE,OAAU,CAAQD,OAAAA,CAAC,CAAC,CAAC,EAAyE,SAASkB,GAAElB,EAAEC,EAAEnB,EAAE,CAAOoB,MAAAA,EAAED,EAAE,SAASnB,CAAC,EAAE,OAAcoB,IAAP,MAAUF,EAAE,IAAIE,CAAC,EAAED,EAAE,aAAaA,EAAE,YAAYnB,EAAGmB,GAAG,CAACD,EAAE,IAAIC,CAAC,CAAG,CAAA,EAAED,EAAE,UAAWA,GAAG,CAACC,EAAE,SAASnB,EAAEkB,CAAC,CAAA,CAAG,EAAE,CAAC,GAAGA,EAAE,QAAQ,CAACC,EAAE,YAAYnB,CAAC,CAAA,EAAG,CAAC,SAASqC,IAAG,CAAC,CAAC,SAASC,GAAEpB,EAAEmB,GAAElB,EAAEkB,GAAE,CAAC,MAAMrC,EAAE,CAAA,EAAS,MAAA,CAAC,cAAckB,EAAEC,EAAE,CAAUA,IAAT,QAAYnB,EAAE,OAAQ,CAAC,CAAC,IAAImB,KAAKA,IAAID,CAAE,EAAE,QAAS,CAAC,CAAC,SAASA,KAAKA,EAAEC,CAAC,CAAE,CAAA,EAAG,YAAYA,EAAEC,EAAE,CAACpB,EAAE,KAAK,CAAC,IAAImB,EAAE,SAASC,CAAE,CAAA,EAAMpB,EAAE,SAAN,GAAckB,EAAE,CAAA,EAAG,eAAeA,EAAEE,EAAE,CAAOrB,MAAAA,EAAEC,EAAE,QAAQ,CAAC,IAAIkB,EAAE,SAASE,EAAE,EAAOrB,IAAAA,IAAGC,EAAE,OAAOD,EAAE,CAAC,EAAMC,EAAE,SAAN,GAAcmB,EAAE,CAAA,EAAG,CAAC,SAASoB,GAAErB,EAAEC,EAAE,GAAG,CAAOnB,MAAAA,EAAEmB,GAAG,CAAC,MAAMnB,EAAEmB,EAAE,IAAIA,EAAE,cAAcD,GAAGnB,EAAEC,EAAEmC,GAAEhB,EAAE,QAAQ,CAAC,CAAA,EAAG,CAAC,eAAeC,EAAE,cAAcrB,EAAE,YAAYE,GAAGqC,GAAG,IAAI,CAACnB,GAAgB,OAAO,OAApB,KAA4BW,GAAE,CAAC,OAAO,iBAAiBZ,GAAGA,EAAE,gBAAgB,CAAC,GAAG,OAAO,iBAAiB,UAAUlB,CAAC,CAAA,EAAK,IAAI,CAACmB,GAAgB,OAAO,OAApB,KAA4BW,GAAE,CAAC,OAAO,iBAAiBZ,GAAGA,EAAE,mBAAmB,CAAC,GAAG,OAAO,oBAAoB,UAAUlB,CAAC,CAAA,CAAG,EAAE,MAAM,CAAC,YAAYC,EAAE,eAAemB,EAAE,SAASD,EAAE,CAAOnB,MAAAA,EAAEkB,EAAE,QAAQC,CAAC,EAAE,OAAOgB,GAAEnC,CAAC,CAAA,EAAG,YAAYmB,EAAE,CAACD,EAAE,WAAWC,CAAC,CAAA,EAAG,SAASA,EAAEnB,EAAE,CAACkB,EAAE,QAAQC,EAAEe,GAAElC,CAAC,CAAC,CAAA,EAAG,CAAC,SAASwC,GAAEtB,EAAE,CAAI,GAAA,CAAO,OAAU,OAAO,OAAOA,CAAC,GAAzB,cAAmC,CAAO,MAAA,EAAE,CAAC,CAAC,SAASuB,GAAEvB,EAAE,GAAG,CAAQ,OAAAsB,GAAE,cAAc,EAAED,GAAE,OAAO,aAAarB,CAAC,GAAGc,GAAE,qBAAqB,EAAEU,GAAE,EAAE,CAAm4B,IAAIC,GAAipB,SAASD,IAAG,CAAC,MAAM,CAAC,SAAS,IAAI,KAAK,aAAa,GAAG,UAAU,CAAA,EAAG,EAA+E,SAASxB,EAAE,CAACA,EAAEA,EAAE,MAAM,CAAC,EAAE,QAAQA,EAAEA,EAAE,QAAQ,CAAC,EAAE,UAAUA,EAAEA,EAAE,KAAK,CAAC,EAAE,MAAM,GAAEyB,KAAIA,GAAE,CAAG,EAAA,EAA+3B,IAAAC,GAAEC,GAAE,SAAS3B,EAAE,CAAC,OAAO,KAAK,MAAMA,EAAE,aAAa,GAAG,EAAE,EAAE4B,GAAG,SAAS5B,EAAE,CAAKC,IAAAA,EAAEnB,EAAEkB,EAAE,OAAO,OAAWlB,IAAJ,EAAM,GAAGmB,EAAED,EAAElB,EAAE,CAAC,EAAE,IAAIA,EAAE,GAAG6C,GAAE1B,CAAC,EAAE,EAAE4B,GAAG,SAAS7B,EAAE,CAAC,IAAIC,EAAEnB,EAAE,GAAGoB,EAAEF,EAAE,OAAO,IAAIC,EAAE,EAAEA,EAAEC,EAAED,IAAInB,IAAI,gBAAgB,EAAEkB,EAAEC,CAAC,IAAI,SAAS,EAAE,EAAE,OAAO,CAAC,EAAE,OAAOnB,EAAE,OAAO,EAAE8C,GAAG5B,CAAC,EAAE,CAAC,CAAC,EAAKO,GAAEsB,EAAE,EAAA,IAAEC,GAAG,SAAS9B,EAAEC,EAAEnB,EAAE,CAAQ,OAAKkB,IAAL,GAAOC,GAAK,EAAEA,GAAW,cAAcD,CAAC,EAAE+B,GAAG,SAAS/B,EAAEC,EAAE,CAAC,GAAG,GAAGD,EAAE,OAAOC,EAASD,OAAAA,EAAMlB,IAAAA,GAAGkB,EAAEA,EAAE,MAAM,EAAE,KAAK,KAAKC,EAAE,EAAE,CAAC,GAAG,OAAO,OAAOA,GAAG,GAAGnB,EAAE,GAAGmB,IAAID,EAAElB,EAAE,CAAC,EAAEgD,GAAG7B,EAAED,EAAElB,EAAE,CAAC,EAAE,YAAYmB,EAAE,CAAG,GAAGD,CAAC,EAAEgC,GAAG,SAAShC,EAAE,CAAC,IAAIC,EAAEnB,EAAEoB,EAAErB,EAAE,CAAA,EAAG,IAAIqB,GAAGF,EAAEA,EAAE,QAAQ,SAAS,EAAE,GAAG,OAAOlB,GAAGkB,GAAG,YAAY,OAAOC,EAAE,EAAEA,EAAEnB,EAAEmB,GAAG,EAAEpB,EAAE,KAAK,EAAE,SAASmB,EAAE,OAAOC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAS,OAAA8B,GAAGlD,EAAE,EAAEqB,CAAC,CAAC,EAAKK,GAAEyB,EAAE,EAAE,IAAAC,EAAG,CAAC,OAAO,CAAG,EAAA,KAAK,CAAA,EAAG,YAAY,CAAG,EAAA,KAAK,CAAA,EAAG,KAAK,GAAG,MAAM,CAAC,EAAE,UAAU,CAAC,QAAQ,SAASjC,EAAE,CAAC,KAAK,SAAS,UAAU,CAAC,MAAM,YAAY,KAAK,OAAA,EAAS,KAAK,QAAQA,CAAC,EAAE,QAAQ,SAASA,EAAE,CAAC,KAAK,SAAS,UAAU,CAAC,MAAM,YAAY,KAAK,OAAA,EAAS,KAAK,QAAQA,CAAC,EAAE,IAAI,SAASA,EAAE,CAAC,KAAK,SAAS,UAAU,CAAC,MAAM,QAAQ,KAAK,OAAA,EAAS,KAAK,QAAQA,CAAC,EAAE,SAAS,SAASA,EAAE,CAAC,KAAK,SAAS,UAAU,CAAC,MAAM,cAAc,KAAK,OAAA,EAAS,KAAK,QAAQA,CAAC,EAAE,EAAkBiC,EAAG,OAAO,IAAI,SAASjC,EAAE,CAAM,KAAA,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,cAAkBC,IAAAA,EAAEnB,EAAEoB,EAAErB,EAAEE,EAAEoB,EAAE,KAAK,QAAQ,CAAC,EAAE,CAAC,EAAEC,EAAE,KAAK,QAAQ,CAAC,EAAEC,EAAEL,EAAE,OAAOM,EAAE,EAAK,GAAID,IAAJ,GAAWA,IAAJ,GAAWA,IAAJ,EAAM,MAAM,IAAI4B,EAAG,UAAU,QAAQ,sBAAsB,EAAE,IAAI,KAAK,KAAK,CAACpD,EAAEmB,EAAE,MAAM,CAAC,EAAEjB,EAAE,CAAE,CAAA,EAAEkB,EAAEI,EAAEJ,EAAE,EAAEI,EAAE,GAAGJ,IAAIC,EAAErB,EAAEoB,EAAE,CAAC,GAAGA,EAAEI,GAAG,GAAOA,IAAJ,GAAOJ,EAAEI,GAAG,KAAKH,EAAEC,EAAED,IAAI,EAAE,GAAG,GAAGC,EAAED,GAAG,GAAG,GAAG,GAAG,GAAGC,EAAED,GAAG,EAAE,GAAG,GAAG,EAAEC,EAAE,IAAID,CAAC,EAAED,EAAEI,GAAG,IAAIH,EAAEA,GAAG,EAAEA,IAAI,GAAGI,GAAG,GAAGA,EAAEA,GAAG,EAAE,KAAKA,GAAG,KAAKzB,EAAEoB,CAAC,EAAEpB,EAAEoB,EAAEI,CAAC,EAAEH,EAAMpB,IAAAA,EAAE,EAAEmB,EAAEnB,IAAImB,IAAIC,EAAErB,EAAE,EAAEC,EAAEmB,EAAEA,EAAE,CAAC,EAAElB,EAAED,CAAC,EAAEmB,GAAG,GAAGnB,EAAE,EAAEoB,EAAEE,EAAE,CAAC,EAAED,EAAED,IAAI,EAAE,CAAC,EAAEE,EAAE,CAAC,EAAED,EAAED,GAAG,GAAG,GAAG,CAAC,EAAEE,EAAE,CAAC,EAAED,EAAED,GAAG,EAAE,GAAG,CAAC,EAAEE,EAAE,CAAC,EAAED,EAAE,IAAID,CAAC,CAAC,CAAC,EAAE+B,EAAG,OAAO,IAAI,UAAU,CAAC,QAAQ,SAASjC,EAAE,CAAQ,OAAA,KAAK,OAAOA,EAAE,CAAC,CAAC,EAAE,QAAQ,SAASA,EAAE,CAAQ,OAAA,KAAK,OAAOA,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAE,CAAA,EAAE,CAAC,CAAG,EAAA,CAAG,EAAA,GAAG,CAAA,EAAG,CAAA,CAAE,CAAC,EAAE,YAAY,UAAU,CAAC,IAAIA,EAAEC,EAAEnB,EAAEoB,EAAErB,EAAEE,EAAEoB,EAAEC,EAAEC,EAAE,KAAK,QAAQ,CAAC,EAAEC,EAAE,KAAK,QAAQ,CAAC,EAAEC,EAAEF,EAAE,CAAC,EAAEG,EAAEF,EAAE,CAAC,EAAEG,EAAE,CAAA,EAAGC,EAAE,CAAA,EAAG,IAAIV,EAAE,EAAEA,EAAE,IAAIA,IAAIU,GAAGD,EAAET,CAAC,EAAEA,GAAG,EAAE,KAAKA,GAAG,IAAIA,CAAC,EAAEA,EAAE,IAAIC,EAAEnB,EAAE,EAAE,CAACyB,EAAEN,CAAC,EAAEA,GAAGC,GAAG,EAAEpB,EAAE4B,EAAE5B,CAAC,GAAG,EAAMC,IAAAA,GAAGA,EAAED,EAAEA,GAAG,EAAEA,GAAG,EAAEA,GAAG,EAAEA,GAAG,IAAI,EAAE,IAAIC,EAAE,GAAGwB,EAAEN,CAAC,EAAElB,EAAEyB,EAAEzB,CAAC,EAAEkB,EAAEG,EAAE,SAASK,EAAE5B,EAAE4B,EAAEP,EAAEO,EAAER,CAAC,CAAC,CAAC,EAAE,MAAMpB,EAAE,IAAIqB,EAAE,SAASD,EAAEE,EAAE,IAAIM,EAAE1B,CAAC,EAAE,SAASA,EAAEiB,EAAE,EAAEA,EAAE,EAAEA,IAAIK,EAAEL,CAAC,EAAEC,CAAC,EAAEE,EAAEA,GAAG,GAAGA,IAAI,EAAEG,EAAEN,CAAC,EAAEjB,CAAC,EAAEqB,EAAEA,GAAG,GAAGA,IAAI,EAAMJ,IAAAA,EAAE,EAAEA,EAAE,EAAEA,IAAIK,EAAEL,CAAC,EAAEK,EAAEL,CAAC,EAAE,MAAM,CAAC,EAAEM,EAAEN,CAAC,EAAEM,EAAEN,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,OAAO,SAASA,EAAEC,EAAE,CAAI,GAAID,EAAE,SAAN,EAAa,MAAM,IAAIiC,EAAG,UAAU,QAAQ,wBAAwB,EAAE,IAAInD,EAAEoB,EAAErB,EAAEE,EAAEoB,EAAE,KAAK,KAAKF,CAAC,EAAEG,EAAEJ,EAAE,CAAC,EAAEG,EAAE,CAAC,EAAEE,EAAEL,EAAEC,EAAE,EAAE,CAAC,EAAEE,EAAE,CAAC,EAAEG,EAAEN,EAAE,CAAC,EAAEG,EAAE,CAAC,EAAEI,EAAEP,EAAEC,EAAE,EAAE,CAAC,EAAEE,EAAE,CAAC,EAAEK,EAAEL,EAAE,OAAO,EAAE,EAAEM,EAAE,EAAEC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEC,EAAE,KAAK,QAAQV,CAAC,EAAEiC,EAAEvB,EAAE,CAAC,EAAEwB,EAAExB,EAAE,CAAC,EAAEC,EAAED,EAAE,CAAC,EAAEyB,EAAEzB,EAAE,CAAC,EAAE0B,EAAE1B,EAAE,CAAC,EAAM5B,IAAAA,EAAE,EAAEA,EAAEyB,EAAEzB,IAAID,EAAEoD,EAAE9B,IAAI,EAAE,EAAE+B,EAAE9B,GAAG,GAAG,GAAG,EAAEO,EAAEN,GAAG,EAAE,GAAG,EAAE8B,EAAE,IAAI7B,CAAC,EAAEJ,EAAEM,CAAC,EAAEP,EAAEgC,EAAE7B,IAAI,EAAE,EAAE8B,EAAE7B,GAAG,GAAG,GAAG,EAAEM,EAAEL,GAAG,EAAE,GAAG,EAAE6B,EAAE,IAAIhC,CAAC,EAAED,EAAEM,EAAE,CAAC,EAAE5B,EAAEqD,EAAE5B,IAAI,EAAE,EAAE6B,EAAE5B,GAAG,GAAG,GAAG,EAAEK,EAAER,GAAG,EAAE,GAAG,EAAEgC,EAAE,IAAI/B,CAAC,EAAEF,EAAEM,EAAE,CAAC,EAAEF,EAAE2B,EAAE3B,IAAI,EAAE,EAAE4B,EAAE/B,GAAG,GAAG,GAAG,EAAEQ,EAAEP,GAAG,EAAE,GAAG,EAAE+B,EAAE,IAAI9B,CAAC,EAAEH,EAAEM,EAAE,CAAC,EAAEA,GAAG,EAAEL,EAAEtB,EAAEuB,EAAEH,EAAEI,EAAEzB,EAAME,IAAAA,EAAE,EAAEA,EAAE,EAAEA,IAAI2B,EAAET,EAAE,EAAE,CAAClB,EAAEA,CAAC,EAAEsD,EAAEjC,IAAI,EAAE,GAAG,GAAGiC,EAAEhC,GAAG,GAAG,GAAG,GAAG,GAAGgC,EAAE/B,GAAG,EAAE,GAAG,GAAG,EAAE+B,EAAE,IAAI9B,CAAC,EAAEJ,EAAEM,GAAG,EAAE3B,EAAEsB,EAAEA,EAAEC,EAAEA,EAAEC,EAAEA,EAAEC,EAAEA,EAAEzB,EAAS4B,OAAAA,CAAC,CAAC,EAAEuB,EAAG,SAAS,CAAC,SAAS,SAASjC,EAAEC,EAAEnB,EAAE,CAAQkB,OAAAA,EAAEiC,EAAG,SAAS,YAAYjC,EAAE,MAAMC,EAAE,EAAE,EAAE,IAAI,GAAGA,EAAE,EAAE,MAAM,CAAC,EAAWnB,IAAT,OAAWkB,EAAEiC,EAAG,SAAS,MAAMjC,EAAElB,EAAEmB,CAAC,CAAC,EAAE,QAAQ,SAASD,EAAEC,EAAEnB,EAAE,CAAC,IAAIoB,EAAE,KAAK,MAAM,CAACD,EAAEnB,EAAE,EAAE,EAAS,OAAA,KAAKmB,EAAEnB,EAAE,EAAEmB,GAAGD,EAAEC,EAAE,GAAG,CAAC,GAAG,GAAGC,EAAEF,EAAEC,EAAE,GAAG,EAAE,CAAC,IAAIC,EAAEF,EAAEC,EAAE,GAAG,CAAC,IAAIC,IAAI,GAAGpB,GAAG,CAAC,EAAE,OAAO,SAASkB,EAAEC,EAAE,CAAI,GAAID,EAAE,SAAN,GAAkBC,EAAE,SAAN,EAAa,OAAOD,EAAE,OAAOC,CAAC,EAAMnB,IAAAA,EAAEkB,EAAEA,EAAE,OAAO,CAAC,EAAEE,EAAE+B,EAAG,SAAS,WAAWnD,CAAC,EAAE,OAAYoB,IAAL,GAAOF,EAAE,OAAOC,CAAC,EAAEgC,EAAG,SAAS,YAAYhC,EAAEC,EAAE,EAAEpB,EAAEkB,EAAE,MAAM,EAAEA,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,UAAU,SAASA,EAAE,CAAKC,IAAAA,EAAEnB,EAAEkB,EAAE,OAAO,OAAWlB,IAAJ,EAAM,GAAGmB,EAAED,EAAElB,EAAE,CAAC,EAAE,IAAIA,EAAE,GAAGmD,EAAG,SAAS,WAAWhC,CAAC,EAAE,EAAE,MAAM,SAASD,EAAEC,EAAE,CAAC,GAAG,GAAGD,EAAE,OAAOC,EAASD,OAAAA,EAAMlB,IAAAA,GAAGkB,EAAEA,EAAE,MAAM,EAAE,KAAK,KAAKC,EAAE,EAAE,CAAC,GAAG,OAAcA,OAAAA,GAAG,GAAGnB,EAAE,GAAGmB,IAAID,EAAElB,EAAE,CAAC,EAAEmD,EAAG,SAAS,QAAQhC,EAAED,EAAElB,EAAE,CAAC,EAAE,YAAYmB,EAAE,EAAE,CAAC,GAAGD,CAAC,EAAE,QAAQ,SAASA,EAAEC,EAAEnB,EAAE,CAAQ,OAAKkB,IAAL,GAAOC,GAAGnB,EAAE,EAAEmB,EAAEA,GAAG,GAAGD,GAAG,cAAcA,CAAC,EAAE,WAAW,SAASA,EAAE,CAAC,OAAO,KAAK,MAAMA,EAAE,aAAa,GAAG,EAAE,EAAE,MAAM,SAASA,EAAEC,EAAE,CAAI,GAAAgC,EAAG,SAAS,UAAUjC,CAAC,IAAIiC,EAAG,SAAS,UAAUhC,CAAC,EAAQ,MAAA,GAAG,IAAInB,EAAEoB,EAAE,EAAE,IAAIpB,EAAE,EAAEA,EAAEkB,EAAE,OAAOlB,IAAIoB,GAAGF,EAAElB,CAAC,EAAEmB,EAAEnB,CAAC,EAAE,OAAWoB,IAAJ,CAAK,EAAE,YAAY,SAASF,EAAEC,EAAEnB,EAAEoB,EAAE,CAAC,IAAIrB,EAAEE,EAAEoB,EAAE,IAAaD,IAAT,SAAaA,EAAE,IAAID,GAAG,GAAGA,GAAG,GAAGC,EAAE,KAAKpB,CAAC,EAAEA,EAAE,EAAE,GAAOmB,IAAJ,EAAaC,OAAAA,EAAE,OAAOF,CAAC,EAAE,IAAInB,EAAE,EAAEA,EAAEmB,EAAE,OAAOnB,IAAIqB,EAAE,KAAKpB,EAAEkB,EAAEnB,CAAC,IAAIoB,CAAC,EAAEnB,EAAEkB,EAAEnB,CAAC,GAAG,GAAGoB,EAAE,OAAOlB,EAAEiB,EAAE,OAAOA,EAAEA,EAAE,OAAO,CAAC,EAAE,EAAEG,EAAE8B,EAAG,SAAS,WAAWlD,CAAC,EAAEmB,EAAE,KAAK+B,EAAG,SAAS,QAAQhC,EAAEE,EAAE,GAAGF,EAAEE,EAAE,GAAGrB,EAAEoB,EAAE,IAAM,EAAA,CAAC,CAAC,EAAEA,CAAC,EAAE,MAAM,SAASF,EAAEC,EAAE,CAAO,MAAA,CAACD,EAAE,CAAC,EAAEC,EAAE,CAAC,EAAED,EAAE,CAAC,EAAEC,EAAE,CAAC,EAAED,EAAE,CAAC,EAAEC,EAAE,CAAC,EAAED,EAAE,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,SAASD,EAAE,CAAC,IAAIC,EAAEnB,EAAMmB,IAAAA,EAAE,EAAEA,EAAED,EAAE,OAAO,EAAEC,EAAEnB,EAAEkB,EAAEC,CAAC,EAAED,EAAEC,CAAC,EAAEnB,IAAI,GAAGA,IAAI,EAAE,OAAO,MAAMA,IAAI,EAAEA,GAAG,GAAUkB,OAAAA,CAAC,GAAGiC,EAAG,MAAM,WAAW,CAAC,SAAS,SAASjC,EAAE,CAAKC,IAAAA,EAAEnB,EAAEoB,EAAE,GAAGrB,EAAEoD,EAAG,SAAS,UAAUjC,CAAC,EAAMC,IAAAA,EAAE,EAAEA,EAAEpB,EAAE,EAAEoB,IAAQ,IAAEA,KAAKnB,EAAEkB,EAAEC,EAAE,CAAC,GAAGC,GAAG,OAAO,aAAapB,IAAI,IAAI,IAAI,CAAC,EAAEA,IAAI,EAAS,OAAA,mBAAmB,OAAOoB,CAAC,CAAC,CAAC,EAAE,OAAO,SAASF,EAAE,CAACA,EAAE,SAAS,mBAAmBA,CAAC,CAAC,EAAE,IAAIC,EAAEnB,EAAE,GAAGoB,EAAE,EAAMD,IAAAA,EAAE,EAAEA,EAAED,EAAE,OAAOC,IAAIC,EAAEA,GAAG,EAAEF,EAAE,WAAWC,CAAC,GAAM,EAAEA,IAAN,IAAWnB,EAAE,KAAKoB,CAAC,EAAEA,EAAE,GAAG,MAAO,GAAED,GAAGnB,EAAE,KAAKmD,EAAG,SAAS,QAAQ,GAAG,EAAEhC,GAAGC,CAAC,CAAC,EAAEpB,CAAC,CAAC,EAAEmD,EAAG,MAAM,OAAO,CAAC,OAAO,mEAAmE,SAAS,SAASjC,EAAEC,EAAEnB,EAAE,CAAC,IAAIoB,EAAErB,EAAE,GAAGE,EAAE,EAAEoB,EAAE8B,EAAG,MAAM,OAAO,OAAO7B,EAAE,EAAEC,EAAE4B,EAAG,SAAS,UAAUjC,CAAC,EAAE,IAAIlB,IAAIqB,EAAEA,EAAE,OAAO,EAAE,EAAE,EAAE,MAAMD,EAAE,EAAE,EAAErB,EAAE,OAAOwB,GAAGxB,GAAGsB,EAAE,QAAQC,EAAEJ,EAAEE,CAAC,IAAInB,KAAK,EAAE,EAAEA,EAAE,GAAGqB,EAAEJ,EAAEE,CAAC,GAAG,EAAEnB,EAAEA,GAAG,GAAGmB,MAAME,IAAI,EAAErB,GAAG,GAAG,KAAK,EAAEF,EAAE,QAAQ,CAACoB,GAAGpB,GAAG,IAAWA,OAAAA,CAAC,EAAE,OAAO,SAASmB,EAAEC,EAAE,CAACD,EAAEA,EAAE,QAAQ,QAAQ,EAAE,EAAE,IAAIlB,EAAEoB,EAAErB,EAAE,CAAGE,EAAAA,EAAE,EAAEoB,EAAE8B,EAAG,MAAM,OAAO,OAAO7B,EAAE,EAAE,IAAIH,IAAIE,EAAEA,EAAE,OAAO,EAAE,EAAE,EAAE,MAAMrB,EAAE,EAAEA,EAAEkB,EAAE,OAAOlB,IAAI,CAAC,IAAIoB,EAAEC,EAAE,QAAQH,EAAE,OAAOlB,CAAC,CAAC,GAAG,EAAQ,MAAA,IAAImD,EAAG,UAAU,QAAQ,oBAAoB,EAAElD,EAAE,IAAIA,GAAG,GAAGF,EAAE,KAAKuB,EAAEF,IAAInB,CAAC,EAAEqB,EAAEF,GAAG,GAAGnB,GAAGqB,GAAGF,GAAG,IAAInB,GAAG,EAAE,CAAC,MAAO,IAAGA,GAAGF,EAAE,KAAKoD,EAAG,SAAS,QAAQ,GAAGlD,EAAEqB,EAAE,CAAC,CAAC,EAAEvB,CAAC,GAAGoD,EAAG,MAAM,UAAU,CAAC,SAAS,SAASjC,EAAE,CAAC,OAAOiC,EAAG,MAAM,OAAO,SAASjC,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,SAASA,EAAE,CAAC,OAAOiC,EAAG,MAAM,OAAO,OAAOjC,EAAE,CAAC,CAAC,CAAA,EAAGiC,EAAG,KAAK,IAAI,CAAC,KAAK,MAAM,QAAQ,SAASjC,EAAEC,EAAEnB,EAAEoB,EAAErB,EAAE,CAAC,IAAIE,EAAEoB,EAAEF,EAAE,MAAM,CAAC,EAAEG,EAAE6B,EAAG,SAAgBpD,OAAAA,EAAEA,GAAG,IAAIqB,EAAEA,GAAG,GAAGnB,EAAEkD,EAAG,KAAK,IAAI,SAAS,GAAGjC,EAAEG,EAAED,EAAEpB,EAAED,CAAC,EAAEuB,EAAE,OAAOrB,EAAE,KAAKA,EAAE,GAAG,CAAC,EAAE,QAAQ,SAASiB,EAAEC,EAAEnB,EAAEoB,EAAErB,EAAE,CAAC,IAAIE,EAAEoB,EAAEC,EAAEH,EAAE,MAAM,CAAC,EAAEI,EAAE4B,EAAG,SAAS3B,EAAED,EAAE,UAAUD,CAAC,EAAKF,GAAAA,EAAEA,GAAG,CAAIrB,GAAAA,EAAEA,GAAG,MAAMyB,GAAGH,EAAEE,EAAE,SAASD,EAAEE,EAAEzB,CAAC,EAAEuB,EAAEC,EAAE,SAASD,EAAE,EAAEE,EAAEzB,CAAC,IAAIsB,EAAEC,EAAEA,EAAE,CAAIrB,GAAAA,EAAEkD,EAAG,KAAK,IAAI,SAAS,GAAGjC,EAAEI,EAAEF,EAAEpB,EAAED,CAAC,EAAE,CAACwB,EAAE,MAAMtB,EAAE,IAAIoB,CAAC,QAAQ,IAAI8B,EAAG,UAAU,QAAQ,wBAAwB,EAAE,OAAOlD,EAAE,IAAI,EAAE,gBAAgB,SAASiB,EAAEC,EAAE,CAAC,IAAInB,EAAEoB,EAAErB,EAAEE,EAAEoB,EAAEC,EAAE6B,EAAG,SAAS,MAAM,IAAIpD,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEE,EAAEkB,EAAE,MAAM,CAAC,EAAEnB,EAAE,EAAEA,EAAE,IAAIA,IAAI,CAAC,IAAQkB,EAAE,KAAK,MAAMlB,EAAE,EAAE,CAAC,EAAE,GAAG,GAAGA,EAAE,KAAMD,EAAEuB,EAAEvB,EAAEE,CAAC,GAAGoB,GAAM,EAAEpB,EAAE,CAAC,IAAT,EAAYmB,EAAE,EAAEA,EAAE,EAAEA,IAAInB,EAAEmB,CAAC,EAAEnB,EAAEmB,CAAC,IAAI,GAAG,EAAEnB,EAAEmB,EAAE,CAAC,IAAI,GAAGnB,EAAE,CAAC,EAAEA,EAAE,CAAC,IAAI,EAAEoB,IAAIpB,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,KAAK,GAAG,CAAQF,OAAAA,CAAC,EAAE,OAAO,SAASmB,EAAEC,EAAEnB,EAAE,CAAKoB,IAAAA,EAAErB,EAAEE,EAAED,EAAE,OAAWoB,IAAAA,EAAED,EAAE,MAAM,CAAC,EAAEpB,EAAE,EAAEA,EAAEE,EAAEF,GAAG,EAAEqB,EAAE,CAAC,GAAG,WAAWpB,EAAED,CAAC,EAAEqB,EAAE,CAAC,GAAG,WAAWpB,EAAED,EAAE,CAAC,EAAEqB,EAAE,CAAC,GAAG,WAAWpB,EAAED,EAAE,CAAC,EAAEqB,EAAE,CAAC,GAAG,WAAWpB,EAAED,EAAE,CAAC,EAAEqB,EAAE+B,EAAG,KAAK,IAAI,gBAAgB/B,EAAEF,CAAC,EAASE,OAAAA,CAAC,EAAE,SAAS,SAASF,EAAEC,EAAEnB,EAAEoB,EAAErB,EAAEE,EAAE,CAAC,IAAIoB,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEuB,EAAEC,EAAEvB,EAAEwB,EAAEH,EAAG,SAAS,IAAItB,EAAE7B,EAAE,OAAOoD,EAAEE,EAAE,UAAUtD,CAAC,EAAEqD,EAAEC,EAAE,UAAUlC,CAAC,EAAEU,EAAEwB,EAAE,UAAUvD,CAAC,EAAEsB,EAAEF,EAAE,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAOW,IAAL,IAAQR,EAAEvB,EAAE,MAAM,CAAC,EAAEuB,EAAEgC,EAAE,OAAOhC,EAAE,CAAC,CAAC,CAAC,IAAIA,EAAE6B,EAAG,KAAK,IAAI,OAAO9B,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEtB,CAAC,EAAEuB,EAAE6B,EAAG,KAAK,IAAI,OAAO9B,EAAEC,EAAE,CAAC,EAAE,EAAE,KAAK,MAAMQ,EAAE,UAAU,EAAE,WAAWA,CAAC,CAAC,GAAGP,EAAE4B,EAAG,KAAK,IAAI,OAAO9B,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAED,CAAC,EAAEM,EAAEJ,EAAE,MAAM,CAAC,EAAEK,EAAEJ,EAAE,MAAM,CAAC,EAAEL,IAAIS,EAAEwB,EAAG,KAAK,IAAI,OAAO9B,EAAEE,EAAEvB,CAAC,GAAGyB,EAAE,EAAEA,EAAEI,EAAEJ,GAAG,EAAEC,EAAE,CAAC,IAAIF,EAAEL,EAAE,QAAQO,CAAC,EAAE1B,EAAEyB,CAAC,GAAGD,EAAE,CAAC,EAAExB,EAAEyB,EAAE,CAAC,GAAGD,EAAE,CAAC,EAAExB,EAAEyB,EAAE,CAAC,GAAGD,EAAE,CAAC,EAAExB,EAAEyB,EAAE,CAAC,GAAGD,EAAE,CAAC,EAAE,OAAOxB,EAAEsD,EAAE,MAAMtD,EAAEoD,CAAC,EAAElC,IAAIS,EAAEwB,EAAG,KAAK,IAAI,OAAO9B,EAAEE,EAAEvB,CAAC,GAAG4B,EAAE,CAAC,KAAK,MAAMyB,EAAE,UAAU,EAAE,WAAWA,EAAE,KAAK,MAAMD,EAAE,UAAU,EAAE,WAAWA,CAAC,EAAEzB,EAAEwB,EAAG,KAAK,IAAI,OAAO9B,EAAEM,EAAEC,CAAC,EAAEJ,EAAEL,EAAE,QAAQG,CAAC,EAAEK,EAAE,CAAC,GAAGH,EAAE,CAAC,EAAEG,EAAE,CAAC,GAAGH,EAAE,CAAC,EAAEG,EAAE,CAAC,GAAGH,EAAE,CAAC,EAAEG,EAAE,CAAC,GAAGH,EAAE,CAAC,EAAE,CAAC,IAAI8B,EAAE,SAAS3B,EAAE,EAAE1B,CAAC,EAAE,KAAKD,EAAE,CAAC,EAAE,SAASkB,EAAE,CAACA,EAAEA,EAAE,UAAU,CAAC,EAAE,YAAYA,EAAEA,EAAE,cAAc,CAAC,EAAE,gBAAgBA,EAAEA,EAAE,WAAW,CAAC,EAAE,YAAY,EAAE0B,KAAIA,GAAE,CAAA,EAAG,ECGzkkB,IAACY,GAASC,GAAQC,GAAS,EAAE,EAAGC,GAAmB,EAAI,EAAG,QAAQ,EACjEC,GAAiBH,GAAQC,GAAS,EAAE,EAAGC,GAAmB,EAAI,EAAG,gBAAgB,EAChEF,GAAQC,GAAS,EAAE,EAAGC,GAAmB,EAAI,EAAG,gBAAgB,ECJ5F,MAAME,EAAQ,mEAoBDC,GAAeC,GAAgB,CACxC,MAAM/E,EAAS,IAAI,WAAW,GAAG,EAEjC,QAASiB,EAAI,EAAGA,EAAI4D,EAAM,OAAQ5D,IAC9BjB,EAAO6E,EAAM,WAAW5D,CAAC,CAAC,EAAIA,EAElC,MAAM+D,EAAuBD,EAAY,OAAS,IAC5CE,EAAeF,EAAY,OAC3BG,EAAeH,EAAYA,EAAY,OAAS,CAAC,IAAM,IACvDA,EAAYA,EAAY,OAAS,CAAC,IAAM,IACpCC,EAAuB,EACvBA,EAAuB,EAC3BA,EACAG,EAAS,IAAI,YAAYD,CAAY,EACrCE,EAAQ,IAAI,WAAWD,CAAM,EAEnC,IAAItC,EAAI,EAER,QAAS5B,EAAI,EAAGA,EAAIgE,EAAchE,GAAK,EAAG,CACtC,MAAMoE,EAAWrF,EAAO+E,EAAY,WAAW9D,CAAC,CAAC,EAC3CqE,EAAWtF,EAAO+E,EAAY,WAAW9D,EAAI,CAAC,CAAC,EAC/CsE,EAAWvF,EAAO+E,EAAY,WAAW9D,EAAI,CAAC,CAAC,EAC/CuE,EAAWxF,EAAO+E,EAAY,WAAW9D,EAAI,CAAC,CAAC,EACrDmE,EAAMvC,GAAG,EAAKwC,GAAY,EAAMC,GAAY,EAC5CF,EAAMvC,GAAG,GAAMyC,EAAW,KAAO,EAAMC,GAAY,EACnDH,EAAMvC,GAAG,GAAM0C,EAAW,IAAM,EAAMC,EAAW,EACpD,CACD,OAAOJ,CACX,EAKaK,GAAeL,GAAU,CAElC,IAAIM,EAAS,GAEb,QAASzE,EAAI,EAAGA,EAAImE,EAAM,OAAQnE,GAAK,EACnCyE,GAAUb,EAAMO,EAAMnE,CAAC,GAAK,CAAC,EAC7ByE,GAAUb,GAAQO,EAAMnE,CAAC,EAAI,IAAM,EAAMmE,EAAMnE,EAAI,CAAC,GAAK,CAAE,EAC3DyE,GAAUb,GAAQO,EAAMnE,EAAI,CAAC,EAAI,KAAO,EAAMmE,EAAMnE,EAAI,CAAC,GAAK,CAAE,EAChEyE,GAAUb,EAAMO,EAAMnE,EAAI,CAAC,EAAI,EAAE,EAOrC,OALemE,EAAM,OAAS,IAAM,EAC9B,GAAGM,EAAO,UAAU,EAAGA,EAAO,OAAS,CAAC,CAAC,IACzCN,EAAM,OAAS,IAAM,EACjB,GAAGM,EAAO,UAAU,EAAGA,EAAO,OAAS,CAAC,CAAC,KACzCA,CAEd,EC7DaC,GAAQ,CAACC,EAAQC,EAAQ,IAAM,MAAM,KAAK,CAAE,OAAAD,CAAQ,EAAE,CAAC7C,EAAG+C,IAAUD,EAAQC,CAAK,EAOjFC,GAAa,CAACC,EAAOC,IAAgBN,GAAM,KAAK,KAAKK,EAAM,OAASC,CAAW,CAAC,EACxF,IAAKH,GAAUA,EAAQG,CAAW,EAClC,IAAKJ,GAAUG,EAAM,MAAMH,EAAOA,EAAQI,CAAW,CAAC,EACrDC,GAAe,EACfC,GAAc,GAaPC,EAAYC,GAAa,WAAW,KAAKN,GAAWM,EAAUH,EAAY,EAAE,IAAKI,GAAS,SAASA,EAAMH,EAAW,CAAC,CAAC,EAMtHI,GAASC,GAAaA,EAAS,OAASN,KAAiB,GAAK,CAAC,gBAAgB,KAAKM,CAAQ,EAQ5FC,GAAYrB,GAAUA,EAAM,OAAO,CAACsB,EAAKJ,IAASI,EAAMJ,EAAK,SAASH,EAAW,EAAE,SAASD,GAAc,GAAG,EAAG,EAAE,EAOlHS,GAAkBN,GAAaI,GAASL,EAASC,CAAQ,EAAE,SAAS,EAKpEO,EAAmBC,GAAU,CACtC,MAAMC,EAAcD,EAAM,OAAO,CAACE,EAAOC,IAAQD,EAAQC,EAAI,OAAQ,CAAC,EAChEC,EAAY,IAAI,WAAWH,CAAW,EAE5C,OAAAD,EAAM,OAAO,CAACf,EAAOkB,KAEjBC,EAAU,IAAID,EAAKlB,CAAK,EACjBA,EAAQkB,EAAI,QACpB,CAAC,EACGC,CACX,EAOaC,GAAe,CAAC5E,EAAGgC,IAAM,CAClC,GAAIhC,EAAE,SAAWgC,EAAE,OACf,MAAO,GAGX,QAASrD,EAAI,EAAGA,EAAIqB,EAAE,OAAQrB,IAC1B,GAAIqB,EAAErB,CAAC,IAAMqD,EAAErD,CAAC,EACZ,MAAO,GAGf,MAAO,EACX,ECzDakG,EAAc,CAACC,EAAWC,IAAiB,GAAGD,CAAS,GAAGC,IAAiB,OAAY,GAAK,IAAIA,CAAY,EAAE,GAC9GC,GAAe,CAACC,EAAOC,EAAU,8BAA8B,OAAOD,CAAK,CAAC,2EAA6E,CAElK,MAAM,IAAI,MAAMC,CAAO,CAC3B,ECFaC,GAAmB,CAACT,EAAK5B,IAAU,CAC5C,MAAMsC,EAAa,IAAI,WAAWtC,CAAK,EAGvC,OAAA4B,EAAI,OAAS5B,EAAQsC,EAAW,KAFf,GAE4B,EAAIA,EAAW,IAAIV,CAAG,EAC5DU,CACX,EAgCaC,GAAuBJ,GAAU,CAE1C,MAAMP,EAAM,IAAI,WAAW,CAAY,EAIvC,OAFa,IAAI,SAASA,EAAI,OAAQA,EAAI,WAAYA,EAAI,UAAU,EAE/D,UAAU,EAAGO,EAHU,EAGgB,EACrCP,CACX,EAwFaY,EAAuBL,GAAU,CAE1C,MAAMP,EAAM,IAAI,WAAW,CAAY,EAIvC,OAFa,IAAI,SAASA,EAAI,OAAQA,EAAI,WAAYA,EAAI,UAAU,EAE/D,UAAU,EAAGO,EAHU,EAGgB,EACrCP,CACX,EAUaa,GAAuBN,GAAU,CAE1C,MAAMP,EAAM,IAAI,WAAW,CAAY,EAIvC,OAFa,IAAI,SAASA,EAAI,OAAQA,EAAI,WAAYA,EAAI,UAAU,EAE/D,UAAU,EAAGO,EAHU,EAGgB,EACrCP,CACX,EAOac,GAAqBP,GAAU,CAExC,MAAMQ,EAAO,OAAO,GAAc,EAC5BrC,EAAS,CAAA,EAEf,IAAIsC,EAAYT,EAEhB,KAAOS,GAAaD,GAEhBrC,EAAO,KAAK,OAAOsC,EAAYD,CAAI,CAAC,EAEpCC,GAAaD,EAGjB,OAAIC,EAAY,IACZtC,EAAO,KAAK,OAAOsC,CAAS,CAAC,EAC1B,WAAW,KAAKtC,EAAO,OAAS,EAAIA,EAAS,CAAC,CAAC,CAAC,CAC3D,EASauC,GAA8BV,GAEhCE,GAAiBK,GAAkBP,CAAK,EAAG,CAAM,EAU/CW,GAAuBX,GAAU,CAE1C,MAAMY,EAAgB,OAAO,QAAQ,GAAoBZ,CAAK,EAE9D,OADuBU,GAA2BE,CAAa,CAEnE,EA0DaC,GAAuBpB,GACnB,IAAI,SAASA,EAAI,OAAQA,EAAI,WAAYA,EAAI,UAAU,EAExD,UAAU,EADK,EACgB,EASlCqB,GAAuBrB,GACnB,IAAI,SAASA,EAAI,OAAQA,EAAI,WAAYA,EAAI,UAAU,EAExD,UAAU,EADK,EACgB,EAoDlCsB,GAA+Bf,GAEjCE,GAAiBK,GAAkBP,CAAK,EAAG,EAAY,EAAE,UAWvDgB,GAAoB,CAACvB,EAAK5B,EAAQ4B,EAAI,SAAW,CAE1D,GAAIA,EAAI,SAAW5B,EAEf,MAAM,IAAI,UAAU,sBAAsBA,CAAK,GAAG,EAEtD,OAAO,IAAI,WAAW4B,EAAI,OAAQA,EAAI,WAAYA,EAAI,MAAM,EAAE,YAE9D,CAACwB,EAAalC,IAAUkC,GAAe,OAAO,CAAW,EAAK,OAAOlC,CAAI,EAAG,EAAE,CAClF,EAQamC,GAAuBzB,GAAQ,CAExC,MAAM0B,EAAe1B,EAAI,OAAS,EAAsBA,EAAI,MAAM,EAAG,CAAmB,EAAIA,EAC5F,OAAOuB,GAAkBG,EAAc,CAAmB,CAC9D,EAOaC,GAAqBF,GAQrBG,GAAqBV,GAMrBW,GAA2BC,GAAc,CAClD,OAAQA,EAAS,CACb,IAAK,KACD,MAAO,GACX,IAAK,KACD,MAAO,GACX,IAAK,KACD,MAAO,GACX,QACI,MAAO,EACd,CACL,EACO,IAAIC,IACV,SAAUA,EAAkB,CACzBA,EAAiB,SAAc,yDAC/BA,EAAiB,kBAAuB,iDACxCA,EAAiB,WAAgB,mEACjCA,EAAiB,eAAoB,iEACzC,GAAGA,KAAqBA,GAAmB,CAAE,EAAC,EAavC,MAAMC,GAAmBC,GAAa,CACzC,KAAM,CAAE,IAAAjC,EAAK,MAAAlB,CAAO,EAAGmD,EACjBC,EAASlC,EAAIlB,CAAK,EACxB,GAAIoD,IAAW,OACX,OAAO/B,EAAY4B,GAAiB,QAAQ,EAEhD,MAAM3D,EAAQyD,GAAwBK,CAAM,EAC5C,GAAIlC,EAAI,OAASlB,EAAQV,EACrB,OAAO+B,EAAY4B,GAAiB,kBAAmB,sBAAsBG,CAAM,sBAAsB9D,CAAK,4BAA4B4B,EAAI,OAASlB,CAAK,EAAE,EAGlK,MAAMqD,EADY/D,IAAU,EAEtB4B,EAAI,SAASlB,EAAQ,EAAGA,EAAQV,CAAK,EACrC4B,EAAI,SAASlB,EAAOA,EAAQV,CAAK,EACvC,MAAO,CACH,SAAU,CAAE,IAAA4B,EAAK,MAAOlB,EAAQV,CAAO,EACvC,OAAQmD,GAAkBY,CAAQ,CAC1C,CACA,EAaaC,EAAuB7B,GAAUA,GAAS,OAAO,GAAoC,EAC5F,WAAW,GAAG,OAAOA,CAAK,CAAC,EAC3BA,GAAS,OAAO,KAAuC,EACnD,WAAW,KAAK,CACd,IACA,GAAGI,GAAoB,OAAOJ,CAAK,CAAC,CAChD,CAAS,EACCA,GAAS,OAAO,UAA4C,EACxD,WAAW,KAAK,CACd,IACA,GAAGK,EAAoB,OAAOL,CAAK,CAAC,CACpD,CAAa,EACC,WAAW,KAAK,CACd,IACA,GAAGW,GAAoBX,CAAK,CAC5C,CAAa,EASA8B,GAA0BJ,GAAa,CAChD,MAAMK,EAAON,GAAgBC,CAAQ,EACrC,GAAI,OAAOK,GAAS,SAChB,OAAOA,EAEX,MAAMC,EAAaD,EAAK,SAAS,MAAQL,EAAS,MAC5CO,EAAoBJ,EAAoBE,EAAK,MAAM,EACzD,OAAIC,IAAeC,EAAkB,OAC1BrC,EAAY4B,GAAiB,WAAY,UAAUO,EAAK,OAAO,SAAQ,CAAE,qBAAqBC,CAAU,uBAAuBC,EAAkB,MAAM,EAAE,EAE7JF,CACX,EAiCaG,GAAyBC,GAEtC,WAAW,KAAK,YAAY,GAAGA,CAAK,CAAC,EAAE,CAAC,EC7hB3BC,GAAe,CAACV,EAAUW,IAAkB,CAErD,IAAIC,EAAeZ,EACnB,MAAMa,EAAU,CAAA,EAEhB,UAAWC,KAAgBH,EAAe,CACtC,MAAMI,EAAMD,EAAaF,CAAY,EACrC,GAAI,OAAOG,GAAQ,SACf,OAAOA,EAGXF,EAAQ,KAAKE,EAAI,MAAM,EAEvBH,EAAeG,EAAI,QACtB,CACD,MAAO,CACH,SAAUH,EACV,OAAQC,CAChB,CACA,EACO,IAAIG,IACV,SAAUA,EAAoB,CAC3BA,EAAmB,UAAe,4BAClCA,EAAmB,KAAU,qBACjC,GAAGA,KAAuBA,GAAqB,CAAE,EAAC,EAS3C,MAAMC,GAAgB,CAACjB,EAAUc,IAAiB,CACrD,MAAMI,EAAYd,GAAuBJ,CAAQ,EACjD,GAAI,OAAOkB,GAAc,SACrB,OAAOhD,EAAY8C,GAAmB,UAAWE,CAAS,EAG9D,IAAIN,EAAeM,EAAU,SAC7B,MAAMzE,EAAS,CAAA,EAEf,QAASsC,EAAY,OAAOmC,EAAU,MAAM,EAAGnC,EAAY,EAAGA,IAAa,CACvE,MAAMsB,EAAOS,EAAaF,CAAY,EACtC,GAAI,OAAOP,GAAS,SAChB,OAAOnC,EAAY8C,GAAmB,KAAMX,CAAI,EAGpD5D,EAAO,KAAK4D,EAAK,MAAM,EAEvBO,EAAeP,EAAK,QACvB,CACD,MAAO,CAAE,SAAUO,EAAc,OAAAnE,EACrC,EC5Da0E,GAAsB,MAAOC,EAAkBC,EAA0BC,EAAgBC,EAAgBC,EAAkBC,IAAoB,CACxJ,MAAMC,GAAQ,MAAM,YAAY,YAAYN,EAAkB,CAC1D,CAACC,CAAwB,EAAG,CAQxB,iBAAkB,CAACM,EAAKC,IAAQ,CAE5B,MAAM,IAAI,MAEV,MAAM,KAAKC,EAAgB,EAAC,SAASF,EAAKA,EAAMC,CAAG,CAAC,EAC/C,IAAKE,GAAQ,OAAO,aAAaA,CAAG,CAAC,EACrC,KAAK,EAAE,CAAC,CAChB,CACJ,CACT,CAAK,GAAG,SAAS,QACb,IAAIC,EACAC,EACAC,EACJ,MAAMC,EAAoB,KAClBD,IAA4B,SAC5BA,EAA0BP,EAAK,kCAE5BO,GAMX,SAASJ,GAAiB,CACtB,OAAIE,IAAsB,QACtBA,EAAkB,SAAWL,EAAK,OAAO,UAEzCK,EAAoB,IAAI,WAAWL,EAAK,OAAO,MAAM,GAElDK,CACV,CACD,MAAMI,EAAkB,MAChBH,IAAuB,QACvBA,EAAmB,SAAWN,EAAK,OAAO,UAE1CM,EAAqB,IAAI,YAAYN,EAAK,OAAO,MAAM,GAEpDM,GAELI,EAAoBxE,GAAU,CAChC,MAAM+D,EAAMD,EAAK,kBAAkB9D,EAAM,MAAM,EAC/C,OAAAiE,IAAiB,IAAIjE,EAAO+D,CAAG,EACxB,CAACA,EAAK/D,EAAM,MAAM,CACjC,EACUyE,EAAqB,CAACV,EAAKC,IAAQC,IAAiB,SAASF,EAAKA,EAAMC,CAAG,EA+DjF,MAAO,CACH,MAlBWU,GAAa,CACxB,KAAM,CAACC,EAAMC,CAAI,EAAIJ,EAAiBE,CAAQ,EACxCG,EAASP,IACf,GAAI,CACAR,EAAKD,CAAe,EAAEgB,EAAQF,EAAMC,CAAI,EACxC,MAAME,EAAMP,IACNR,EAAMe,EAAID,EAAS,CAAC,EACpBb,EAAMc,EAAID,EAAS,EAAI,CAAC,EACxBE,EAAUN,EAAmBV,EAAKC,CAAG,EAAE,MAAK,EAClD,OAAAF,EAAK,gBAAgBC,EAAKC,CAAG,EACtBe,CACV,QACO,CACJL,EAAS,IAAIT,EAAgB,EAAC,SAASU,EAAO,EAAGA,EAAO,EAAIC,CAAI,CAAC,EACjEd,EAAK,gBAAgBa,EAAMC,CAAI,CAClC,CACT,EAGQ,KAhEUzF,GAAU,CACpB,KAAM,CAACwF,EAAMC,CAAI,EAAIJ,EAAiBrF,CAAK,EACrC0F,EAASP,IACf,GAAI,CACAR,EAAKJ,CAAc,EAAEmB,EAAQF,EAAMC,CAAI,EACvC,MAAME,EAAMP,IACNR,EAAMe,EAAID,EAAS,CAAC,EACpBb,EAAMc,EAAID,EAAS,EAAI,CAAC,EACxBE,EAAUN,EAAmBV,EAAKC,CAAG,EAAE,MAAK,EAClD,OAAAF,EAAK,gBAAgBC,EAAKC,CAAG,EACtBe,CACV,QACO,CACJjB,EAAK,gBAAgBa,EAAMC,CAAI,CAClC,CACT,EAkDQ,KAjDS,IAAM,CACf,MAAMC,EAASP,IACfR,EAAKH,CAAc,EAAEkB,CAAM,EAC3B,MAAMC,EAAMP,IACNR,EAAMe,EAAID,EAAS,CAAC,EACpBb,EAAMc,EAAID,EAAS,EAAI,CAAC,EACxBE,EAAUN,EAAmBV,EAAKC,CAAG,EAAE,MAAK,EAClD,OAAAF,EAAK,gBAAgBC,EAAKC,CAAG,EACtBe,CACf,EAyCQ,OAxCW,CAACL,EAAUvF,IAAU,CAChC,KAAM,CAACwF,EAAMC,CAAI,EAAIJ,EAAiBE,CAAQ,EACxC,CAACM,EAAMC,CAAI,EAAIT,EAAiBrF,CAAK,EACrC0F,EAASP,IACf,GAAI,CACAR,EAAKF,CAAgB,EAAEiB,EAAQF,EAAMC,EAAMI,EAAMC,CAAI,EACrD,MAAMH,EAAMP,IACNR,GAAMe,EAAID,EAAS,CAAC,EACpBb,GAAMc,EAAID,EAAS,EAAI,CAAC,EACxBE,GAAUN,EAAmBV,GAAKC,EAAG,EAAE,MAAK,EAClD,OAAAF,EAAK,gBAAgBC,GAAKC,EAAG,EACtBe,EACV,QACO,CACJL,EAAS,IAAIT,EAAgB,EAAC,SAASU,EAAO,EAAGA,EAAO,EAAIC,CAAI,CAAC,EACjEd,EAAK,gBAAgBa,EAAMC,CAAI,EAC/Bd,EAAK,gBAAgBkB,EAAMC,CAAI,CAClC,CACT,CAuBA,CACA,EC5HaC,GAAuB,2ruBCE9BC,GAA+B,EAC/BC,GAAmC,EAEnCC,GAAqC,IACrCC,GAAmC,IACnCC,GAAkC,IAElCC,GAA2BL,GAA+BE,GAC1DI,GAAyBN,GAA+BG,GACxDI,GAAyBP,GAEzBQ,GAA0BP,GAAmCG,GAC7DK,GAA4BR,GAW3B,IAAIS,IACV,SAAUA,EAAa,CACpBA,EAAYA,EAAY,KAAUH,EAAsB,EAAI,OAC5DG,EAAYA,EAAY,OAAYL,EAAwB,EAAI,SAChEK,EAAYA,EAAY,KAAUJ,EAAsB,EAAI,OAC5DI,EAAYA,EAAY,KAAUJ,GAAyBD,EAAwB,EAAI,MAC3F,GAAGK,KAAgBA,GAAc,CAAE,EAAC,EAO7B,IAAIC,IACV,SAAUA,EAAiB,CACxBA,EAAgBA,EAAgB,WAAgBH,EAAuB,EAAI,aAC3EG,EAAgBA,EAAgB,aAAkBF,EAAyB,EAAI,cACnF,GAAGE,KAAoBA,GAAkB,CAAA,EAAG,EC1CrC,MAAMC,GAAuB,+90OCE9BC,GAAoB,CAACC,EAAUC,EAAQC,KAAa,CACtD,cAAgBC,GAAYH,EAAS,QAAQ,0BAA0BG,CAAO,EAC9E,iBAAkB,CAACC,EAAYC,IAAYL,EAAS,QAAQ,6BAA6BI,EAAYC,CAAO,EAC5G,KAAOC,GAAYN,EAAS,QAAQ,MAAMM,CAAO,EACjD,QAAAJ,EACA,OAAAD,EACA,SAAAD,EACA,OAAS1H,GAAU0H,EAAS,QAAQ,QAAQ1H,CAAK,EACjD,YAAc2F,GAAQ,CAElB,MAAMqC,EAAUN,EAAS,QAAQ,QAAQ,CAAC,EAEpCO,EAAgBD,GAAW,EAEjC,OAAAJ,EAAQ,IAAI,CAACjC,CAAG,EAAGsC,CAAa,EACzBD,CACV,EACD,iBAAmBvG,GAAU,CACzB,MAAMuG,EAAUN,EAAS,QAAQ,QAAQjG,EAAM,MAAM,EAErD,OAAAkG,EAAO,IAAIlG,EAAOuG,CAAO,EAClBA,CACV,EACD,gBAAiB,CAACF,EAAYI,EAAcC,IAAmBT,EAAS,QAAQ,gCAAgCI,EAAYI,EAAcC,CAAc,EACxJ,gBAAiB,CAACL,EAAYI,EAAcC,IAAmBT,EAAS,QAAQ,gCAAgCI,EAAYI,EAAcC,CAAc,EACxJ,aAAc,CAACL,EAAYM,EAAcF,IAAiBR,EAAS,QAAQ,4BAA4BI,EAAYM,EAAcF,CAAY,EAC7I,YAAa,CAACJ,EAAYO,EAAiBC,EAAgBC,IAAsBb,EAAS,QAAQ,2BAA2BI,EAAYO,EAAiBC,EAAgBC,CAAiB,EAC3L,gBAAiB,CAACT,EAAYU,EAAWC,EAAiBL,EAAcM,IAAgBhB,EAAS,QAAQ,+BAA+BI,EAAYU,EAAWC,EAAiBL,EAAcM,CAAW,EACzM,eAAgB,CAACZ,EAAYM,EAAcD,IAAmBT,EAAS,QAAQ,+BAA+BI,EAAYM,EAAcD,CAAc,EACtJ,eAAgB,CAACL,EAAYM,EAAcD,IAAmBT,EAAS,QAAQ,+BAA+BI,EAAYM,EAAcD,CAAc,EACtJ,WAAY,CAACH,EAAShI,IAAU,IAAI,WAAW2H,EAAO,OAAQK,EAAShI,CAAK,EAC5E,UAAYgI,GAAY,CAEpB,MAAMC,EAAgBD,GAAW,EAEjC,OAAOJ,EAAQK,CAAa,CAC/B,EACD,QAAS,CAACH,EAAYa,EAAqBC,EAASC,IAAanB,EAAS,QAAQ,yBAAyBI,EAAYa,EAAqBC,EAASC,CAAQ,EAC7J,0BAA2B,CAACf,EAAYgB,EAAeC,EAAaC,IAAQtB,EAAS,QAAQ,qDAAqDI,EAAYgB,EAAeC,EAAaC,CAAG,EAC7L,8BAA+B,CAAClB,EAAYmB,EAAWC,EAAaN,IAAYlB,EAAS,QAAQ,yDAAyDI,EAAYmB,EAAWC,EAAaN,CAAO,EACrM,YAAa,CAACd,EAAYqB,EAAcN,EAAUX,IAAiBR,EAAS,QAAQ,wBAAwBI,EAAYqB,EAAcN,EAAUX,CAAY,EAC5J,cAAe,CAACJ,EAAYsB,EAAQP,EAAUT,IAAiBV,EAAS,QAAQ,0BAA0BI,EAAYsB,EAAQP,EAAUT,CAAY,EACpJ,aAAc,CAACN,EAAYI,IAAiBR,EAAS,QAAQ,4BAA4BI,EAAYI,CAAY,EACjH,KAAM,CAACJ,EAAYqB,EAAcN,EAAUX,IAAiBR,EAAS,QAAQ,sBAAsBI,EAAYqB,EAAcN,EAAUX,CAAY,EACnJ,gBAAiB,CAACJ,EAAYgB,EAAeD,EAAUX,IAAiBR,EAAS,QAAQ,kCAAkCI,EAAYgB,EAAeD,EAAUX,CAAY,EAC5K,kBAAmB,CAACJ,EAAYqB,EAAcJ,IAAgBrB,EAAS,QAAQ,oCAAoCI,EAAYqB,EAAcJ,CAAW,EACxJ,mBAAoB,CAACjB,EAAYqB,EAAcJ,IAAgBrB,EAAS,QAAQ,qCAAqCI,EAAYqB,EAAcJ,CAAW,EAC1J,sBAAuB,CAACjB,EAAYmB,EAAWI,IAAoB3B,EAAS,QAAQ,yCAAyCI,EAAYmB,EAAWI,CAAe,EACnK,kBAAmB,CAACvB,EAAYmB,EAAWK,EAAaC,IAAmB7B,EAAS,QAAQ,qCAAqCI,EAAYmB,EAAWK,EAAaC,CAAc,EACnL,0BAA2B,CAACzB,EAAY0B,EAAqBT,IAAgBrB,EAAS,QAAQ,6CAA6CI,EAAY0B,EAAqBT,CAAW,EACvL,sBAAuB,CAACjB,EAAY2B,EAAiBC,EAAuBX,IAAgBrB,EAAS,QAAQ,yCAAyCI,EAAY2B,EAAiBC,EAAuBX,CAAW,EACrN,OAAQ,CAACjB,EAAYsB,EAAQP,EAAUc,IAAcjC,EAAS,QAAQ,wBAAwBI,EAAYsB,EAAQP,EAAUc,CAAS,CACzI,GAMMC,GAAkB7J,GAAW,CAG/B,MAAM8J,EAAS,IAAI,WAAW9J,CAAM,EAC9B+J,EAAS,IAAI,WAAW/J,CAAM,EAC9B4H,EAAS,IAAI,WAAW5H,CAAM,EACpC,OAAA+J,EAAO,CAAC,EAAI,WACZD,EAAO,CAAC,EAAI,MACL,EAAAlC,EAAO,CAAC,IAAM,KAAOA,EAAO,CAAC,IAAM,GAI9C,EAIMoC,GAAc,CAACC,EAAQC,IAAS,KAAK,KAAKA,EAAOD,CAAM,EAAIA,EAWpDE,GAAgC,MAAOjF,GAAqB,CAMrE,MAAMkF,EAAa,IAAI,YAAY,OAAO,CACtC,QAAS,IACT,QAAS,GACjB,CAAK,EAED,GAAI,CAACP,GAAeO,EAAW,MAAM,EAOjC,MAAM,IAAI,MAAM,yDAAyD,EAE7E,MAAMC,EAAc,KACdC,EAAoBD,EAAc,MAAQ,GAC1CE,EAAiBD,EAEjBE,EAAaF,EADS,EACiC,GAAM,IAC7DG,EAAWT,GAAY,GAAaQ,CAAS,EAE7CE,EADaD,EACY,QACzBE,EAAeX,GAAY,GAAaU,CAAS,EACjD9C,EAAS,IAAI,WAAWwC,EAAW,MAAM,EACzCL,EAAS,IAAI,WAAWK,EAAW,MAAM,EACzCvC,EAAU,IAAI,YAAYuC,EAAW,MAAM,EACjDL,EAAOQ,GAAkB,CAAC,EAAII,EAC9B,MAAMC,EAAa,EACbC,EAAiB,EAEvB,IAAIC,EAsCJ,MAAMC,EAAO,CACT,IAAK,CACD,GAhCI,CACR,eAAAR,EACA,SAAAE,EAEA,YAAcrI,IACN0I,IAAqB,SACrBf,EAAOe,EAAgB,GAAM,CAAC,EAAI1I,GAE/BA,GAEX,OAAQ,CAAC4I,EAAM,oBAAsB,CACjC,MAAM,IAAI,MAAMA,CAAG,CACtB,EAED,uBAAwB,CAACC,EAAMC,EAAKtF,KAChCgC,EAAO,IAAIA,EAAO,SAASsD,EAAKA,EAAMtF,CAAG,EAAGqF,CAAI,EACzCA,GAEX,MAAO,CAACD,EAAM,oBAAsB,CAChC,MAAM,IAAI,MAAMA,CAAG,CACtB,EACD,wBAAyB,IAAM,CAC3B,MAAM,IAAI,MAAM,sDAAsD,CACzE,EACD,cAAe,IAAM,CACjB,MAAM,IAAI,MAAM,4CAA4C,CAC/D,EACD,eAAgB,IAAM,QAE9B,EAIY,OAAQZ,EACR,WAAYC,EACZ,MAAO,IAAI,YAAY,MAAM,CACzB,QAAS,UACT,QAASO,EACT,QAASC,CACzB,CAAa,EACD,UAAW,CACd,EACD,OAAQ,CAAE,aAAU,OAAK,CACjC,EACI,OAAO,YAAY,YAAY3F,EAAkB6F,CAAI,EAAE,KAAMxK,IAEzDuK,EAAmBvK,EAAO,SAAS,QAAQ,kBACpCmH,GAAkBnH,EAAO,SAAUqH,EAAQC,CAAO,EAC5D,CACL,EAEasD,GAA6B,IAAMxL,GAAY8H,EAAoB,EAAE,OAMrE2D,GAA2B,SAAYjB,GAA8BgB,IAA4B,EC5LjGE,GAAkB,m8xBCAlBC,GAAoB,mjxBCApBC,GAAoB,muvBCEpBC,GAA4B,MAAOtG,GAAqB,CACjE,MAAMM,EAAO,MAAMP,GAAoBC,EAAkB,cAAe,YAAa,iBAAkB,mBAAoB,iBAAiB,EAC5I,MAAO,CACH,MAAOM,EAAK,MACZ,KAAMA,EAAK,KACX,KAAMA,EAAK,KACX,OAAQA,EAAK,MACrB,CACA,EACaiG,GAA6B,IAAM9L,GAAYiH,EAAoB,EAAE,OAMrE8E,GAAuB,SAAYF,GAA0BC,IAA4B,ECpB/F,IAAIE,GACV,SAAUA,EAAgB,CACvBA,EAAe,oBAAyB,6BACxCA,EAAe,oBAAyB,8BACxCA,EAAe,qCAA0C,qDACzDA,EAAe,0BAA+B,6DAC9CA,EAAe,wCAA6C,2DAC5DA,EAAe,gCAAqC,6FACpDA,EAAe,mBAAwB,2CACvCA,EAAe,mBAAwB,gDACvCA,EAAe,kBAAuB,4CACtCA,EAAe,kBAAuB,iDAC1C,GAAGA,IAAmBA,EAAiB,CAAE,EAAC,EAM1C,MAAMjE,GAAoB,CAACkE,EAAeC,IAAe,CAMrD,MAAM9D,EAAa6D,EAAc,cAAcrE,GAAY,IAAI,EAYzDuE,EAAaF,EAAc,OAAO,EAAE,EACpCG,EAAmBH,EAAc,OAAO,EAAE,EAC1CI,EAAqBJ,EAAc,OAAO,EAAE,EAC5CK,EAAuBL,EAAc,OAAO,EAAE,EAC9CM,EAAiBN,EAAc,OAAO,EAAE,EACxCO,EAAgBP,EAAc,OAAO,EAAE,EACvCQ,EAAgBR,EAAc,OAAO,EAAE,EACvCS,EAAkBT,EAAc,OAAO,EAAE,EAEzCU,EAAiBV,EAAc,OAAO,CAAC,EAEvCW,EAAuBD,GAAkB,EACzCE,EAAoB,IAAMZ,EAAc,QAAQW,CAAoB,EAEpEE,EAAYb,EAAc,OAAO,CAAC,EAElCc,EAAkBD,GAAa,EAC/BE,EAAc,CAACvK,EAAOwK,IAAmB,CAC3C,MAAMC,EAAkB,IAAI,WAAWD,CAAc,EACrD,OAAAC,EAAgB,IAAIzK,CAAK,EAClByK,CACf,EACUC,EAAkBC,GAAc,CAClC,MAAMC,EAAkBL,EAAYI,EAAW,EAAE,EACjD,OAAAnB,EAAc,OAAO,IAAIoB,EAAiBjB,CAAgB,EAClDH,EAAc,YAAY7D,EAAYkE,EAAsBF,EAEpEgB,EAAU,MAAM,IAAM,CAC9B,EACUE,EAAgB7K,GAAU,CAC5BwJ,EAAc,QAAQ,IAAI,CAACxJ,CAAK,EAAGsK,CAAe,CAC1D,EAEUQ,EAAe,IAAMtB,EAAc,QAAQc,CAAe,EAC1DS,EAAqB,CAAC1M,EAAQ2M,KAChCH,EAAaxM,CAAM,EACnBmL,EAAc,gBAAgB7D,EAAYgE,EAAkBU,EAAWR,EAAsBmB,CAAI,EAC1FxB,EAAc,WAAWG,EAAkBmB,EAAc,CAAA,EAAE,SAEhEG,EAA0BC,GAAeA,EACzCH,EAAmB,GAAyC3F,GAAgB,UAAU,EACtF2F,EAAmB,GAA2C3F,GAAgB,YAAY,EAC1F+F,EAAoBD,GAAgBP,GACjCD,EAAeC,CAAS,EAGtBM,EAAuBC,CAAU,EAF7B3B,EAAe,oBAIxB6B,EAAiB,CAACC,EAAWC,IAAU,CACzC,MAAMC,EAAkBhB,EAAYc,EAAW,EAAE,EACjD,OAAA7B,EAAc,OAAO,IAAI+B,EAAiB7B,CAAU,EAC7C4B,EACD9B,EAAc,kBAAkB7D,EAAYmE,EAAgBJ,EAAY2B,EAAU,MAAM,IAAM,EAC9F7B,EAAc,sBAAsB7D,EAAYmE,EAAgBJ,CAAU,IAAM,CAC9F,EACU8B,EAAgB,KAClBhC,EAAc,0BAA0B7D,EAAY+D,EAAYI,CAAc,EACvEN,EAAc,WAAWE,EAAY,EAA+B,EAAC,MAAK,GAE/E+B,EAAY,KACdZ,EAAa,EAAE,EACfrB,EAAc,sBAAsB7D,EAAY+D,EAAYW,EAAWP,CAAc,EAC9EN,EAAc,WAAWE,EAAYoB,EAAc,CAAA,EAAE,SAE1DY,EAAoBC,GAAYN,GAC7BD,EAAeC,EAAWM,CAAM,EAG9BA,EAASH,IAAkBC,IAFvBlC,EAAe,oBAIxBqC,GAAqBC,GAAe,CACtC,MAAMC,EAAmBvB,EAAYsB,EAAY,EAAE,EACnDrC,EAAc,OAAO,IAAIsC,EAAkB9B,CAAa,CAChE,EACU+B,GAAa,CAAClG,EAAShI,IAAU,CACnC2L,EAAc,OAAO,KAAK,EAAG3D,EAASA,EAAUhI,CAAK,CAC7D,EACUmO,GAAuB,IAAM,CAC/BD,GAAW/B,EAAe,GAClC,EACUiC,EAAiB,CAACJ,EAAYK,IAAiB,CACjDN,GAAkBC,CAAU,EAC5B,MAAMM,EAAMD,IACZ,OAAAF,KACOG,CACf,EACUC,GAAmBlB,GAAgBW,GACrBI,EAAeJ,EAAY,IAAMrC,EAAc,aAAa7D,EAAYkE,EAAsBG,CAAa,IAAM,CAAC,EAEvHT,EAAe,qCAEnB0B,EAAuBC,CAAU,EAEtCmB,EAA0BC,GAAgB,CAC5C,MAAMC,EAAoBhC,EAAY+B,EAAa,EAAE,EACrD9C,EAAc,OAAO,IAAI+C,EAAmB3C,CAAkB,CACtE,EACU4C,GAAqB,IAAM,CAC7BhD,EAAc,mBAAmB7D,EAAYmE,EAAgBA,CAAc,CACnF,EACU2C,GAAkB,CAACnB,EAAOoB,IAAerB,GACtCD,EAAeC,EAAWC,CAAK,GAGhCoB,EACAF,KAGAhD,EAAc,kBAAkB7D,EAAYmE,EAAgBA,CAAc,EAEvEwB,EAAQG,IAAcD,KARlBjC,EAAe,oBAUxBoD,GAA6B,CAACtB,EAAWC,EAAOoB,IAAc,CAChE,MAAMP,EAAMf,EAAeC,EAAWC,CAAK,EAC3C,OAAIoB,GACAF,KAEGL,CACf,EACUS,GAAmBtB,GAAU,CAACO,EAAYS,KAC5CD,EAAuBC,CAAW,EAC3BL,EAAeJ,EAAY,IACfrC,EAAc,KAAK7D,EAAYmE,EAAgBF,EAAoBI,CAAa,IAAM,EAE1FT,EAAe,0BAEtB+B,GACAT,EAAa,EAAE,EACfrB,EAAc,sBAAsB7D,EAAY+D,EAAYW,EAAWP,CAAc,EAC9EN,EAAc,WAAWE,EAAYoB,EAAc,CAAA,EAAE,UAEhEtB,EAAc,0BAA0B7D,EAAY+D,EAAYI,CAAc,EACvEN,EACF,WAAWE,EAAY,EAA+B,EACtD,QACR,GAECmD,GAAyB,IAAM,CAAChB,EAAYS,KAC9CD,EAAuBC,CAAW,EAC3BL,EAAeJ,EAAY,IACfrC,EAAc,YAAY7D,EAAYoE,EAAeH,EAAoBI,CAAa,IAAM,EAEhGT,EAAe,0BAEnBC,EACF,WAAWO,EAAe,EAA+B,EACzD,OACR,GAEC+C,GAAiBR,IACnBD,EAAuBC,CAAW,EAC1B9C,EAAc,OAAO7D,EAAYmE,EAAgBF,EAAoBC,CAAoB,IAAM,GAErGkD,GAAkB,CAACzB,EAAOoB,IAAc,CAACrB,EAAWV,EAAW2B,KAAgB5B,EAAeC,CAAS,GACzGgC,GAA2BtB,EAAWC,EAAOoB,CAAS,GACtDI,GAAcR,EAAW,EACvBU,GAAuB,CAACV,EAAajB,IAAc,CACrDgB,EAAuBC,CAAW,EAClC,MAAMf,EAAkBhB,EAAYc,EAAW,EAAE,EACjD,OAAA7B,EAAc,OAAO,IAAI+B,EAAiBxB,CAAa,EAC/CP,EAAc,cAAc7D,EAAYoE,EAAeH,EAAoBC,CAAoB,IAAM,CACrH,EACUoD,GAAyB,IAAM,CAAC5B,EAAWV,EAAW2B,IAAgB5B,EAAeC,CAAS,EAC9FqC,GAAqBV,EAAajB,CAAS,EAC3C,GACA6B,GAA6B,CAACrB,EAAYS,KAC5CD,EAAuBC,CAAW,EAC3BL,EAAeJ,EAAY,IAC1BrC,EAAc,gBAAgB7D,EAAYsE,EAAiBL,EAAoBI,CAAa,IAAM,EAC3FT,EAAe,2BAE1BC,EAAc,8BAA8B7D,EAAY+D,EAAYQ,EAAgBD,CAAe,EAC5F,CACH,WAAYG,EAAmB,EAC/B,UAAWZ,EACN,WAAWE,EAAY,EAA+B,EACtD,MAAO,CAC5B,EACS,GAECyD,GAAoBjC,GAAe,CAACG,EAAW+B,EAAYd,IAAgB,CAC7ED,EAAuBC,CAAW,EAClC,MAAMf,GAAkBhB,EAAYc,EAAW,EAAE,EAEjD,OADA7B,EAAc,OAAO,IAAI+B,GAAiB7B,CAAU,EAChDF,EAAc,0BAA0B7D,EAAYsE,EAAiBP,EAAY0D,CAAU,IAAM,EAC1F7D,EAAe,wCAEtBC,EAAc,QAAQ7D,EAAYkE,EAAsBI,EAAiBL,CAAkB,IAAM,EAC1FL,EAAe,gCAEnB0B,EAAuBC,CAAU,CAChD,EACUmC,GAAqB,CAACxB,EAAYyB,KACpCjB,EAAuBiB,CAAU,EAC1BrB,EAAeJ,EAAY,IAC1BrC,EAAc,gBAAgB7D,EAAYqE,EAAeJ,CAAkB,IAAM,EAC1EL,EAAe,mBAEnBC,EACF,WAAWQ,EAAe,EAA+B,EACzD,OACR,GAECuD,GAAqB,CAAC1B,EAAYyB,KACpCjB,EAAuBiB,CAAU,EAC1BrB,EAAeJ,EAAY,IAC1BrC,EAAc,gBAAgB7D,EAAYqE,EAAeJ,CAAkB,IAAM,EAC1EL,EAAe,mBAEnBC,EACF,WAAWQ,EAAe,EAA+B,EACzD,OACR,GAECwD,GAAqBtC,GAAe,CAACP,EAAW2C,IAC7C5C,EAAeC,CAAS,GAG7B0B,EAAuBiB,CAAU,EAC7B9D,EAAc,eAAe7D,EAAYkE,EAAsBD,CAAkB,IAAM,EAChFL,EAAe,kBAEnB0B,EAAuBC,CAAU,GAN7B3B,EAAe,oBAQxBkE,GAAqBvC,GAAe,CAACP,EAAW2C,IAC7C5C,EAAeC,CAAS,GAG7B0B,EAAuBiB,CAAU,EAC7B9D,EAAc,eAAe7D,EAAYkE,EAAsBD,CAAkB,IAAM,EAChFL,EAAe,kBAEnB0B,EAAuBC,CAAU,GAN7B3B,EAAe,oBAe9B,MAAO,CACH,mBAAA8D,GACA,4BAA6BG,GAAkB,EAAI,EACnD,8BAA+BA,GAAkB,EAAK,EACtD,kBAAmBrC,EAAiB,EAAI,EACxC,0BAA2BiB,GAAgB,EAAI,EAC/C,4BAA6BA,GAAgB,EAAK,EAClD,yBAA0BK,GAAgB,GAAO,EAAK,EACtD,qBAAsBA,GAAgB,GAAM,EAAK,EACjD,mBAAAc,GACA,4BAA6BE,GAAkB,EAAI,EACnD,8BAA+BA,GAAkB,EAAK,EACtD,0BAA2BhB,GAAgB,GAAO,EAAI,EACtD,sBAAuBA,GAAgB,GAAM,EAAI,EACjD,2BAA4BU,GAAiB,EAAI,EACjD,6BAA8BA,GAAiB,EAAK,EACpD,uBAAwBP,GAAgB,EAAK,EAC7C,mBAAoBA,GAAgB,EAAI,EACxC,kCAAmCM,GACnC,uBAAwBL,GAAwB,EAChD,sBAAuBnB,EAAiB,EAAK,EAC7C,sBAAuBA,EAAiB,EAAI,EAC5C,oBAAqBP,EAAiB,EAAK,EAC3C,mBAAqBU,GAAeI,EAAeJ,EAAY,IAAMrC,EAAc,aAAa7D,EAAYqE,CAAa,IAAM,CAAC,EAChI,kBAAmBU,EACnB,uBAAwBqC,GAAgB,GAAO,EAAI,EACnD,2BAA4BA,GAAgB,GAAO,EAAK,EACxD,mBAAoBA,GAAgB,GAAM,EAAI,EAC9C,uBAAwBA,GAAgB,GAAM,EAAK,EACnD,uBAAwBE,GAAwB,CACxD,CACA,EAqCaS,GAAuB,MAAOjE,GAAenE,GAAkB,MAAM0D,GAAsC,CAAA,ECpV3G2E,GAAuB,MAAO7K,GAAqB,CAC5D,MAAMM,EAAO,MAAMP,GAAoBC,EAAkB,SAAU,OAAQ,YAAa,cAAe,YAAY,EACnH,MAAO,CACH,MAAOM,EAAK,MACZ,KAAMA,EAAK,KACX,KAAMA,EAAK,KACX,OAAQA,EAAK,MACrB,CACA,EACawK,GAAwB,IAAMrQ,GAAY0L,EAAe,EAAE,OAK3D4E,GAAkB,SAAYF,GAAqBC,IAAuB,ECd1EE,GAAyB,MAAOhL,GAAqB,CAC9D,MAAMM,EAAO,MAAMP,GAAoBC,EAAkB,WAAY,SAAU,cAAe,gBAAiB,cAAc,EAC7H,MAAO,CACH,MAAOM,EAAK,MACZ,KAAMA,EAAK,KACX,KAAMA,EAAK,KACX,OAAQA,EAAK,MACrB,CACA,EACa2K,GAA0B,IAAMxQ,GAAY2L,EAAiB,EAAE,OAM/D8E,GAAoB,SAAYF,GAAuBC,GAAyB,CAAA,ECfhFE,GAAyB,MAAOnL,GAAqB,CAC9D,MAAMM,EAAO,MAAMP,GAAoBC,EAAkB,WAAY,SAAU,cAAe,gBAAiB,cAAc,EAC7H,MAAO,CACH,MAAOM,EAAK,MACZ,KAAMA,EAAK,KACX,KAAMA,EAAK,KACX,OAAQA,EAAK,MACrB,CACA,EACa8K,GAA0B,IAAM3Q,GAAY4L,EAAiB,EAAE,OAK/DgF,GAAoB,SAAYF,GAAuBC,IAAyB,EChBvF,CAACE,GAAMC,EAAQC,GAAQC,GAAWC,EAAS,EAAI,MAAM,QAAQ,IAAI,CACnEX,GAAiB,EACjBG,GAAmB,EACnBG,GAAmB,EACnB7E,GAAsB,EACtBoE,GAAsB,CAC1B,CAAC,ECSYe,EAAU,CAACC,EAASL,EAASM,IAAmBN,EAAO,KAAKA,EAAO,KAAKK,CAAO,CAAC,EChBhFE,GAAqB,mCAKrBC,GAA0B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAK,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAK,GAAI,EAAG,GAAI,EAAK,GAAI,EAAG,GAAI,EAAG,GAAI,EAAK,GAAI,EAAK,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAK,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAK,GAAI,EAAG,IACtQ,IAAIC,IACV,SAAUA,EAAoB,CAC3BA,EAAmB,kBAAuB,mGAC1CA,EAAmB,qBAA0B,mDAC7CA,EAAmB,0BAA+B,wDACtD,GAAGA,KAAuBA,GAAqB,CAAE,EAAC,EAa3C,MAAMC,GAAc,CAAC,CAAE,IAAAtP,EAAK,iBAAAuP,EAAkB,iBAAAC,EAAkB,aAAAC,EAAe,MAAY,CAC9F,IAAIC,EAAc,EACdC,EAAO,EACX,MAAMjR,EAAS,CAAA,EACTkR,GAAgB,GAAKJ,GAAoB,EAE/C,QAAS3T,EAAI,EAAGA,EAAImE,EAAI,OAAQ,EAAEnE,EAAG,CAEjC,MAAM0E,EAAQP,EAAInE,CAAC,EACnB,GAAI0E,EAAQ,GAAKA,GAASgP,EACtB,OAAOF,GAAmB,kBAK9B,IAHAK,EAAeA,GAAeH,EAAoBhP,EAClDoP,GAAQJ,EAEDI,GAAQH,GACXG,GAAQH,EAER9Q,EAAO,KAAMgR,GAAeC,EAAQC,CAAY,CAEvD,CACD,GAAIH,EACIE,EAAO,GAEPjR,EAAO,KAAMgR,GAAgBF,EAAmBG,EAASC,CAAY,MAGxE,IAAID,GAAQJ,EACb,OAAOF,GAAmB,qBAEzB,IAAMK,GAAgBF,EAAmBG,EAASC,GAAgB,EACnE,OAAOP,GAAmB,0BAE9B,OAAO3Q,CACX,EAWamR,GAAgBC,GAAuB,CAEhD,IAAIpR,EAAS,GAEb,QAASzE,EAAI,EAAGA,EAAI6V,EAAmB,OAAQ7V,IAE3CyE,GAAUyQ,GAAmBW,EAAmB7V,CAAC,CAAC,EAEtD,OAAOyE,CACX,EAWaqR,GAAgBC,GAAgB,CACzC,MAAMtR,EAAS,CAAA,EAEf,QAASzE,EAAI,EAAGA,EAAI+V,EAAY,OAAQ/V,IAEpCyE,EAAO,KAAK0Q,GAAwBY,EAAY/V,CAAC,CAAC,CAAC,EAEvD,OAAOyE,CACX,EACMuR,GAAsB,IAAI,OAAO,KAAKd,EAAkB,IAAK,GAAG,EAQzDe,GAAwBC,GAAgB,CAACF,GAAoB,KAAKE,CAAW,EACnF,IAAIC,IACV,SAAUA,EAAqB,CAC5BA,EAAoB,sBAA2B,uFACnD,GAAGA,KAAwBA,GAAsB,CAAA,EAAG,EChHzC,IAAAC,GACV,SAAUA,EAA0B,CACjCA,EAAyB,QAAa,cACtCA,EAAyB,QAAa,UACtCA,EAAyB,QAAa,QAC1C,GAAGA,IAA6BA,EAA2B,CAAG,EAAA,EAqBnD,IAAAC,IACV,SAAUA,EAAwB,CAQ/BA,EAAuBA,EAAuB,MAAW,CAAC,EAAI,QAQ9DA,EAAuBA,EAAuB,OAAY,CAAC,EAAI,SAQ/DA,EAAuBA,EAAuB,OAAY,EAAE,EAAI,SAQhEA,EAAuBA,EAAuB,gBAAqB,EAAE,EAAI,kBAOzEA,EAAuBA,EAAuB,iBAAsB,EAAE,EAAI,mBAO1EA,EAAuBA,EAAuB,iBAAsB,EAAE,EAAI,kBAC9E,GAAGA,KAA2BA,GAAyB,CAAG,EAAA,EAK/C,IAAAC,GACV,SAAUA,EAAiB,CAIxBA,EAAgB,MAAW,QAI3BA,EAAgB,KAAU,OAI1BA,EAAgB,gBAAqB,kBAIrCA,EAAgB,eAAoB,gBACxC,GAAGA,IAAoBA,EAAkB,CAAG,EAAA,EAKjC,IAAAC,GACV,SAAUA,EAAqB,CAI5BA,EAAoBA,EAAoB,MAAW,CAAC,EAAI,QAIxDA,EAAoBA,EAAoB,KAAU,CAAC,EAAI,OAIvDA,EAAoBA,EAAoB,gBAAqB,CAAC,EAAI,kBAIlEA,EAAoBA,EAAoB,eAAoB,CAAC,EAAI,gBACrE,GAAGA,IAAwBA,EAAsB,CAAG,EAAA,EAC7C,MAAMC,GAA4B,CACrC,CAACF,EAAgB,KAAK,EAAGC,EAAoB,MAC7C,CAACD,EAAgB,IAAI,EAAGC,EAAoB,KAC5C,CAACD,EAAgB,eAAe,EAAGC,EAAoB,gBACvD,CAACD,EAAgB,cAAc,EAAGC,EAAoB,cAC1D,EACaE,GAA4B,CACrC,CAACF,EAAoB,KAAK,EAAGD,EAAgB,MAC7C,CAACC,EAAoB,IAAI,EAAGD,EAAgB,KAC5C,CAACC,EAAoB,eAAe,EAAGD,EAAgB,gBACvD,CAACC,EAAoB,cAAc,EAAGD,EAAgB,cAC1D,EAEaI,GAA8B,CACvC,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,EACP,EACaC,GAA8B,CACvC,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,CACR,EAiBaC,GAA+B,CAACC,EAAUlS,IAEtDkS,GAAY,EACTF,GAA4BhS,CAAM,EAC3B,IAAAmS,IACV,SAAUA,EAAqC,CAC5CA,EAAoC,eAAoB,sBAC5D,GAAGA,KAAwCA,GAAsC,CAAG,EAAA,EAO7E,MAAMC,GAAgCC,GAE5CA,EAAU,IACLF,GAAoC,eACpC,CACE,OAAQJ,GAEPM,EACG,CAAsC,EAC1C,SAECA,IAAY,EACT,EACR,EAMSC,GAAyBhP,GAAW,CAC7C,MAAMxD,EAAS,CAAA,EAEf,QAASzE,EAAI,EAAGA,EAAIiI,EAAO,OAAQjI,IAExByE,EAAA,KAAKwD,EAAO,WAAWjI,CAAC,EAAI,EAAA,EAEhC,OAAAyE,CACX,EAEMyS,GAAqC,CAAC,IAAM,IAAM,IAAM,IAAM,EAAI,EAElEC,GAAgC,CAAC,WAAY,WAAY,WAAY,UAAY,UAAU,EAiDpFC,GAA+B9T,GAAM,CAE9C,IAAI+T,EAAsB,EACtBC,EAAa,EACblW,EAAI,EAER,QAASe,EAAI,EAAGA,EAAImB,EAAE,OAAQnB,IAAK,CAC/Bf,EAAIiW,IAAwB,EACLA,GAAA,EACCA,IAAA,EACxBA,GAAuBC,IAAe,GACxBA,GAAA,UACCA,IAAA,EAEfA,GAAchU,EAAEnB,CAAC,EAEjB,QAASnC,EAAI,EAAGA,EAAIkX,GAAmC,OAAQ,EAAElX,EAEzDoB,EAAK,GAAKpB,IAEVqX,GAAuBH,GAAmClX,CAAC,EAE3DsX,GAAcH,GAA8BnX,CAAC,EAGzD,CACc,OAAAsX,GAAA,EAEVA,EAAa,IACbA,GAAc,GAAK,GACnBA,IAAe,GAAK,IAAM,GAEvBD,GAAuB,GAAK,IAAM,EAAIC,CAEjD,EAOaC,GAAmCC,GAAa,CACzD,MAAM/S,EAAS,CAAA,EAEf,QAASzE,EAAI,EAAGA,EAAI,EAAqC,EAAEA,EAEhDyE,EAAA,KAAK+S,EAAW,EAAE,EAEbA,GAAA,GAGhB,OAAO/S,EAAO,SAClB,EAaagT,GAA0B,CAACxP,EAAQ+O,EAAShC,IAAY,CAC3D,MAAA0C,EAA2B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAClDC,EAAkBtC,GAAY,CAChC,IAAK,WAAW,KAAK,CAAC2B,EAAS,GAAGhC,CAAO,CAAC,EAC1C,iBAAkB,EAClB,iBAAkB,CAAA,CACrB,EACK4C,EAAmB,CACrB,GAAGX,GAAsBhP,CAAM,EAC/B,EACA,GAAG0P,EACH,GAAGD,CAAA,EAEDF,EAAWJ,GAA4BQ,CAAgB,EACvDC,EAAU,CACZ,GAAGF,EACH,GAAGJ,GAAgCC,CAAQ,CAAA,EAE/C,MAAO,GAAGvP,CAAM,IAAI2N,GAAaiC,CAAO,CAAC,EAC7C,EACW,IAAAC,IACV,SAAUA,EAA0B,CACjCA,EAAyB,yBAA8B,kGACvDA,EAAyB,mCAAwC,uGACjEA,EAAyB,2BAAgC,4DAC7D,GAAGA,KAA6BA,GAA2B,CAAG,EAAA,EACvD,MAAMC,GAAmCpT,GAAWgS,GAA4BhS,CAAM,IAAM,OAsBtFqT,GAA+B,CAAC/P,EAAQ4O,EAAU7B,IAAY,CACjE,KAAA,CAAE,OAAArQ,CAAW,EAAAqQ,EACf,GAAA,CAAC+C,GAAgCpT,CAAM,EAEjC,MAAA,IAAI,MAAMuB,EAAY4R,GAAyB,yBAA0B,mBAAmBnT,CAAM,GAAG,CAAC,EAEhH,OAAO8S,GAAwBxP,EAAQ2O,GAA6BC,EAAUlS,CAAM,EAAGqQ,CAAO,CAClG,EAoBaiD,GAAoB,CAAChQ,EAAQiQ,EAAMlD,IAAYgD,GAA6B/P,EAAQuO,GAA0B0B,CAAI,EAAGlD,CAAO,EAC9H,IAAAmD,GACV,SAAUA,EAA0B,CACjCA,EAAyB,gBAAqB,gEAC9CA,EAAyB,kBAAuB,0EAChDA,EAAyB,gBAAqB,uFAC9CA,EAAyB,cAAmB,oFAC5CA,EAAyB,wBAA6B,uFACtDA,EAAyB,aAAkB,8EAC3CA,EAAyB,mBAAwB,uDACrD,GAAGA,IAA6BA,EAA2B,CAAG,EAAA,EAajD,MAAAC,GAA2BC,GAAY,CAChD,MAAMC,EAAQD,EAAQ,YAAY,EAAE,MAAM,GAAG,EAEzC,GAAAC,EAAM,SAAW,GAAKA,EAAM,CAAC,IAAM,IAAMA,EAAM,CAAC,IAAM,GACtD,OAAOH,EAAyB,cAE9B,KAAA,CAAClQ,EAAQ+M,CAAO,EAAIsD,EACtB,GAAA,CAACrC,GAAqBjB,CAAO,EAC7B,OAAOmD,EAAyB,kBAE9B,MAAAI,EAAiBzC,GAAad,CAAO,EACrCwD,EAAa,CACf,GAAGvB,GAAsBhP,CAAM,EAC/B,EACA,GAAGsQ,CAAA,EAEH,GAAAnB,GAA4BoB,CAAU,IAAM,EAC5C,OAAOL,EAAyB,gBAGpC,MAAMR,EAAkBtC,GAAY,CAChC,aAAc,GACd,IAAKkD,EAAe,MAAM,EAAG,CAHM,CAGyB,EAC5D,iBAAkB,EAClB,iBAAkB,CAAA,CACrB,EACG,GAAA,OAAOZ,GAAoB,SAC3B,OAAOQ,EAAyB,gBAEpC,KAAM,CAACnB,EAAS,GAAG9O,CAAQ,EAAIyP,EAE/B,MAAO,CAAE,QADM,WAAW,KAAKzP,CAAQ,EACb,OAAAD,EAAQ,QAAA+O,CAAQ,CAC9C,EAmBayB,GAAgCJ,GAAY,CAC/C,MAAAK,EAAUN,GAAwBC,CAAO,EAC3C,GAAA,OAAOK,GAAY,SACZ,OAAAA,EAEL,MAAAzJ,EAAO8H,GAA6B2B,EAAQ,OAAO,EACrD,OAAAzJ,IAAS6H,GAAoC,eACtCqB,EAAyB,aAEhCO,EAAQ,QAAQ,SAAWzJ,EAAK,OACzBkJ,EAAyB,wBAE7B,CACH,QAASO,EAAQ,QACjB,OAAQA,EAAQ,OAChB,SAAUzJ,EAAK,QAAA,CAEvB,EAmBa0J,GAAqBN,GAAY,CACpC,MAAAK,EAAUD,GAA6BJ,CAAO,EAChD,GAAA,OAAOK,GAAY,SACZ,OAAAA,EAEL,MAAAR,EAAOzB,GAA0BiC,EAAQ,QAAQ,EACvD,OAAIR,IAAS,OACF,GAAGC,EAAyB,kBAAkB,oBAAoBO,EAAQ,QAAQ,IAEtF,CACH,QAASA,EAAQ,QACjB,OAAQA,EAAQ,OAChB,KAAAR,CAAA,CAER,EASaU,GAAuC,CAACP,EAASQ,EAAmB,CAC7EzC,EAAyB,QACzBA,EAAyB,QACzBA,EAAyB,OAC7B,IAAM,CAEF,UAAWnO,KAAU4Q,EAAkB,CACnC,MAAMC,EAAUV,GAAwB,GAAGnQ,CAAM,IAAIoQ,CAAO,EAAE,EAC1D,GAAAS,IAAYX,EAAyB,gBAC9B,OAAAW,CAEf,CACA,OAAOX,EAAyB,eACpC,EAyBW,IAAAY,IACV,SAAUA,EAA4B,CACnCA,EAA2B,cAAmB,8DAClD,GAAGA,KAA+BA,GAA6B,CAAA,EAAG,ECnjBxD,IAACC,GACV,SAAUA,EAAqB,CAS5BA,EAAoB,KAAU,OAK9BA,EAAoB,MAAW,QAM/BA,EAAoB,OAAY,SAKhCA,EAAoB,OAAY,QACpC,GAAGA,IAAwBA,EAAsB,CAAE,EAAC,EAC7C,MAAMC,GAAgCC,GAAoBA,EAAgB,SAAW,IACxFA,EAAgB,CAAC,IAAM,IACvBA,EAAgB,EAAgD,IAC5D,IACKC,GAA8BD,GAAoBA,EAAgB,SAAW,IACtFA,EAAgB,CAAC,IAAM,IACvBA,EAAgB,EAA8C,IAAK,IAC1DE,GAAoBF,GAAoBC,GAA2BD,CAAe,GAC3FD,GAA6BC,CAAe,EAEnCG,GAAwBH,GAAoBA,EAAgB,SAAW,IAChFA,EAAgB,CAAC,IAAM,KACvBA,EAAgB,CAAC,IAAM,KACvBA,EAAgB,CAAC,IAAM,IACvBA,EAAgB,EAAE,IAAM,KACxBA,EAAgB,EAAE,IAAM,IACfI,GAAuBJ,GAAoBA,EAAgB,SAAW,IAC/EA,EAAgB,CAAC,IAAM,KACvBA,EAAgB,CAAC,IAAM,IACvBA,EAAgB,EAAuC,IAAK,IACnDK,GAAuBL,GAAoBA,EAAgB,SAAW,IAC/EA,EAAgB,CAAC,IAAM,KACvBA,EAAgB,CAAC,IAAM,IACvBA,EAAgB,EAAuC,IAAK,IAyBnDM,GAAoCC,GACzCJ,GAAqBI,CAAQ,EACtB,CACH,QAASA,EAAS,MAAM,EAAmC,EAAiC,EAC5F,KAAMT,EAAoB,KACtC,EAEQM,GAAoBG,CAAQ,EACrB,CACH,QAASA,EAAS,MAAM,EAAoC,EAAkC,EAC9F,KAAMT,EAAoB,MACtC,EAEQO,GAAoBE,CAAQ,EACrB,CACH,QAASA,EAAS,MAAM,EAAoC,EAAkC,EAC9F,KAAMT,EAAoB,MACtC,EAEQC,GAA6BQ,CAAQ,EAC9B,CACH,QAASA,EAAS,MAAM,EAA8C,EAA4C,EAClH,KAAMT,EAAoB,IACtC,EAEQG,GAA2BM,CAAQ,EAC5B,CACH,QAASA,EAAS,MAAM,EAA4C,EAA0C,EAC9G,KAAMT,EAAoB,IACtC,EAEW,CAAE,QAASS,EAAS,MAAK,EAAI,KAAM,WAajCC,GAA8BC,GAAkB,WAAW,KAAK,CACzE,IACA,IACA,GACA,GAAGA,EACH,IACA,GACJ,CAAC,EAWYC,GAA+BC,GAAe,WAAW,KAAK,CACvE,IACA,GACA,GAAGA,EACH,GACJ,CAAC,EAWYC,GAA+BC,GAAe,WAAW,KAAK,CACvE,IACA,GACA,GAAGA,EACH,GACJ,CAAC,EAWYC,GAA6B/I,GAAcA,EAAU,SAAW,GACvE,WAAW,KAAK,CACd,GACA,GAAGA,EACH,GACR,CAAK,EACC,WAAW,KAAK,CACd,GACA,GAAGA,EACH,GACR,CAAK,EAOQgJ,GAAmC,CAAC,CAAE,QAAAjF,EAAS,KAAAkD,KACpDA,IAASc,EAAoB,MACtBU,GAA2B1E,CAAO,EAEzCkD,IAASc,EAAoB,OACtBY,GAA4B5E,CAAO,EAE1CkD,IAASc,EAAoB,OACtBc,GAA4B9E,CAAO,EAG1CkD,IAASc,EAAoB,KACtBgB,GAA0BhF,CAAO,EAErC3O,GAAa6R,EAAM,sCAAsCA,CAAI,EAAE,EAkB7DgC,GAA+B,CAACT,EAAUxR,EAAS,cAAekS,EAAU,CAAE,aAAc,MAAY,CACjH,MAAMjS,EAAWsR,GAAiCC,CAAQ,EAC1D,OAAIvR,EAAS,OAAS8Q,EAAoB,MAC/BmB,EAAQ,aACTlC,GAAkBhQ,EAAQqO,EAAgB,gBAAiBpO,EAAS,OAAO,EAC3E+P,GAAkBhQ,EAAQqO,EAAgB,MAAOpO,EAAS,OAAO,EAEvEA,EAAS,OAAS8Q,EAAoB,QACtC9Q,EAAS,OAAS8Q,EAAoB,OAC/BmB,EAAQ,aACTlC,GAAkBhQ,EAAQqO,EAAgB,eAAgBpO,EAAS,OAAO,EAC1E+P,GAAkBhQ,EAAQqO,EAAgB,KAAMpO,EAAS,OAAO,EAEtEA,EAAS,OAAS,OACX,CACH,MAAO4P,GAAyB,kCAC5C,EAGQ5P,EAAS,OAAS,UACX,CAAE,MAAO4P,GAAyB,4BAEtCzR,GAAa6B,EAAS,KAAM,uCAAuCA,EAAS,IAAI,EAAE,CAC7F,EACO,IAAIkS,IACV,SAAUA,EAAgC,CACvCA,EAA+B,yBAA8B,4GACjE,GAAGA,KAAmCA,GAAiC,CAAE,EAAC,EAU9D,MAACC,GAAgChC,GAAY,CACrD,MAAMK,EAAUC,GAAkBN,CAAO,EACzC,OAAI,OAAOK,GAAY,SACZA,EACPA,EAAQ,QAAQ,SAAW,IAC3BA,EAAQ,QAAQ,SAAW,GACpBxS,EAAYkU,GAA+B,yBAA0B,mBAAmB1B,EAAQ,QAAQ,MAAM,EAAE,EAEvHA,EAAQ,OAASpC,EAAgB,OACjCoC,EAAQ,OAASpC,EAAgB,gBAC1B,CACH,SAAU2D,GAAiC,CACvC,QAASvB,EAAQ,QACjB,KAAMM,EAAoB,KAC1C,CAAa,EACD,QAAS,CACL,aAAcN,EAAQ,OAASpC,EAAgB,eAClD,EACD,OAAQoC,EAAQ,MAC5B,EAEQA,EAAQ,OAASpC,EAAgB,MAEjCoC,EAAQ,OAASpC,EAAgB,eAC1B,CACH,SAAU2D,GAAiC,CACvC,QAASvB,EAAQ,QACjB,KAAMA,EAAQ,QAAQ,SAAW,GAC3BM,EAAoB,OACpBA,EAAoB,MAC1C,CAAa,EACD,QAAS,CACL,aAAcN,EAAQ,OAASpC,EAAgB,cAClD,EACD,OAAQoC,EAAQ,MAC5B,EAEWrS,GAAaqS,EAAQ,KAAM,8BAA8BA,EAAQ,IAAI,EAAE,CAClF,ECtTO,IAAI4B,IACV,SAAUA,EAAgB,CACvBA,EAAe,mBAAwB,2CAC3C,GAAGA,KAAmBA,GAAiB,CAAE,EAAC,EAQnC,MAAMC,GAAa5V,GAI1BqD,GAAa,CACT,MAAMY,EAAe,CACjB,IAAKZ,EAAS,IACd,MAAOA,EAAS,MAAQrD,CAChC,EACUF,EAASuD,EAAS,IAAI,MAAMA,EAAS,MAAOY,EAAa,KAAK,EACpE,OAAInE,EAAO,SAAWE,EACXuB,EAAYoU,GAAe,mBAAoB,oBAAoB3V,CAAM,sBAAsBF,EAAO,MAAM,EAAE,EAElH,CAAE,SAAUmE,EAAc,OAAAnE,EACrC,EACO,IAAI+V,IACV,SAAUA,EAAmB,CAC1BA,EAAkB,kBAAuB,2CAC7C,GAAGA,KAAsBA,GAAoB,CAAE,EAAC,EAQzC,MAAMC,GAAgBzS,GAAa,CACtC,MAAMY,EAAe,CACjB,IAAKZ,EAAS,IACd,MAAOA,EAAS,MAAQ,CAChC,EACU0S,EAAc1S,EAAS,IAAI,SAASA,EAAS,MAAOY,EAAa,KAAK,EAC5E,GAAI8R,EAAY,SAAW,EACvB,OAAOxU,EAAYsU,GAAkB,kBAAmB,oBAAoBE,EAAY,MAAM,EAAE,EAEpG,MAAMjW,EAAS2C,GAAoBsT,CAAW,EAC9C,MAAO,CAAE,SAAU9R,EAAc,OAAAnE,EACrC,EACO,IAAIkW,IACV,SAAUA,EAAmB,CAC1BA,EAAkB,kBAAuB,2CAC7C,GAAGA,KAAsBA,GAAoB,CAAE,EAAC,EAQzC,MAAMC,GAAgB5S,GAAa,CACtC,MAAMY,EAAe,CACjB,IAAKZ,EAAS,IACd,MAAOA,EAAS,MAAQ,CAChC,EACU6S,EAAc7S,EAAS,IAAI,SAASA,EAAS,MAAOY,EAAa,KAAK,EAC5E,GAAIiS,EAAY,SAAW,EACvB,OAAO3U,EAAYyU,GAAkB,kBAAmB,oBAAoBE,EAAY,MAAM,EAAE,EAEpG,MAAMpW,EAAS+C,GAAoBqT,CAAW,EAC9C,MAAO,CAAE,SAAUjS,EAAc,OAAAnE,EACrC,EACO,IAAIqW,IACV,SAAUA,EAA6B,CACpCA,EAA4B,mBAAwB,+DACpDA,EAA4B,kBAAuB,6DACvD,GAAGA,KAAgCA,GAA8B,CAAE,EAAC,EAY7D,MAAMC,GAA8B/S,GAAa,CACpD,MAAMK,EAAOD,GAAuBJ,CAAQ,EAC5C,GAAI,OAAOK,GAAS,SAChB,OAAOnC,EAAY4U,GAA4B,mBAAoBzS,CAAI,EAE3E,KAAM,CAAE,OAAA5D,EAAQ,SAAUuW,CAAE,EAAK3S,EAC3B1D,EAAS,OAAOF,CAAM,EACtBmE,EAAe,CAAE,IAAKZ,EAAS,IAAK,MAAOgT,EAAG,MAAQrW,GACtDuD,EAAWF,EAAS,IAAI,MAAMgT,EAAG,MAAOpS,EAAa,KAAK,EAChE,OAAIV,EAAS,SAAWvD,EACbuB,EAAY4U,GAA4B,kBAAmB,mBAAmBnW,CAAM,sBAAsBuD,EAAS,MAAM,EAAE,EAE/H,CAAE,SAAUU,EAAc,OAAQV,CAAQ,CACrD,EASa+S,GAAsBjT,GAAa,CAC5C,MAAMY,EAAe,CACjB,IAAKZ,EAAS,IACd,MAAOA,EAAS,IAAI,MAC5B,EACUvD,EAASuD,EAAS,IAAI,SAASA,EAAS,MAAOY,EAAa,KAAK,EACvE,MAAO,CAAE,SAAUA,EAAc,OAAAnE,EACrC,ECnHO,IAAIyW,GACV,SAAUA,EAA4B,CAInCA,EAA2B,KAAU,OAIrCA,EAA2B,QAAa,UAIxCA,EAA2B,QAAa,SAC5C,GAAGA,IAA+BA,EAA6B,CAAE,EAAC,EAOjC,WAAW,KAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,CAAC,ECflF,MAAMC,GAA0BpW,GAAUY,EAAgB,CAC7DZ,EAAM,wBAAwB,MAAO,EAAC,QAAS,EAC/C4B,EAAoB5B,EAAM,aAAa,EACvCoD,EAAoB,OAAOpD,EAAM,kBAAkB,MAAM,CAAC,EAC1DA,EAAM,kBACN4B,EAAoB5B,EAAM,cAAc,CAC5C,CAAC,EACM,IAAIqW,GACV,SAAUA,EAA0B,CACjCA,EAAyB,YAAiB,6BAC1CA,EAAyB,wBAA6B,0GACtDA,EAAyB,MAAW,mCACpCA,EAAyB,OAAY,oCACrCA,EAAyB,OAAY,oCACrCA,EAAyB,QAAa,qCACtCA,EAAyB,sBAA2B,wCACxD,GAAGA,IAA6BA,EAA2B,CAAE,EAAC,EAQvD,MAAMC,GAAwBrT,GAAa,CAC9C,MAAMsT,EAAY5S,GAAaV,EAAU,CACrCuS,GAAU,EAA4D,EACtEE,GACAM,GACAN,EACR,CAAK,EACD,GAAI,OAAOa,GAAc,SACrB,OAAOpV,EAAYkV,EAAyB,MAAOE,CAAS,EAEhE,KAAM,CAAE,SAAU1S,EAAc,OAAQ,CAAC2S,EAAyBC,EAAeC,EAAmBC,EAAmB,EAAGJ,EAC1H,MAAO,CACH,SAAU1S,EACV,OAAQ,CACJ,cAAA4S,EACA,wBAAyBD,EAAwB,QAAS,EAC1D,eAAAG,EACA,kBAAAD,CACH,CACT,CACA,EASaE,GAA2BC,GAAWjW,EAAgB,CAC/DwC,EAAoB,OAAOyT,EAAO,MAAM,CAAC,EACzC,GAAGA,EAAO,IAAIT,EAAsB,CACxC,CAAC,EAWYU,GAAyB7T,GAAa,CAC/C,MAAM8T,EAAa7S,GAAcjB,EAAUqT,EAAoB,EAC/D,OAAI,OAAOS,GAAe,SACf5V,EAAYkV,EAAyB,OAAQU,CAAU,EAE3DA,CACX,EACMC,GAAqB,qBACdC,GAA6B,CACtCd,EAA2B,KAC3BA,EAA2B,QAC3BA,EAA2B,OAC/B,EACae,GAA6B,CACtC,CAACf,EAA2B,IAAI,EAAG,EACnC,CAACA,EAA2B,OAAO,EAAG,EACtC,CAACA,EAA2B,OAAO,EAAG,CAC1C,EACO,IAAIgB,GACV,SAAUA,EAAwB,CAC/BA,EAAuB,cAAmB,8BAC1CA,EAAuB,mBAAwB,6CAC/CA,EAAuB,YAAiB,6CACxCA,EAAuB,kBAAuB,kFAC9CA,EAAuB,qBAA0B,oDACjDA,EAAuB,qBAA0B,oDACjDA,EAAuB,qBAA0B,8EACjDA,EAAuB,kBAAuB,+DAC9CA,EAAuB,sBAA2B,gEAClDA,EAAuB,WAAgB,kFACvCA,EAAuB,gBAAqB,sFAC5CA,EAAuB,SAAc,uDACzC,GAAGA,IAA2BA,EAAyB,CAAE,EAAC,EASnD,MAAMC,GAAmBnU,GAAa,CACzC,MAAMoU,EAAahU,GAAuBJ,CAAQ,EAClD,OAAI,OAAOoU,GAAe,SACflW,EAAYgW,EAAuB,sBAAuBE,CAAU,EAE3EA,EAAW,OAASL,GACb7V,EAAYgW,EAAuB,gBAAiB,mBAAmBE,EAAW,MAAM,EAAE,EAEjGA,EAAW,SAAW,GACflW,EAAYgW,EAAuB,UAAU,EAEjDE,CACX,EAcaC,GAAmBrU,GAAa,CACzC,KAAM,CAAE,IAAAjC,EAAK,MAAAlB,CAAO,EAAGmD,EACvB,GAAIjC,EAAIlB,CAAK,IAAM,IACf,MAAO,CAAE,SAAAmD,EAAU,OAAQ,CAAA,GAE/B,GAAIjC,EAAI,OAASlB,EAAQ,GACrB,OAAOqB,EAAYgW,EAAuB,mBAAoB,qDAA6F,IAA2CnW,EAAI,OAASlB,EAAM,EAAE,EAE/N,MAAMyX,EAAWvW,EACZ,MAAMlB,EAAQ,EAAGA,EAAQ,EAAuC,EAChE,UACC0X,EAAgBxW,EAAIlB,EAAQ,EAAE,EAE9B2X,EAAkBD,EAAgB,IACxC,GAAKC,EAAkB,IACnB,OAAOtW,EAAYgW,EAAuB,YAAa,eAAeK,EAAc,SAAS,EAAmC,EAAE,EAEtI,MAAME,EAAmBF,EAAgB,GACzC,GAAIE,EAAmB,EACnB,OAAOvW,EAAYgW,EAAuB,kBAAmB,qBAAqBO,CAAgB,EAAE,EAExG,MAAMC,EAAaV,GAA2BS,CAAgB,EACxDE,GAAUH,EAAkB,MAAiC,EAC7DI,GAAuBJ,EAAkB,MAA+C,EAC9F,GAAII,GAAuB,CAACD,EACxB,OAAOzW,EAAYgW,EAAuB,qBAAsB,eAAeK,EAAc,SAAS,EAAmC,EAAE,EAE/I,MAAMM,GAAaL,EAAkB,MAAoC,EAEnE5T,EAAe,CACjB,IAAA7C,EACA,MAAOlB,EAAQ,GAAyC,CAChE,EACI,GAAI8X,EAAQ,CACR,MAAMG,EAAiBF,EACjB7B,GAA2BnS,CAAY,EACvC,CAAE,SAAUA,EAAc,OAAQ,WAAW,GAAI,CAAA,EACvD,GAAI,OAAOkU,GAAmB,SAC1B,OAAO5W,EAAYgW,EAAuB,kBAAmBY,CAAc,EAE/E,GAAIF,GAAuBE,EAAe,OAAO,SAAW,EACxD,OAAO5W,EAAYgW,EAAuB,oBAAoB,EAElE,MAAME,EAAaS,EACbV,GAAgBW,EAAe,QAAQ,EACvC,CAAE,SAAUA,EAAe,SAAU,OAAQ,EAAE,EACrD,OAAI,OAAOV,GAAe,SACfA,EAEJ,CACH,SAAUA,EAAW,SACrB,OAAQ,CACJ,MAAO,CACH,OAAQA,EAAW,OACnB,SAAAE,EACA,IAAK,CAAE,WAAAI,EAAY,WAAYI,EAAe,MAAQ,CACzD,CACJ,CACb,CACK,CACD,GAAIJ,IAAexB,EAA2B,KAC1C,OAAOhV,EAAYgW,EAAuB,qBAAsB,eAAeK,EAAc,SAAS,EAAmC,EAAE,EAE/I,GAAI,CAACM,EACD,OAAO3W,EAAYgW,EAAuB,SAAU,eAAeK,EAAc,SAAS,EAAmC,EAAE,EAEnI,MAAMH,EAAaD,GAAgBvT,CAAY,EAC/C,OAAI,OAAOwT,GAAe,SACfA,EAEJ,CACH,SAAUA,EAAW,SACrB,OAAQ,CAAE,MAAO,CAAE,OAAQA,EAAW,OAAQ,SAAAE,EAAY,CAClE,CACA,EAQaS,GAAiC/U,GAAa,CACvD,MAAMgV,EAAejC,GAA2B/S,CAAQ,EACxD,GAAI,OAAOgV,GAAiB,SACxB,OAAO9W,EAAYkV,EAAyB,sBAAuB4B,CAAY,EAEnF,KAAM,CAAE,OAAQ9U,EAAU,SAAUU,CAAY,EAAKoU,EAC/CC,EAAevU,GAAa,CAAE,IAAKR,EAAU,MAAO,GAAK,CAC3DmU,GACApB,EACR,CAAK,EACD,GAAI,OAAOgC,GAAiB,SACxB,OAAO/W,EAAYgW,EAAuB,cAAee,CAAY,EAEzE,KAAM,CAAE,OAAQ,CAAC,CAAE,MAAAC,CAAO,EAAEhE,CAAe,CAAI,EAAG+D,EAClD,MAAO,CACH,SAAUrU,EACV,OAAQ,CAAE,gBAAAsQ,EAAiB,GAAIgE,IAAU,OAAY,GAAK,CAAE,MAAAA,CAAK,CAAK,CAC9E,CACA,EASaC,GAAyBnV,GAAa,CAC/C,MAAMoV,EAAa1U,GAAaV,EAAU,CACtC4S,GACAmC,EACR,CAAK,EACD,GAAI,OAAOK,GAAe,SACtB,OAAOlX,EAAYkV,EAAyB,OAAQgC,CAAU,EAElE,KAAM,CAAE,SAAUxU,EAAc,OAAQ,CAACyU,EAAe,CAAE,gBAAAnE,EAAiB,MAAAgE,CAAK,CAAE,CAAI,EAAGE,EACzF,MAAO,CACH,SAAUxU,EACV,OAAQ,CACJ,gBAAAsQ,EACA,GAAIgE,IAAU,OAAY,GAAK,CAAE,MAAAA,CAAK,EACtC,cAAAG,CACH,CACT,CACA,EAUaC,GAAqBJ,GAAU,CACxC,GAAIA,IAAU,QAAcA,EAAM,MAAQ,QAAaA,EAAM,OAAS,GAClE,OAAO,WAAW,KAEtB,MAAMP,EAASO,EAAM,MAAQ,OAAY,EAAI,GACvCK,EAAgBL,EAAM,MAAQ,OAC9B,EACAjB,GAA2BiB,EAAM,IAAI,UAAU,EAC/CN,EAAsBM,EAAM,MAAQ,QAAaA,EAAM,IAAI,WAAW,OAAS,EAC/E,GACA,EACAL,EAAYK,EAAM,OAAS,GAAK,GAAiC,EACjEX,EAENI,EAASC,EAAsBC,EAAYU,EAC3C,OAAO5X,EAAgB,CACnB,WAAW,GAAG,GAAkC,EAChDuX,EAAM,SAAS,MAAO,EAAC,QAAS,EAChC,WAAW,GAAGX,CAAa,EAC3B,GAAIK,IAAwB,EACtB,CAAE,EACF,CAEEzU,EAAoB,OAAO+U,EAAM,IAAI,WAAW,MAAM,CAAC,EAEvDA,EAAM,IAAI,UAC1B,EACQ,GAAIL,IAAc,EAAI,CAAE,EAAG,CAAC1U,EAAoB+U,EAAM,MAAM,CAAC,CACrE,CAAK,CACL,EAMaM,GAA2BC,GAAW,CAC/C,MAAMC,EAAuB/X,EAAgB,CACzC2X,GAAkBG,EAAO,KAAK,EAC9BA,EAAO,eACf,CAAK,EACD,OAAO9X,EAAgB,CACnBgC,GAAmB8V,EAAO,aAAa,EACvCtV,EAAoB,OAAOuV,EAAqB,MAAM,CAAC,EACvDA,CACR,CAAK,CACL,EAWaC,GAA0B3V,GAAa,CAChD,MAAM4V,EAAc3U,GAAcjB,EAAUmV,EAAqB,EACjE,OAAI,OAAOS,GAAgB,SAChB1X,EAAYkV,EAAyB,QAASwC,CAAW,EAE7DA,CACX,EAUaC,GAA4BC,GAAYnY,EAAgB,CACjEwC,EAAoB,OAAO2V,EAAQ,MAAM,CAAC,EAC1C,GAAGA,EAAQ,IAAIN,EAAuB,CAC1C,CAAC,EAWYO,GAAyB/V,GAAa,CAC/C,MAAMgW,EAAkBtV,GAAaV,EAAU,CAC3CyS,GACAoB,GACA8B,GACAlD,EACR,CAAK,EACD,GAAI,OAAOuD,GAAoB,SAC3B,OAAO9X,EAAYkV,EAAyB,YAAa4C,CAAe,EAE5E,KAAM,CAAE,SAAUpV,EAAc,OAAQ,CAACoO,EAAS4E,EAAQkC,EAASG,CAAQ,CAAI,EAAGD,EAClF,MAAO,CACH,SAAUpV,EACV,OAAQ,CAAE,OAAAgT,EAAQ,SAAAqC,EAAU,QAAAH,EAAS,QAAA9G,CAAS,CACtD,CACA,EA8DakH,GAA2BnY,GAAQ,CAC5C,MAAMiY,EAAkBD,GAAsB,CAAE,IAAAhY,EAAK,MAAO,CAAC,CAAE,EAC/D,OAAI,OAAOiY,GAAoB,SACpBA,EAEPA,EAAgB,SAAS,QAAUjY,EAAI,OAChCG,EAAYkV,EAAyB,wBAAyB,qCAAqC4C,EAAgB,SAAS,MAAQ,CAAC,aAAajY,EAAI,OAASiY,EAAgB,SAAS,KAAK,mBAAmB,EAEpNA,EAAgB,MAC3B,EACaG,GAAuBD,GACvBE,GAAoBD,GA0BpBE,GAA2BC,GAAO3Y,EAAgB,CAC3DgB,EAAoB2X,EAAG,OAAO,EAC9B3C,GAAwB2C,EAAG,MAAM,EACjCT,GAAyBS,EAAG,OAAO,EACnC3X,EAAoB2X,EAAG,QAAQ,CACnC,CAAC,EACYC,GAAuBF,GACvBG,GAAoBD,GAIpBE,GAAgC7C,GAAWA,EAAO,IAAK7W,IAAW,CAC3E,cAAeA,EAAM,cACrB,wBAAyBA,EAAM,wBAAwB,MAAO,EAC9D,eAAgBA,EAAM,eACtB,kBAAmBA,EAAM,kBAAkB,MAAO,CACtD,EAAE,EAIW2Z,GAAiCZ,GAAYA,EAAQ,IAAKL,IAAY,CAC/E,gBAAiBA,EAAO,gBAAgB,MAAO,EAC/C,GAAIA,EAAO,QAAU,OACf,CAAE,EACF,CACE,MAAO,CACH,OAAQA,EAAO,MAAM,OACrB,SAAUA,EAAO,MAAM,SAAS,MAAO,EACvC,GAAIA,EAAO,MAAM,MAAQ,OACnB,CAAE,EACF,CACE,IAAK,CACD,WAAYA,EAAO,MAAM,IAAI,WAC7B,WAAYA,EAAO,MAAM,IAAI,WAAW,MAAO,CAClD,CACzB,CACa,CACb,EACI,cAAeA,EAAO,aAC1B,EAAE,EAIWkB,GAA0BC,IAAiB,CACpD,OAAQH,GAA6BG,EAAY,MAAM,EACvD,SAAUA,EAAY,SACtB,QAASF,GAA8BE,EAAY,OAAO,EAC1D,QAASA,EAAY,OACzB,GA0CaC,GAA8BjD,GAAWjW,EAAgBiW,EAAO,IAAK5b,GAAM2F,EAAgB,CACpG3F,EAAE,wBAAwB,MAAO,EAAC,QAAS,EAC3C2G,EAAoB3G,EAAE,aAAa,CACvC,CAAC,CAAC,CAAC,EAQU8e,GAAsChB,GAAYnY,EAAgBmY,EAAQ,IAAIN,EAAuB,CAAC,EAQtGuB,GAAmDnD,GAAWjW,EAAgBiW,EAAO,IAAK5b,GAAM2G,EAAoB3G,EAAE,cAAc,CAAC,CAAC,ECtkBzI,IAACgf,IACV,SAAUA,EAA0B,CAIjCA,EAAyBA,EAAyB,WAAgB,CAAC,EAAI,aAIvEA,EAAyBA,EAAyB,UAAe,CAAC,EAAI,YAItEA,EAAyBA,EAAyB,oBAAyB,CAAC,EAAI,sBAIhFA,EAAyBA,EAAyB,MAAW,EAAE,EAAI,QACnEA,EAAyBA,EAAyB,OAAY,EAAE,EAAI,SAIpEA,EAAyBA,EAAyB,YAAiB,GAAG,EAAI,aAC9E,GAAGA,KAA6BA,GAA2B,CAAE,EAAC,EAEvD,IAAIC,IACV,SAAUA,EAA0B,CACjCA,EAAyBA,EAAyB,WAAgB,EAAE,EAAI,aACxEA,EAAyBA,EAAyB,mBAAwB,EAAE,EAAI,qBAChFA,EAAyBA,EAAyB,sBAA2B,GAAG,EAAI,wBACpFA,EAAyBA,EAAyB,oBAAyB,EAAE,EAAI,sBACjFA,EAAyBA,EAAyB,4BAAiC,EAAE,EAAI,8BACzFA,EAAyBA,EAAyB,+BAAoC,GAAG,EAAI,iCAC7FA,EAAyBA,EAAyB,UAAe,EAAE,EAAI,YACvEA,EAAyBA,EAAyB,kBAAuB,EAAE,EAAI,oBAC/EA,EAAyBA,EAAyB,qBAA0B,GAAG,EAAI,sBACvF,GAAGA,KAA6BA,GAA2B,CAAE,EAAC,EAGlD,MAACC,EAA8BD,GACrCE,GAAQ,CAACjH,EAAM5G,KAEpB4G,EAAK,CAAC,EAAI5G,KAAU,EACf8N,GAAS,CAAClH,EAAM5G,KAAU4G,EAAK,CAAC,EAAI,MAAiC5G,EACrE+N,GAA8BnH,GAASiH,GAAMjH,EAAM8G,GAAyB,WAAW,EACvFM,GAAsCpH,GAASkH,GAAOlH,EAAM8G,GAAyB,mBAAmB,EACxGO,GAA4BrH,GAASkH,GAAOlH,EAAM8G,GAAyB,SAAS,EACpFQ,GAAwBtH,GAASiH,GAAMjH,EAAM8G,GAAyB,KAAK,EAC3ES,GAAY,IAAM,IAAI,WAAW,EAAE,EAAsC,KAAK,CAAC,EAKxEC,GAAe,CAAC,CAAE,yBAAAC,EAA0B,qBAAAC,CAAoB,EAAKjL,EAASM,IAAmBoK,GAA2BM,CAAwB,EAC3JF,GAAW,EACX1K,EAAQ6K,EAAsBjL,CAAM,EAK7BkL,GAAY,CAAC,CAAE,yBAAAF,EAA0B,iBAAAG,CAAgB,EAAKnL,EAASM,IAAmBuK,GAAqBG,CAAwB,EAC9I5K,EAAQ+K,EAAkBnL,CAAM,EAChC,WAAW,GAAE,EAKNoL,GAAe,CAAC,CAAE,yBAAAJ,EAA0B,2BAAAK,CAA0B,EAAKrL,EAASM,IAAmB,CAACoK,GAA2BM,CAAwB,GACpK,CAACL,GAAmCK,CAAwB,GAC5D,CAACJ,GAAyBI,CAAwB,EAChD5K,EAAQiL,EAA4BrL,CAAM,EAC1C8K,KAKOQ,GAAc,CAAC,CAAE,oBAAAC,EAAqB,yBAAAP,EAA0B,mBAAAQ,GAAuBxL,EAASM,IAAmB,CAACqK,GAAmCK,CAAwB,GACxL,CAACJ,GAAyBI,CAAwB,EAChD5K,EAAQoL,EAAoBxL,CAAM,EAClC2K,GAAmCK,CAAwB,EACvDO,IAAwB,OACpBT,GAAW,EACX1K,EAAQmL,EAAqBvL,CAAM,EACvC8K,KASGW,GAAgC,CAAC,CAAE,oBAAAF,EAAqB,gBAAAG,EAAiB,OAAAC,EAAS,IAAI,WAAW,CAAC,EAAG,EAAG,CAAC,CAAC,EAAG,SAAArC,EAAU,cAAAzC,EAAe,wBAAAD,EAAyB,kBAAAgF,EAAmB,YAAAC,EAAa,eAAA9E,EAAgB,yBAAAiE,EAA0B,qBAAAC,EAAsB,mBAAAO,EAAoB,2BAAAH,EAA4B,iBAAAF,EAAkB,QAAA9I,CAAU,EAAErC,EAASM,IAAmBtP,EAAgB,CAClYgB,EAAoBqQ,CAAO,EAC3B0I,GAAa,CAAE,yBAAAC,EAA0B,qBAAAC,CAAoB,EAAIjL,CAAM,EACvEkL,GAAU,CAAE,yBAAAF,EAA0B,iBAAAG,CAAgB,EAAInL,CAAM,EAChEoL,GAAa,CACT,yBAAAJ,EACA,2BAAAK,CACH,EAAErL,CAAM,EACT4G,EAAwB,MAAO,EAAC,QAAS,EACzC5U,EAAoB6U,CAAa,EACjC+E,EACApY,EAAoB,OAAOkY,EAAgB,MAAM,CAAC,EAClDA,EACAG,EACA7Z,EAAoB+U,CAAc,EAClCuE,GAAY,CACR,oBAAAC,EACA,yBAAAP,EACA,mBAAAQ,CACH,EAAExL,CAAM,EACThO,EAAoBsX,CAAQ,EAC5B0B,EACAW,CACJ,CAAC,EAKYG,GAA6CzU,IAAa,CACnE,oBAAqBA,EAAQ,WAAaA,EAAQ,YAAY,QAAQ,OAChEwR,GAEFxR,EAAQ,YAAY,QAAQA,EAAQ,UAAU,CAAC,EAC7C,OACN,SAAUA,EAAQ,YAAY,SAE9B,cAAeA,EAAQ,YAAY,OAAOA,EAAQ,UAAU,EAAE,cAC9D,wBAEAA,EAAQ,YAAY,OAAOA,EAAQ,UAAU,EAAE,wBAC/C,kBAAmBsR,GAEnBtR,EAAQ,cAAcA,EAAQ,UAAU,EAAE,KAAK,EAC/C,YAAarE,GAEbqE,EAAQ,cAAcA,EAAQ,UAAU,EAAE,aAAa,EACvD,eAEAA,EAAQ,YAAY,OAAOA,EAAQ,UAAU,EAAE,eAC/C,qBAAsB6S,GAA2B7S,EAAQ,YAAY,MAAM,EAC3E,mBAAoB8S,GAAmC9S,EAAQ,YAAY,OAAO,EAClF,2BAA4B+S,GAAgD/S,EAAQ,YAAY,MAAM,EACtG,iBAAkB8S,GAAmC9S,EAAQ,aAAa,EAC1E,QAASA,EAAQ,YAAY,OACjC,GASa0U,GAAkC,CAAC1U,EAAS,CAAE,gBAAAqU,EAAiB,yBAAAV,CAAwB,EAAKhL,EAASM,IAAmBmL,GAA8B,CAC/J,GAAGK,GAA0CzU,CAAO,EACpD,gBAAAqU,EACA,yBAAAV,CACJ,EAAGhL,CAAM,ECjKC,IAACgM,IACV,SAAUA,EAAiB,CAIxBA,EAAgBA,EAAgB,sBAA2B,GAAK,EAAI,wBAIpEA,EAAgBA,EAAgB,wBAA6B,GAAG,EAAI,0BAIpEA,EAAgBA,EAAgB,sBAA2B,GAAG,EAAI,wBAIlEA,EAAgBA,EAAgB,kBAAuB,GAAI,EAAI,oBAI/DA,EAAgBA,EAAgB,uBAA4B,GAAG,EAAI,yBAInEA,EAAgBA,EAAgB,uBAA4B,CAAC,EAAI,yBAIjEA,EAAgBA,EAAgB,uCAA4C,IAAI,EAAI,yCAIpFA,EAAgBA,EAAgB,uBAA4B,GAAG,EAAI,yBAInEA,EAAgBA,EAAgB,+BAAoC,GAAM,EAAI,iCAI9EA,EAAgBA,EAAgB,uBAA4B,GAAO,EAAI,yBAIvEA,EAAgBA,EAAgB,sBAA2B,CAAC,EAAI,wBAEhEA,EAAgB,YAAiB,uBACjCA,EAAgB,YAAiB,sBACjCA,EAAgBA,EAAgB,uBAA4B,EAAE,EAAI,wBACtE,GAAGA,KAAoBA,GAAkB,CAAE,EAAC,EAErC,MAAMC,GAAkC,CAC3C1B,EAA4B,WAC5BA,EAA4B,sBAC5BA,EAA4B,oBAC5BA,EAA4B,+BAC5BA,EAA4B,UAC5BA,EAA4B,oBAChC,EAEa2B,GAA+BD,GChElC,IAACE,GACV,SAAUA,EAA2B,CAClCA,EAA0B,eAAoB,oDAC9CA,EAA0B,aAAkB,yCAC5CA,EAA0B,oBAAyB,2EACnDA,EAA0B,yBAA8B,2HACxDA,EAA0B,eAAoB,sCAC9CA,EAA0B,eAAoB,gDAC9CA,EAA0B,oBAAyB,+CACnDA,EAA0B,WAAgB,qCAC1CA,EAA0B,qCAA0C,oFACpEA,EAA0B,uCAA4C,sFACtEA,EAA0B,8BAAmC,2HAC7DA,EAA0B,0BAA+B,0DACzDA,EAA0B,+BAAoC,kGAC9DA,EAA0B,8BAAmC,iEAC7DA,EAA0B,qCAA0C,iGACpEA,EAA0B,aAAkB,yCAC5CA,EAA0B,kBAAuB,6CACjDA,EAA0B,yBAA8B,kMACxDA,EAA0B,yBAA8B,oMACxDA,EAA0B,mBAAwB,4GAClDA,EAA0B,uBAA4B,iHACtDA,EAA0B,qBAA0B,uGACpDA,EAA0B,wBAA6B,uGACvDA,EAA0B,yBAA8B,gDACxDA,EAA0B,gBAAqB,4DAC/CA,EAA0B,yBAA8B,+CACxDA,EAA0B,kBAAuB,8DACjDA,EAA0B,6BAAkC,qEAC5DA,EAA0B,8BAAmC,sEAC7DA,EAA0B,4BAAiC,oEAC3DA,EAA0B,iBAAsB,qGAChDA,EAA0B,+BAAoC,0EAC9DA,EAA0B,yBAA8B,8CACxDA,EAA0B,sBAA2B,0DACrDA,EAA0B,cAAmB,qEAC7CA,EAA0B,2BAAgC,gDAC1DA,EAA0B,iBAAsB,yGAChDA,EAA0B,qBAA0B,qFACpDA,EAA0B,eAAoB,2DAC9CA,EAA0B,wBAA6B,qGACvDA,EAA0B,uBAA4B,mFACtDA,EAA0B,mBAAwB,yFAClDA,EAA0B,iBAAsB,uDAChDA,EAA0B,qCAA0C,sFACpEA,EAA0B,eAAoB,iEAC9CA,EAA0B,gBAAqB,kEAC/CA,EAA0B,cAAmB,4BAC7CA,EAA0B,yBAA8B,8IACxDA,EAA0B,oBAAyB,uHACnDA,EAA0B,0BAA+B,+HACzDA,EAA0B,uBAA4B,iFAC1D,GAAGA,IAA8BA,EAA4B,CAAE,EAAC,EASpD,MAACC,GAAa,CAACC,EAAO7a,EAAWC,KAAkB,CAC3D,GAAG4a,EACH,MAAOA,EAAM,OAAS9a,EAAYC,EAAWC,CAAY,CAC7D,GC/DU,IAAC6a,IACV,SAAUA,EAAgB,CAIvBA,EAAeA,EAAe,KAAU,CAAC,EAAI,OAC7CA,EAAeA,EAAe,eAAoB,CAAC,EAAI,iBACvDA,EAAeA,EAAe,eAAoB,CAAC,EAAI,iBACvDA,EAAeA,EAAe,eAAoB,CAAC,EAAI,iBACvDA,EAAeA,EAAe,eAAoB,CAAC,EAAI,iBACvDA,EAAeA,EAAe,eAAoB,CAAC,EAAI,iBACvDA,EAAeA,EAAe,eAAoB,CAAC,EAAI,iBACvDA,EAAeA,EAAe,eAAoB,CAAC,EAAI,iBACvDA,EAAeA,EAAe,eAAoB,CAAC,EAAI,iBACvDA,EAAeA,EAAe,eAAoB,CAAC,EAAI,iBACvDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EAAe,gBAAqB,EAAE,EAAI,kBACzDA,EAAeA,EA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","x_google_ignoreList":[0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]}