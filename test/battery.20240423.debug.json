{
    "$schema": "https://ide.bitauth.com/authentication-template-v0.schema.json",
    "description": "Imported from cashscript",
    "name": "Battery",
    "entities": {
      "parameters": {
        "description": "Contract creation and function parameters",
        "name": "parameters",
        "scripts": [
          "lock",
          "unlock_lock"
        ],
        "variables": {
          "function_index": {
            "description": "Script function index to execute",
            "name": "function_index",
            "type": "WalletData"
          },
          "vault_unlocking_bytecode": {
            "description": "\"vaultUnlockingBytecode\" parameter of this contract",
            "name": "vaultUnlockingBytecode",
            "type": "WalletData"
          },
          "gantry_unlocking_bytecode": {
            "description": "\"gantryUnlockingBytecode\" parameter of this contract",
            "name": "gantryUnlockingBytecode",
            "type": "WalletData"
          },
          "start_time": {
            "description": "\"startTime\" parameter of this contract",
            "name": "startTime",
            "type": "WalletData"
          },
          "end": {
            "description": "\"end\" parameter of this contract",
            "name": "end",
            "type": "WalletData"
          }
        }
      }
    },
    "scenarios": {
      "evaluate_function": {
        "data": {
          "bytecode": {
            "function_index": "0",
            "vault_unlocking_bytecode": "0x00d000d394537a637881b17551ce53798800d0009d00c678a2696700ce53798851d0009d00cc78a2696800cd02aa20c1aa7e01877e88c0cdc0c788c0d0c0c693c0d3c0cc939c777777",
            "gantry_unlocking_bytecode": "0x7c8100cf814f7c5279965a97009e6300d100c88800d3070040075af075079d012000c87e547e00cf7e54797e02aa2078aa7e01877e00cd88517b75776700d3009d75006800cf817b93548078d28800ce78d18800c77ccd8800ce8777",
            "start_time": "0x0b",
            "end": "0x1027"
          },
          "currentBlockHeight": 2,
          "currentBlockTime": 1713891897,
          "keys": {
            "privateKeys": {}
          }
        },
        "description": "An example evaluation where this script execution passes.",
        "name": "Evaluate",
        "transaction": {
          "inputs": [
            {
              "outpointIndex": 8,
              "outpointTransactionHash": "a6c50ec6e4d440537a328c5c1ef6b5c95fc4f8bba86de6ea93dc66cb5a41f782",
              "sequenceNumber": 4294967294,
              "unlockingBytecode": [
                "slot"
              ]
            }
          ],
          "locktime": 100,
          "outputs": [
            {
              "lockingBytecode": "aa208e5686ce2555845616cb871e2486f866c9ed88fe701bb05fcd660a12e5bcd4b487",
              "token": {
                "amount": "0",
                "category": "de086269930c58129effe489ce64564b40d60750e5abd806aee72b237056e8f5",
                "nft": {
                  "capability": "none",
                  "commitment": "64000000"
                }
              },
              "valueSatoshis": 2000
            },
            {
              "lockingBytecode": {},
              "token": {
                "amount": "0",
                "category": "de086269930c58129effe489ce64564b40d60750e5abd806aee72b237056e8f5",
                "nft": {
                  "capability": "minting",
                  "commitment": "e8030000"
                }
              },
              "valueSatoshis": 7400
            }
          ],
          "version": 2
        },
        "sourceOutputs": [
          {
            "lockingBytecode": [
              "slot"
            ],
            "valueSatoshis": 10000,
            "token": {
              "amount": "0",
              "category": "de086269930c58129effe489ce64564b40d60750e5abd806aee72b237056e8f5",
              "nft": {
                "capability": "minting",
                "commitment": "64000000"
              }
            }
          }
        ]
      }
    },
    "scripts": {
      "unlock_lock": {
        "passes": [
          "evaluate_function"
        ],
        "name": "unlock",
        "script": "// \"execute\" function parameters\n// none\n",
        "unlocks": "lock"
      },
      "lock": {
        "lockingType": "p2sh20",
        "name": "lock",
        "script": "// \"Battery\" contract constructor parameters\n<vault_unlocking_bytecode> // bytes73 = <0x00d000d394537a637881b17551ce53798800d0009d00c678a2696700ce53798851d0009d00cc78a2696800cd02aa20c1aa7e01877e88c0cdc0c788c0d0c0c693c0d3c0cc939c777777>\n<gantry_unlocking_bytecode> // bytes92 = <0x7c8100cf814f7c5279965a97009e6300d100c88800d3070040075af075079d012000c87e547e00cf7e54797e02aa2078aa7e01877e00cd88517b75776700d3009d75006800cf817b93548078d28800ce78d18800c77ccd8800ce8777>\n<start_time> // int = <0x0b>\n<end> // int = <0x1027>\n\n// bytecode\n                                                                                                       /* pragma cashscript ^0.10.0;                                                                                                  */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /* // [WIP] 2024-04-01                                                                                                         */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /* // A Battery of Gantries to deploy Vaults.                                                                                  */\n                                                                                                       /* //                                                                                                                          */\n                                                                                                       /* // A Battery makes a series of Gantries at different powers of 10 that go on to create Futures Vaults at various intervals. */\n                                                                                                       /* //                                                                                                                          */\n                                                                                                       /* // Given a minting NFT with the data 0xA0000000,                                                                            */\n                                                                                                       /* // mint a sequence of NFTs with minting capibility                                                                          */\n                                                                                                       /* // sending those NFTs to the corresponting Gantry                                                                           */\n                                                                                                       /* //                                                                                                                          */\n                                                                                                       /* //  execute():                                                                                                              */\n                                                                                                       /* //                                                                                                                          */\n                                                                                                       /* //  inputs                           outputs                                                                                */\n                                                                                                       /* //  [0] Battery + NFT 0xA0000000     ->  [0] Gantary02 + NFT* 0x64000000<startTime>                                         */\n                                                                                                       /* //                                   =>  [1] Battery   + NFT  0x64000000                                                    */\n                                                                                                       /* //                                                                                                                          */\n                                                                                                       /* //  [0] Battery + NFT 0x64000000     ->  [0] Gantary03 + NFT* 0xE8030000<startTime>                                         */\n                                                                                                       /* //                                   =>  [1] Battery   + NFT  0xE8030000                                                    */\n                                                                                                       /* //                                                                                                                          */\n                                                                                                       /* //  ... 10270000 10e5                                                                                                       */\n                                                                                                       /* //  ... A0860100 10e6                                                                                                       */\n                                                                                                       /* //  ...                                                                                                                     */\n                                                                                                       /* //                                                                                                                          */\n                                                                                                       /* //  [0] Battery + NFT 0x<end>        ->  [0] Battery   + NFT  0x6a // burn NFT, sats are unencumbered.                      */\n                                                                                                       /* //                                                                                                                          */\n                                                                                                       /* //                                                                                                                          */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /* contract Battery(                                                                                                           */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*     //                                                                                                                      */\n                                                                                                       /*     // int start, // is set in NFT mint.                                                                                    */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*     // final step increment of longest gantry interval for expiry series                                                    */\n                                                                                                       /*     //   i.e. 10^6, every 1,000,000 blocks, 20.8 years                                                                      */\n                                                                                                       /*     int end,                                                                                                                */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*     // starting block height                                                                                                */\n                                                                                                       /*     int startTime,                                                                                                          */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*     // sha256 hash of gantry unlocking bytecode                                                                             */\n                                                                                                       /*     bytes gantryUnlockingBytecode,                                                                                          */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*     // sha256 hash of vault unlocking bytecode                                                                              */\n                                                                                                       /*     bytes vaultUnlockingBytecode,                                                                                           */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*     ) {                                                                                                                     */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*     function execute(){                                                                                                     */\n                                                                                                       /*                                                                                                                             */\nOP_1 OP_ROLL OP_CHECKLOCKTIMEVERIFY OP_DROP                                                            /*         require(tx.time >= int(startTime));                                                                                 */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*         // We allow only 1 input, creator must provide enough BCH                                                           */\n                                                                                                       /*         // when they make the Battery UTXO.                                                                                 */\nOP_TXINPUTCOUNT OP_1 OP_NUMEQUAL OP_VERIFY                                                             /*         require(tx.inputs.length == 1);                                                                                     */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*         // There is something fishy going on here with the log stack                                                        */\n                                                                                                       /*         // and the new debug tools. re-test behavior after rkalis' patch.                                                   */\nOP_0 OP_UTXOTOKENCOMMITMENT                                                                            /*         bytes4 stepBytes = bytes4(tx.inputs[0].nftCommitment);                                                              */\nOP_0 OP_UTXOTOKENCOMMITMENT OP_BIN2NUM                                                                 /*         int step = int(tx.inputs[0].nftCommitment);                                                                         */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*         // Get the redeem bytecode of the gantry instance                                                                   */\nOP_4 OP_PICK OP_SIZE OP_NIP OP_5 OP_ROLL OP_CAT                                                        /*         bytes gantryRedeemBytecode = bytes(vaultUnlockingBytecode.length) + vaultUnlockingBytecode +                        */\nOP_4 OP_CAT OP_2 OP_ROLL OP_CAT                                                                        /*                                      0x04 + stepBytes                   +  // stepBytes                                     */\n<0x20> OP_CAT OP_0 OP_UTXOTOKENCATEGORY <0x20> OP_SPLIT OP_DROP OP_CAT                                 /*                                      0x20 + tx.inputs[0].tokenCategory.split(32)[0]  +  // This tokenCategory               */\nOP_3 OP_ROLL OP_CAT                                                                                    /*                                      gantryUnlockingBytecode;                                                               */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*         require(                                                                                                            */\n<0xaa20> OP_1 OP_ROLL OP_HASH256 OP_CAT <0x87> OP_CAT                                                  /*             0xaa20 + hash256(gantryRedeemBytecode) + 0x87                                                                   */\nOP_0 OP_OUTPUTBYTECODE OP_EQUAL                                                                        /*             == tx.outputs[0].lockingBytecode                                                                                */\nOP_VERIFY                                                                                              /*         );                                                                                                                  */\n                                                                                                       /*                                                                                                                             */\nOP_0 OP_UTXOTOKENCATEGORY <0x20> OP_SPLIT                                                              /*         bytes batteryCategory, bytes batteryCapability = tx.inputs[0].tokenCategory.split(32);                              */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*         // assure a mutable token is set                                                                                    */\nOP_0 OP_ROLL OP_2 OP_EQUAL OP_VERIFY                                                                   /*         require(batteryCapability == 0x02);                                                                                 */\n                                                                                                       /*                                                                                                                             */\nOP_0 OP_OUTPUTTOKENCATEGORY <0x20> OP_SPLIT                                                            /*         bytes gantryCategory, bytes gantryCapability = tx.outputs[0].tokenCategory.split(32);                               */\n                                                                                                       /*         // assure a minting token is set                                                                                    */\nOP_0 OP_ROLL OP_BIN2NUM OP_0 OP_NUMEQUAL OP_VERIFY                                                     /*         require(int(gantryCapability) == 0);                                                                                */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*         // Require the Gantry category to match the Battery.                                                                */\nOP_1 OP_ROLL OP_1 OP_ROLL OP_EQUAL OP_VERIFY                                                           /*         require(batteryCategory == gantryCategory);                                                                         */\n                                                                                                       /*                                                                                                                             */\nOP_0 OP_UTXOVALUE OP_0 OP_OUTPUTVALUE OP_1 OP_OUTPUTVALUE OP_ADD OP_SUB <0xe803> OP_LESSTHAN OP_VERIFY /*         require((tx.inputs[0].value - (tx.outputs[0].value + tx.outputs[1].value)) < 1000);                                 */\n                                                                                                       /*                                                                                                                             */\nOP_0 OP_PICK OP_2 OP_ROLL OP_LESSTHAN OP_IF                                                            /*         if(step < end) {                                                                                                    */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*             // Minting NFT commitment MUST increase magnitude by 10.                                                        */\n                                                                                                       /*             require(                                                                                                        */\nOP_0 OP_PICK OP_10 OP_MUL OP_4 OP_NUM2BIN OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUAL                       /*                 bytes4(step * 10) == tx.outputs[1].nftCommitment                                                            */\nOP_VERIFY                                                                                              /*             );                                                                                                              */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*             // Minting NFT must be passed on                                                                                */\n                                                                                                       /*             // to outputs[0] in any case.                                                                                   */\n                                                                                                       /*             require(                                                                                                        */\nOP_0 OP_UTXOTOKENCATEGORY                                                                              /*                 tx.inputs[0].tokenCategory                                                                                  */\nOP_1 OP_OUTPUTTOKENCATEGORY OP_EQUAL                                                                   /*                 == tx.outputs[1].tokenCategory                                                                              */\nOP_VERIFY                                                                                              /*             );                                                                                                              */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*             // Battery NFT must be passed on                                                                                */\n                                                                                                       /*             // to outputs[1] in any case.                                                                                   */\n                                                                                                       /*             require(                                                                                                        */\nOP_0 OP_UTXOBYTECODE                                                                                   /*                 tx.inputs[0].lockingBytecode                                                                                */\nOP_1 OP_OUTPUTBYTECODE OP_EQUAL                                                                        /*                 == tx.outputs[1].lockingBytecode                                                                            */\nOP_VERIFY                                                                                              /*             );                                                                                                              */\nOP_ELSE                                                                                                /*         }else{                                                                                                              */\n                                                                                                       /*             // Battery NFT must be passed on                                                                                */\n                                                                                                       /*             // to outputs[0] in any case.                                                                                   */\n                                                                                                       /*             require(                                                                                                        */\nOP_0 OP_OUTPUTBYTECODE <0x6a> OP_EQUAL                                                                 /*                 tx.outputs[0].lockingBytecode == 0x6a                                                                       */\nOP_VERIFY                                                                                              /*             );                                                                                                              */\n                                                                                                       /*             // Burn minting baton NFT                                                                                       */\nOP_0 OP_UTXOTOKENCATEGORY OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUAL OP_VERIFY                               /*             require(tx.inputs[0].tokenCategory == tx.outputs[0].tokenCategory);                                             */\nOP_ENDIF                                                                                               /*         }                                                                                                                   */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*                                                                                                                             */\nOP_1 OP_NIP                                                                                            /*     }                                                                                                                       */\n                                                                                                       /* }                                                                                                                           */\n                                                                                                       /*                                                                                                                             */\n                                                                                                       /*                                                                                                                             */"
      }
    },
    "supported": [
      "BCH_SPEC"
    ],
    "version": 0
  }