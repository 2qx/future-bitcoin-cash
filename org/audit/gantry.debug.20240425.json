{
    "$schema": "https://ide.bitauth.com/authentication-template-v0.schema.json",
    "description": "Imported from cashscript",
    "name": "Gantry",
    "entities": {
      "parameters": {
        "description": "Contract creation and function parameters",
        "name": "parameters",
        "scripts": [
          "lock",
          "unlock_lock"
        ],
        "variables": {
          "function_index": {
            "description": "Script function index to execute",
            "name": "function_index",
            "type": "WalletData"
          },
          "vault_unlocking_bytecode": {
            "description": "\"vaultUnlockingBytecode\" parameter of this contract",
            "name": "vaultUnlockingBytecode",
            "type": "WalletData"
          },
          "step_bytes": {
            "description": "\"stepBytes\" parameter of this contract",
            "name": "stepBytes",
            "type": "WalletData"
          },
          "token_category": {
            "description": "\"tokenCategory\" parameter of this contract",
            "name": "tokenCategory",
            "type": "WalletData"
          }
        }
      }
    },
    "scenarios": {
      "evaluate_function": {
        "data": {
          "bytecode": {
            "function_index": "0",
            "vault_unlocking_bytecode": "0xc0d3c0d09400a0c0cd02aa20c1aa7e01877e877c9a637681b175c0d152798868c0cec0d188c0cdc0c788c0d0c0c693c0d3c0cc939c7777",
            "step_bytes": "0x0a000000",
            "token_category": "0x74cd5da6265eb2a62b4df12445bacf6edef411c0b1223edc6a832b2d4045fe93"
          },
          "currentBlockHeight": 2,
          "currentBlockTime": 1714127292,
          "keys": {
            "privateKeys": {}
          }
        },
        "description": "An example evaluation where this script execution passes.",
        "name": "Evaluate",
        "transaction": {
          "inputs": [
            {
              "outpointIndex": 0,
              "outpointTransactionHash": "24faf3f715e35a5bc7efa383135b1a55249e0cc2bf2512972e3b7ba5cfa08742",
              "sequenceNumber": 4294967294,
              "unlockingBytecode": [
                "slot"
              ]
            }
          ],
          "locktime": 133700,
          "outputs": [
            {
              "lockingBytecode": {},
              "token": {
                "amount": "0",
                "category": "93fe45402d2b836adc3e22b1c011f4de6ecfba4524f14d2ba6b25e26a65dcd74",
                "nft": {
                  "capability": "mutable",
                  "commitment": "78000000"
                }
              },
              "valueSatoshis": 4001
            },
            {
              "lockingBytecode": "aa20ea3da65374cbb6f2ffc9d0e55588d23ee817c96091f5ddd31feed693e036af8487",
              "token": {
                "amount": "300000000000000",
                "category": "24faf3f715e35a5bc7efa383135b1a55249e0cc2bf2512972e3b7ba5cfa08742"
              },
              "valueSatoshis": 1000
            },
            {
              "lockingBytecode": "aa20ea3da65374cbb6f2ffc9d0e55588d23ee817c96091f5ddd31feed693e036af8487",
              "token": {
                "amount": "300000000000000",
                "category": "24faf3f715e35a5bc7efa383135b1a55249e0cc2bf2512972e3b7ba5cfa08742"
              },
              "valueSatoshis": 1000
            },
            {
              "lockingBytecode": "aa20ea3da65374cbb6f2ffc9d0e55588d23ee817c96091f5ddd31feed693e036af8487",
              "token": {
                "amount": "300000000000000",
                "category": "24faf3f715e35a5bc7efa383135b1a55249e0cc2bf2512972e3b7ba5cfa08742"
              },
              "valueSatoshis": 1000
            },
            {
              "lockingBytecode": "aa20ea3da65374cbb6f2ffc9d0e55588d23ee817c96091f5ddd31feed693e036af8487",
              "token": {
                "amount": "300000000000000",
                "category": "24faf3f715e35a5bc7efa383135b1a55249e0cc2bf2512972e3b7ba5cfa08742"
              },
              "valueSatoshis": 1000
            },
            {
              "lockingBytecode": "aa20ea3da65374cbb6f2ffc9d0e55588d23ee817c96091f5ddd31feed693e036af8487",
              "token": {
                "amount": "300000000000000",
                "category": "24faf3f715e35a5bc7efa383135b1a55249e0cc2bf2512972e3b7ba5cfa08742"
              },
              "valueSatoshis": 1000
            },
            {
              "lockingBytecode": "aa20ea3da65374cbb6f2ffc9d0e55588d23ee817c96091f5ddd31feed693e036af8487",
              "token": {
                "amount": "300000000000000",
                "category": "24faf3f715e35a5bc7efa383135b1a55249e0cc2bf2512972e3b7ba5cfa08742"
              },
              "valueSatoshis": 1000
            },
            {
              "lockingBytecode": "aa20ea3da65374cbb6f2ffc9d0e55588d23ee817c96091f5ddd31feed693e036af8487",
              "token": {
                "amount": "300000000000000",
                "category": "24faf3f715e35a5bc7efa383135b1a55249e0cc2bf2512972e3b7ba5cfa08742"
              },
              "valueSatoshis": 1000
            },
            {
              "lockingBytecode": "6a0446424348046e000000",
              "valueSatoshis": 0
            }
          ],
          "version": 2
        },
        "sourceOutputs": [
          {
            "lockingBytecode": [
              "slot"
            ],
            "valueSatoshis": 100000,
            "token": {
              "amount": "0",
              "category": "93fe45402d2b836adc3e22b1c011f4de6ecfba4524f14d2ba6b25e26a65dcd74",
              "nft": {
                "capability": "mutable",
                "commitment": "6e000000"
              }
            }
          }
        ]
      }
    },
    "scripts": {
      "unlock_lock": {
        "passes": [
          "evaluate_function"
        ],
        "name": "unlock",
        "script": "// \"execute\" function parameters\n// none\n",
        "unlocks": "lock"
      },
      "lock": {
        "lockingType": "p2sh20",
        "name": "lock",
        "script": "// \"Gantry\" contract constructor parameters\n<vault_unlocking_bytecode> // bytes55 = <0xc0d3c0d09400a0c0cd02aa20c1aa7e01877e877c9a637681b175c0d152798868c0cec0d188c0cdc0c788c0d0c0c693c0d3c0cc939c7777>\n<step_bytes> // bytes4 = <0x0a000000>\n<token_category> // bytes32 = <0x74cd5da6265eb2a62b4df12445bacf6edef411c0b1223edc6a832b2d4045fe93>\n\n// bytecode\n                                                                                                                                                  /* pragma cashscript ^0.10.0;                                                                */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* // Gantry - Create vault contracts with fungible tokens in a uniform way.                 */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* // From: Future Bitcoin Cash                                                              */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* // Author: 2qx <2qx_in_the_future@small.neomailbox.ch>                                    */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* // NFT commentment stores the next series locktime in 32-bit LE                           */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* // [ ] Require the minting baton in the input                                             */\n                                                                                                                                                  /* // [ ] Get the current step increment for the chain of futures                            */\n                                                                                                                                                  /* // [ ] Get the current vault locktime to be printed.                                      */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* //   either                                                                               */\n                                                                                                                                                  /* // [ ] Mint an array of FT utxos,                                                         */\n                                                                                                                                                  /* // [ ] send them off to a Vault                                                           */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* //   or                                                                                   */\n                                                                                                                                                  /* // [ ] skip every 10th print.                                                             */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* // [ ] increment locktime height value stored on NFT baton                                */\n                                                                                                                                                  /* // [ ] assure NFT baton is returned                                                       */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* //  Gantry i/o Flow:                                                                      */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* //  Inputs              Outputs                                                           */\n                                                                                                                                                  /* //  [0] NFT mintBaton   ->  [0] NFT mintBaton                                             */\n                                                                                                                                                  /* //  [1] topup sats?     =>  [1] FTs Vault                                                 */\n                                                                                                                                                  /* //                          [2] FTs Vault                                                 */\n                                                                                                                                                  /* //                          [3] FTs Vault                                                 */\n                                                                                                                                                  /* //                          [4] FTs Vault                                                 */\n                                                                                                                                                  /* //                          [5] FTs Vault                                                 */\n                                                                                                                                                  /* //                          [6] FTs Vault                                                 */\n                                                                                                                                                  /* //                          [7] FTs Vault                                                 */\n                                                                                                                                                  /* //                          [8] OP_RETURN FBCH <locktime>                                 */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /* //  ... but skip every 10th token print,                                                  */\n                                                                                                                                                  /* //   which will be printed by the gantry of the next order.                               */\n                                                                                                                                                  /* //  [0] NFT mintBaton   =>  [0] NFT mintBaton                                             */\n                                                                                                                                                  /* //                                                                                        */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /* contract Gantry(                                                                          */\n                                                                                                                                                  /*     bytes32 tokenCategory,                                                                */\n                                                                                                                                                  /*     bytes4 stepBytes,                                                                     */\n                                                                                                                                                  /*     bytes vaultUnlockingBytecode                                                          */\n                                                                                                                                                  /*     ) {                                                                                   */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*     function execute(){                                                                   */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*         // Gantry covenant must be passed on                                              */\n                                                                                                                                                  /*         // in first outputs[0] in any case.                                               */\nOP_0 OP_UTXOBYTECODE OP_0 OP_OUTPUTBYTECODE OP_EQUAL OP_VERIFY                                                                                    /*         require(tx.inputs[0].lockingBytecode == tx.outputs[0].lockingBytecode);           */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*         // Verify mutable NFT baton is correct                                            */\nOP_0 OP_UTXOTOKENCATEGORY <0x20> OP_SPLIT OP_DROP OP_1 OP_ROLL OP_EQUAL OP_VERIFY                                                                 /*         require(tx.inputs[0].tokenCategory.split(32)[0] == tokenCategory);                */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*         // Return mutable NFT baton                                                       */\n                                                                                                                                                  /*         // to outputs[0] in any case.                                                     */\nOP_0 OP_UTXOTOKENCATEGORY OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUAL OP_VERIFY                                                                          /*         require(tx.inputs[0].tokenCategory == tx.outputs[0].tokenCategory);               */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*         // simply return the NFT baton without minting FTs                                */\nOP_0 OP_OUTPUTTOKENAMOUNT OP_0 OP_NUMEQUAL OP_VERIFY                                                                                              /*         require(tx.outputs[0].tokenAmount == 0);                                          */\n                                                                                                                                                  /*                                                                                           */\nOP_0 OP_ROLL OP_BIN2NUM                                                                                                                           /*         int step = int(stepBytes);                                                        */\nOP_0 OP_UTXOTOKENCOMMITMENT OP_BIN2NUM                                                                                                            /*         int locktime = int(bytes4(tx.inputs[0].nftCommitment));                           */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*         // Height stored in mutable NFT commitment MUST be incremented by <step>.         */\nOP_0 OP_OUTPUTTOKENCOMMITMENT OP_1 OP_PICK OP_3 OP_PICK OP_ADD OP_4 OP_NUM2BIN OP_EQUAL OP_VERIFY                                                 /*         require(tx.outputs[0].nftCommitment == bytes4(locktime+step));                    */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*         // if not a 10th step, mint tokens                                                */\nOP_0 OP_ROLL OP_1 OP_ROLL OP_DIV OP_10 OP_MOD OP_0 OP_NUMEQUAL OP_IF                                                                              /*         if((locktime/step)%10==0){                                                        */\nOP_TXOUTPUTCOUNT OP_1 OP_NUMEQUAL OP_VERIFY                                                                                                       /*             require(tx.outputs.length == 1);                                              */\nOP_ELSE                                                                                                                                           /*         } else {                                                                          */\n                                                                                                                                                  /*             // Get the redeem bytecode of the vault instance                              */\n                                                                                                                                                  /*             bytes theVault =                                                              */\n<0x20> OP_0 OP_OUTPOINTTXHASH OP_CAT                                                                                                              /*                 0x20 + tx.inputs[0].outpointTransactionHash +   // new fungible category  */\nOP_4 OP_CAT OP_0 OP_UTXOTOKENCOMMITMENT OP_CAT                                                                                                    /*                 0x04 + bytes4(tx.inputs[0].nftCommitment) +     // locktime               */\nOP_1 OP_PICK OP_CAT                                                                                                                               /*                 vaultUnlockingBytecode;                                                   */\n                                                                                                                                                  /*                                                                                           */\n<0xaa20> OP_1 OP_PICK OP_HASH256 OP_CAT <0x87> OP_CAT                                                                                             /*             bytes vaultLockingBytecode = 0xaa20 + hash256(theVault) + 0x87;               */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*             // shard out tokens across seven UTXOs                                        */\nOP_1 OP_OUTPUTBYTECODE OP_1 OP_PICK OP_EQUAL OP_VERIFY                                                                                            /*             require(tx.outputs[1].lockingBytecode == vaultLockingBytecode);               */\nOP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUAL OP_VERIFY                                                                             /*             require(tx.outputs[1].tokenCategory == tx.inputs[0].outpointTransactionHash); */\nOP_1 OP_OUTPUTTOKENAMOUNT <0x00c06e31d91001> OP_NUMEQUAL OP_VERIFY                                                                                /*             require(tx.outputs[1].tokenAmount == 300000000000000);                        */\n                                                                                                                                                  /*                                                                                           */\nOP_2 OP_OUTPUTBYTECODE OP_1 OP_PICK OP_EQUAL OP_VERIFY                                                                                            /*             require(tx.outputs[2].lockingBytecode == vaultLockingBytecode);               */\nOP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUAL OP_VERIFY                                                                             /*             require(tx.outputs[2].tokenCategory == tx.inputs[0].outpointTransactionHash); */\nOP_2 OP_OUTPUTTOKENAMOUNT <0x00c06e31d91001> OP_NUMEQUAL OP_VERIFY                                                                                /*             require(tx.outputs[2].tokenAmount == 300000000000000);                        */\n                                                                                                                                                  /*                                                                                           */\nOP_3 OP_OUTPUTBYTECODE OP_1 OP_PICK OP_EQUAL OP_VERIFY                                                                                            /*             require(tx.outputs[3].lockingBytecode == vaultLockingBytecode);               */\nOP_3 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUAL OP_VERIFY                                                                             /*             require(tx.outputs[3].tokenCategory == tx.inputs[0].outpointTransactionHash); */\nOP_3 OP_OUTPUTTOKENAMOUNT <0x00c06e31d91001> OP_NUMEQUAL OP_VERIFY                                                                                /*             require(tx.outputs[3].tokenAmount == 300000000000000);                        */\n                                                                                                                                                  /*                                                                                           */\nOP_4 OP_OUTPUTBYTECODE OP_1 OP_PICK OP_EQUAL OP_VERIFY                                                                                            /*             require(tx.outputs[4].lockingBytecode == vaultLockingBytecode);               */\nOP_4 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUAL OP_VERIFY                                                                             /*             require(tx.outputs[4].tokenCategory == tx.inputs[0].outpointTransactionHash); */\nOP_4 OP_OUTPUTTOKENAMOUNT <0x00c06e31d91001> OP_NUMEQUAL OP_VERIFY                                                                                /*             require(tx.outputs[4].tokenAmount == 300000000000000);                        */\n                                                                                                                                                  /*                                                                                           */\nOP_5 OP_OUTPUTBYTECODE OP_1 OP_PICK OP_EQUAL OP_VERIFY                                                                                            /*             require(tx.outputs[5].lockingBytecode == vaultLockingBytecode);               */\nOP_5 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUAL OP_VERIFY                                                                             /*             require(tx.outputs[5].tokenCategory == tx.inputs[0].outpointTransactionHash); */\nOP_5 OP_OUTPUTTOKENAMOUNT <0x00c06e31d91001> OP_NUMEQUAL OP_VERIFY                                                                                /*             require(tx.outputs[5].tokenAmount == 300000000000000);                        */\n                                                                                                                                                  /*                                                                                           */\nOP_6 OP_OUTPUTBYTECODE OP_1 OP_PICK OP_EQUAL OP_VERIFY                                                                                            /*             require(tx.outputs[6].lockingBytecode == vaultLockingBytecode);               */\nOP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUAL OP_VERIFY                                                                             /*             require(tx.outputs[6].tokenCategory == tx.inputs[0].outpointTransactionHash); */\nOP_6 OP_OUTPUTTOKENAMOUNT <0x00c06e31d91001> OP_NUMEQUAL OP_VERIFY                                                                                /*             require(tx.outputs[6].tokenAmount == 300000000000000);                        */\n                                                                                                                                                  /*                                                                                           */\nOP_7 OP_OUTPUTBYTECODE OP_1 OP_PICK OP_EQUAL OP_VERIFY                                                                                            /*             require(tx.outputs[7].lockingBytecode == vaultLockingBytecode);               */\nOP_7 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUAL OP_VERIFY                                                                             /*             require(tx.outputs[7].tokenCategory == tx.inputs[0].outpointTransactionHash); */\nOP_7 OP_OUTPUTTOKENAMOUNT <0x00c06e31d91001> OP_NUMEQUAL OP_VERIFY                                                                                /*             require(tx.outputs[7].tokenAmount == 300000000000000);                        */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*             // Tag this FT mint for indexers                                              */\n                                                                                                                                                  /*             //                                                                            */\n                                                                                                                                                  /*             // 6a              OP_RETURN                                                  */\n                                                                                                                                                  /*             // 04 46 42 43 48  FBCH                                                       */\n                                                                                                                                                  /*             // 04 90 05 10 00  <locktime>                                                 */\n<0x6a>                                                                                                                                            /*             bytes announcement = new LockingBytecodeNullData([                            */\n<0x46424348> OP_SIZE OP_SWAP OP_CAT OP_CAT                                                                                                        /*                 0x46424348,                                                               */\nOP_0 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_SIZE OP_DUP <0x4b> OP_GREATERTHAN OP_IF <0x4c> OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT /*                 bytes(tx.inputs[0].nftCommitment.split(4)[0])                             */\n                                                                                                                                                  /*                 ]);                                                                       */\nOP_8 OP_OUTPUTBYTECODE OP_1 OP_PICK OP_EQUAL OP_VERIFY                                                                                            /*             require(tx.outputs[8].lockingBytecode == announcement);                       */\n                                                                                                                                                  /*                                                                                           */\n                                                                                                                                                  /*             // Is this check necessary if the op_return is used?                          */\nOP_8 OP_OUTPUTVALUE OP_0 OP_NUMEQUAL OP_VERIFY                                                                                                    /*             require(tx.outputs[8].value == 0);                                            */\nOP_TXOUTPUTCOUNT OP_9 OP_NUMEQUAL OP_VERIFY                                                                                                       /*             require(int(tx.outputs.length) == 9);                                         */\n                                                                                                                                                  /*                                                                                           */\nOP_DROP OP_DROP OP_DROP OP_ENDIF                                                                                                                  /*         }                                                                                 */\n                                                                                                                                                  /*                                                                                           */\nOP_1 OP_NIP                                                                                                                                       /*     }                                                                                     */\n                                                                                                                                                  /* }                                                                                         */"
      }
    },
    "supported": [
      "BCH_SPEC"
    ],
    "version": 0
  }