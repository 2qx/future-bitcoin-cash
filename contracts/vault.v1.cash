pragma cashscript ^0.10.0;

// [WIP] 2024-04-17

// Future BCH fungible token vault
//
//  Flow:
//
//  inputs              outputs
//  [0] contract    ->  [0] contract
//  [1] coupon?     =>  [1] userPkh
//  [2] .. userPkh     ^
//

contract Vault(bytes4 locktime, bytes32 tokenCategory) {

    function swap() {
        
        // If tokens are being redeemed to the vault
        // tokens may be redeemed in any amount after the future has matured
        bool tokensRedeemed = (tx.outputs[this.activeInputIndex].tokenAmount - tx.inputs[this.activeInputIndex].tokenAmount) > 0;
        bool toVault = tx.outputs[this.activeInputIndex].lockingBytecode == new LockingBytecodeP2SH32(hash256(this.activeBytecode));

        if(tokensRedeemed && toVault){
          
            // enforce BIP65 timelocks and the direction of the swap 
            require(tx.time >= int(locktime));
            require(tx.outputs[this.activeInputIndex].tokenCategory == tokenCategory);
        } 

        // 
        // Inspired by wrapped.cash
        // Dagur Valberg 2023
        // License: MIT
        //
        require(
          tx.inputs[this.activeInputIndex].tokenCategory 
          == 
          tx.outputs[this.activeInputIndex].tokenCategory
          );

        // Enforce that this contract lives on
        require(
          tx.outputs[this.activeInputIndex].lockingBytecode 
          == 
          tx.inputs[this.activeInputIndex].lockingBytecode
          );

        require(
          tx.inputs[this.activeInputIndex].tokenAmount + 
          tx.inputs[this.activeInputIndex].value 
          == 
          tx.outputs[this.activeInputIndex].tokenAmount + 
          tx.outputs[this.activeInputIndex].value
         );
    }

    // shard or split
    // 
}
