pragma cashscript ^0.10.0;

//
// Gantry - Create vault contracts with fungible tokens in a uniform way. 
//
// From: Future Bitcoin Cash
//
// Author: 2qx <2qx_in_the_future@small.neomailbox.ch>
//
// NFT commentment stores the next series locktime in 32-bit LE
//
// [ ] Require the minting baton in the input
// [ ] Get the current step increment for the chain of futures
// [ ] Get the current vault locktime to be printed.
//
//   either
// [ ] Mint an array of FT utxos, 
// [ ] send them off to a Vault
//
//   or
// [ ] skip every 10th print.
//
// [ ] increment locktime height value stored on NFT baton
// [ ] assure NFT baton is returned
//
//
//  Gantry i/o Flow:
//
//  Inputs              Outputs
//  [0] NFT mintBaton   ->  [0] NFT mintBaton
//  [1] topup sats?     =>  [1] FTs Vault
//                          [2] OP_RETURN SMP0 1000 FBCH <locktime>
//  
//  ... but skip every 10th token print, 
//   which will be printed by the gantry of the next order.
//  [0] NFT mintBaton   =>  [0] NFT mintBaton
//


contract Gantry(
    bytes4 stepBytes, 
    bytes vaultUnlockingBytecode
    ) {

    function execute(){

        // Gantry covenant and the associated NFT baton must be spent as index 0
        // input and passed on to index 0 output, funded with some dust BCH in order
        // to avoid griefing by someone with access to hashrate
        require(this.activeInputIndex == 0);
        require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
        require(tx.inputs[this.activeInputIndex].tokenCategory == tx.outputs[this.activeInputIndex].tokenCategory);
        require(tx.outputs[this.activeInputIndex].value > 1000);

        // simply return the NFT baton without minting FTs
        require(tx.outputs[0].tokenAmount == 0);

        int step = int(stepBytes);
        int locktime = int(tx.inputs[this.activeInputIndex].nftCommitment);

        // Height stored in mutable NFT commitment MUST be incremented by <step>.
        // Where both timelock and step are given in block height.
        require(tx.outputs[this.activeInputIndex].nftCommitment == bytes4(locktime+step));

        // if not a 10th step, mint tokens
        if((locktime/step)%10==0){ 
            require(tx.outputs.length == 1);
        } else {
            // Get the redeem bytecode of the vault instance
            bytes theVault = 
                0x04 + bytes4(tx.inputs[0].nftCommitment) +     // locktime
                vaultUnlockingBytecode;    

            bytes vaultLockingBytecode = 0xaa20 + hash256(theVault) + 0x87;

            // Verify creation of exactly three Vault genesis output
            require(tx.outputs[1].lockingBytecode == vaultLockingBytecode);       
            require(tx.outputs[1].tokenCategory == tx.inputs[0].outpointTransactionHash);
            require(tx.outputs[1].tokenAmount == 700000000000000);     
            require(tx.outputs[1].value > 1000);

            // require(tx.outputs[2].lockingBytecode == vaultLockingBytecode);       
            // require(tx.outputs[2].tokenCategory == tx.inputs[0].outpointTransactionHash);
            // require(tx.outputs[2].tokenAmount == 700000000000000);     
            // require(tx.outputs[2].value > 1000);

            // require(tx.outputs[3].lockingBytecode == vaultLockingBytecode);       
            // require(tx.outputs[3].tokenCategory == tx.inputs[0].outpointTransactionHash);
            // require(tx.outputs[3].tokenAmount == 700000000000000);     
            // require(tx.outputs[3].value > 1000);           

            // Tag this FT mint for indexers 
            //
            // 6a              OP_RETURN
            // 04 46 42 43 48  SMP0
            // 02 10 00        minted ticker from input 0
            // 04 46 42 43 48  FBCH
            // 04 90 05 10 00  <locktime>
            // 01 08           decimals
            bytes announcement = 0x6a0446424348021000044642434804 + tx.inputs[0].nftCommitment + 0x0108;
            require(tx.outputs[4].lockingBytecode == announcement);
            require(tx.outputs[4].tokenCategory == 0x);
            require(tx.outputs[4].value == 0);

            // Ensure no other outputs can be created
            require(tx.outputs.length == 5);  

        }     
        
    }
}