pragma cashscript ^0.10.0;

// [WIP] 2024-04-23

// Coupon: 
//
// - apply() by spending at least <amount> on <lock>
//
// Allow anyone to use an unspent output (utxo) in a transaction ...
//
// ... given:
//
// [ ] the zeroth output value exceeds a predefined amount 
// [ ] the zeroth output is to a predefined address
// [ ] the coupon must be appied last
//
// Note: this contract is designed to run as part of an integrated
// multi-contract system. It's not in itself sufficient to assure 
// an advisory doesn't claim all coupons instantly for no cost.
//
// ... If there is no time or monetary cost to spend every coupon, 
// it should be expected that they will all be cleaned at once.
//

contract Coupon(

  // Minnimum spent to claim the coupon.
  int amount,
  
  // Destination for the zeroth (constraining) output.
  bytes lock

){

  function apply() {
    
    // assure at the minium amount is sent as the first output
    require(tx.outputs[0].value >= amount);

    // Check that the first output sends to the intended recipient. 
    require(tx.outputs[0].lockingBytecode == lock);
  
    // The coupon must be spent as the last input, 
    //   therefore only coupon may be spent at a time.
    require(this.activeInputIndex+1 == (tx.inputs.length));

  }

}
