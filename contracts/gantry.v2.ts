// Automatically Generated
export const artifact = {
  "contractName": "Gantry",
  "constructorInputs": [
    {
      "name": "step",
      "type": "int"
    },
    {
      "name": "vaultUnlockingBytecode",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "execute",
      "inputs": []
    }
  ],
  "bytecode": "OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTVALUE e803 OP_GREATERTHAN OP_VERIFY OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_BIN2NUM OP_INPUTINDEX OP_OUTPUTTOKENCOMMITMENT OP_OVER OP_3 OP_PICK OP_ADD OP_4 OP_NUM2BIN OP_EQUALVERIFY OP_DUP OP_ROT OP_DIV OP_10 OP_MOD OP_0 OP_NUMEQUAL OP_IF OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_ELSE OP_DUP OP_SIZE OP_NIP OP_OVER OP_CAT OP_2 OP_PICK OP_CAT aa20 OP_OVER OP_HASH256 OP_CAT 87 OP_CAT OP_1 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENAMOUNT 00c05773a57c02 OP_NUMEQUALVERIFY OP_1 OP_OUTPUTVALUE e803 OP_GREATERTHANOREQUAL OP_VERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENAMOUNT 00c05773a57c02 OP_NUMEQUALVERIFY OP_2 OP_OUTPUTVALUE e803 OP_GREATERTHANOREQUAL OP_VERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_0 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENAMOUNT 00c05773a57c02 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTVALUE e803 OP_GREATERTHANOREQUAL OP_VERIFY 6a04534d5030021000044642434804 OP_0 OP_UTXOTOKENCOMMITMENT OP_CAT 0108 OP_CAT OP_4 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_4 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_2DROP OP_DROP OP_ENDIF OP_2DROP OP_1",
  "source": "pragma cashscript ^0.10.0;\n\n//\n// Gantry - Create vault contracts with fungible tokens in a uniform way. \n//\n// [Alpha] 2024-05-20\n//\n// From: Future Bitcoin Cash\n//\n// Author: 2qx <2qx_in_the_future@small.neomailbox.ch>\n//\n// NFT commentment stores the next series locktime in 32-bit LE\n//\n// [ ] Require the minting baton in the input\n// [ ] Get the current step increment for the chain of futures\n// [ ] Get the current vault locktime to be printed.\n//\n//   either\n// [ ] Mint an array of FT utxos, \n// [ ] send them off to a Vault\n//\n//   or\n// [ ] skip every 10th print.\n//\n// [ ] increment locktime height value stored on NFT baton\n// [ ] assure NFT baton is returned\n//\n//\n//  Gantry i/o Flow:\n//\n//  Inputs              Outputs\n//  [0] NFT mintBaton   ->  [0] NFT mintBaton\n//  [1] topup sats?     =>  [1] FTs Vault\n//                      =>  [2] FTs Vault\n//                      =>  [3] FTs Vault\n//                          [4] OP_RETURN SMP0 1000 FBCH <locktime> 08\n//  \n//  ... but skip every 10th token print, \n//   which will be printed by the gantry of the next order.\n//  [0] NFT mintBaton   =>  [0] NFT mintBaton\n//\n\n\ncontract Gantry(\n    int step, \n    bytes vaultUnlockingBytecode\n    ) {\n\n    function execute(){\n\n        // Gantry covenant and the associated NFT baton must be spent as index 0\n        // input and passed on to index 0 output, funded with some dust BCH in order\n        // to avoid griefing by someone with access to hashrate\n        require(this.activeInputIndex == 0);\n        require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n        require(tx.inputs[this.activeInputIndex].tokenCategory == tx.outputs[this.activeInputIndex].tokenCategory);\n        require(tx.outputs[this.activeInputIndex].value > 1000);\n        \n        int locktime = int(tx.inputs[this.activeInputIndex].nftCommitment);\n\n        // Height stored in mutable NFT commitment MUST be incremented by <step>.\n        // Where both timelock and step are given in block height.\n        require(tx.outputs[this.activeInputIndex].nftCommitment == bytes4(locktime+step));\n\n        // if not a 10th step, mint tokens\n        if((locktime/step)%10==0){ \n            require(tx.outputs.length == 1);\n        } else {\n            // Get the redeem bytecode of the vault instance\n            bytes theVault = \n                bytes(bytes(locktime).length) + bytes(locktime) +     // locktime\n                vaultUnlockingBytecode;    \n\n            bytes vaultLockingBytecode = 0xaa20 + hash256(theVault) + 0x87;\n\n            // Verify creation of exactly three Vault genesis outputs\n            require(tx.outputs[1].lockingBytecode == vaultLockingBytecode);       \n            require(tx.outputs[1].tokenCategory == tx.inputs[0].outpointTransactionHash);\n            require(tx.outputs[1].tokenAmount == 700000000000000);     \n            require(tx.outputs[1].value >= 1000);\n\n            require(tx.outputs[2].lockingBytecode == vaultLockingBytecode);       \n            require(tx.outputs[2].tokenCategory == tx.inputs[0].outpointTransactionHash);\n            require(tx.outputs[2].tokenAmount == 700000000000000);     \n            require(tx.outputs[2].value >= 1000);\n\n            require(tx.outputs[3].lockingBytecode == vaultLockingBytecode);       \n            require(tx.outputs[3].tokenCategory == tx.inputs[0].outpointTransactionHash);\n            require(tx.outputs[3].tokenAmount == 700000000000000);     \n            require(tx.outputs[3].value >= 1000);           \n\n            // Tag FT metadata for indexers \n            //\n            // 6a              OP_RETURN\n            // 04 53 4d 50 30  SMP0\n            // 02 10 00        Minted ticker from input 0\n            // 04 46 42 43 48  FBCH\n            // 04 90 05 10 00  <locktime> (4-byte LE)\n            // 01 08           decimals\n            bytes announcement = 0x6a04534d5030021000044642434804 + tx.inputs[0].nftCommitment + 0x0108;\n            require(tx.outputs[4].lockingBytecode == announcement);\n            require(tx.outputs[4].tokenCategory == 0x);\n            require(tx.outputs[4].value == 0);\n\n            // Ensure no other outputs can be created\n            require(tx.outputs.length == 5);  \n\n        }     \n        \n    }\n}",
  "debug": {
    "bytecode": "c0009c69c0c7c0cd8769c0cec0d18769c0cc02e803a069c0cf81c0d25179537993548087690079527a965a97009c63c4519c69670079827751797e52797e02aa205179aa7e01877e51cd5179876951d100c8876951d30700c05773a57c029c6951cc02e803a26952cd5179876952d100c8876952d30700c05773a57c029c6952cc02e803a26953cd5179876953d100c8876953d30700c05773a57c029c6953cc02e803a2690f6a04534d503002100004464243480400cf7e0201087e54cd5179876954d100876954cc009c69c4559c6975757568517777",
    "sourceMap": "54:16:54:37;:41::42;:16:::1;:8::44;55:26:55:47:0;:16::64;:79::100;:68::117;:16:::1;:8::119;56:26:56:47:0;:16::62;:77::98;:66::113;:16:::1;:8::115;57:27:57:48:0;:16::55;:58::62;:16:::1;:8::64;59:37:59:58:0;:27::73;:23::74:1;63:27:63:48:0;:16::63;:74::82;;:83::87;;:74:::1;:67::88;;:16;:8::90;66:12:66:20:0;;:21::25;;:12:::1;:27::29:0;:11:::1;:31::32:0;:11:::1;:33:68:9:0;67:20:67:37;:41::42;:20:::1;:12::44;68:15:108:9:0;71:28:71:36;;:22::44;;:54::62;;:16::63:1;72::72:38:0;;71::::1;74:41:74:47:0;:58::66;;:50::67:1;:41;:70::74:0;:41:::1;77:31:77:32:0;:20::49;:53::73;;:20:::1;:12::75;78:31:78:32:0;:20::47;:61::62;:51::87;:20:::1;:12::89;79:31:79:32:0;:20::45;:49::64;:20:::1;:12::66;80:31:80:32:0;:20::39;:43::47;:20:::1;:12::49;82:31:82:32:0;:20::49;:53::73;;:20:::1;:12::75;83:31:83:32:0;:20::47;:61::62;:51::87;:20:::1;:12::89;84:31:84:32:0;:20::45;:49::64;:20:::1;:12::66;85:31:85:32:0;:20::39;:43::47;:20:::1;:12::49;87:31:87:32:0;:20::49;:53::73;;:20:::1;:12::75;88:31:88:32:0;:20::47;:61::62;:51::87;:20:::1;:12::89;89:31:89:32:0;:20::45;:49::64;:20:::1;:12::66;90:31:90:32:0;:20::39;:43::47;:20:::1;:12::49;100:33:100:65:0;:78::79;:68::94;:33:::1;:97::103:0;:33:::1;101:31:101:32:0;:20::49;:53::65;;:20:::1;:12::67;102:31:102:32:0;:20::47;:51::53;:20:::1;:12::55;103:31:103:32:0;:20::39;:43::44;:20:::1;:12::46;106:20:106:37:0;:41::42;:20:::1;:12::44;68:15:108:9;;;;49:4:110:5;;",
    "logs": [],
    "requireMessages": []
  },
  "compiler": {
    "name": "cashc",
    "version": "0.10.0-next.4"
  },
  "updatedAt": ""
}