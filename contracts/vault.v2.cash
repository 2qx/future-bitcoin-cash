pragma cashscript ^0.10.0;

// Vault - Store coins locked for tokens until maturation date. 
//
// From: Future Bitcoin Cash
//
// Author: 2qx <2qx_in_the_future@small.neomailbox.ch>
//
//     If redeeming tokens for coins in the vault: 
// [ ]   enforce the timelock is met.
//
// [ ] Assure the utxo token category matches that of the output.
// [ ] Assure the the utxo and output lock match per in the transaction.
// [ ] Assure an equal amounts of coins are exchanged for tokens
//
// [WIP] 2024-04-25
//
//  inputs              outputs
//  [0] contract    ->  [0] contract
//  [1] userPkh     =>  [1] userPkh
//  [2] coupon?     -^
//

contract Vault(bytes4 locktime) {

    function swap() {
        
        // If tokens are flowing back into this contract
        if(tx.outputs[this.activeInputIndex].tokenAmount > tx.inputs[this.activeInputIndex].tokenAmount){
            // enforce a BIP65 timelock 
            require(tx.time >= int(locktime));
        } 

        // 
        // Inspired by wrapped.cash c.Nov 2023
        // Author: Dagur Valberg Johannsson <dagurval@pvv.ntnu.no> 
        // License: MIT
        //
        require(
          tx.inputs[this.activeInputIndex].tokenCategory 
          == 
          tx.outputs[this.activeInputIndex].tokenCategory
          );

        // Enforce that this contract lives on
        require(
          tx.outputs[this.activeInputIndex].lockingBytecode 
          == 
          tx.inputs[this.activeInputIndex].lockingBytecode
          );

        require(
          tx.inputs[this.activeInputIndex].tokenAmount + 
          tx.inputs[this.activeInputIndex].value 
          == 
          tx.outputs[this.activeInputIndex].tokenAmount + 
          tx.outputs[this.activeInputIndex].value
         );
    }

}
